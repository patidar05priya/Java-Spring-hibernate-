package com.inn.headstartdemo.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inn.headstartdemo.model.Address;
import java.lang.Integer;

import java.util.List;
import com.inn.headstartdemo.dao.IAddressDao;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.service.IAddressService;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.transaction.annotation.Transactional;
import com.inn.headstartdemo.exceptions.application.AddressAlreadyExistException;
import com.inn.headstartdemo.exceptions.application.AddressNotFoundException;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import org.hibernate.exception.ConstraintViolationException;
import  com.inn.headstartdemo.exceptions.application.BusinessException;
import  com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.NoResultException;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import javax.validation.Valid;


/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */
 
/**
 * 
 * Service 
 *
 */
 
@ExceptionHandler 
@Service
@Transactional
public class AddressServiceImpl extends AbstractService<Integer, Address> implements IAddressService {
	/** The logger. */
 	private Logger logger=LoggerFactory.getLogger(AddressServiceImpl.class);
    
    /** The address dao*/
    private  IAddressDao AddressServiceImplDao;
    
	@ExceptionHandler 
	@Autowired
	public void setDao(IAddressDao dao) {
		super.setDao(dao);
		AddressServiceImplDao = dao;
	}
	
	/**
	 * 
	 *Returns the list of Address using entity
	 *@parameter entity to search record
	 *@returns a Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public List<Address> search(Address address) throws BusinessException{
	logger.info("Finding record by address name :"+address);
		return super.search(address);
	}

	/**
	 * 
	 *Returns the Address finding by id
	 *@parameter primaryKey to find Address
	 *@throws BusinessException
	 *@throws AddressNotFoundException
	 *@returns a Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public Address findById(Integer primaryKey)throws AddressNotFoundException,BusinessException{
		logger.info("Finding record by primaryKey :"+primaryKey);
		try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new AddressNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new AddressNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the list of Address 
	 *@throws BusinessException
	 *@throws AddressNotFoundException
	 *@returns a list of Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public List<Address> findAll() throws BusinessException ,AddressNotFoundException{
		try{
			return super.findAll();

		}
		catch(EmptyResultDataAccessException ex)
		{	
			throw new AddressNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new AddressNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the new valid Address record
	 *@parameter address to create new record
	 *@returns a new Address record
	 *@throws BusinessException 
	 *@throws AddressAlreadyExistException 
	 *@throws ValidationFailedException		
	 */
	@ExceptionHandler 
	@Override
	public Address create(@Valid Address address) throws BusinessException{
    logger.info("Create record by address :"+address);
		try{
		return super.create(address);
    	}catch(DataIntegrityViolationException ex)
    	{
				throw new AddressAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    	throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated valid Address record
	 *@parameter address to updtae Address record
	 * @throws BusinessException	
 	 * @throws ValidationFailedException	
 	 * @throws AddressAlreadyExistException	
	 *@returns a updated Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public Address update(@Valid Address address)throws BusinessException {
	logger.info("Update record by address :"+address);
		try{
			return super.update(address);
		}catch(DataIntegrityViolationException ex)
    	{
			throw new AddressAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *method to remove Address record
	 * @throws 	BusinessException
	 *@parameter address  to remove Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public void remove(Address address) throws BusinessException {
	logger.info("Remove record by address :"+address);
		try{
			super.remove(address);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new AddressAlreadyExistException(ex);
		}
		
	}

	/**
	 * 
	 *method to remove Address record by primaryKey
	 *@throws BusinessException 	
	 *@parameter primaryKey  to remove Address 
	 * 
	 */
	@ExceptionHandler 
	@Override
	public void removeById(Integer primaryKey) throws BusinessException  {
	logger.info("Remove record by primaryKey :"+primaryKey);
	try{
			super.removeById(primaryKey);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new AddressAlreadyExistException(ex);
		}
	}

}
