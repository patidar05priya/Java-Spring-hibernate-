package com.inn.headstartdemo.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import  com.inn.headstartdemo.model.EmailNotifications;
import com.inn.headstartdemo.model.Users;

import java.lang.Integer;

import java.util.Date;
import java.util.List;

import com.inn.headstartdemo.dao.IEmailNotificationsDao;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.IEmailNotificationsService;
import com.inn.headstartdemo.service.generic.AbstractService;

import org.springframework.transaction.annotation.Transactional;
import com.inn.headstartdemo.exceptions.ExceptionHandler;

import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import  com.inn.headstartdemo.exceptions.application.BusinessException;
import  com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import org.springframework.dao.DataIntegrityViolationException;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * EmailNotificationService 
 *
 */
@Service
@Transactional
public class EmailNotificationsServiceImpl extends AbstractService<Long, EmailNotifications> implements IEmailNotificationsService {
 	/** The logger. */
 	private Logger logger=LoggerFactory.getLogger(EmailNotificationsServiceImpl.class);
 	/** The email notifications dao */
	private  IEmailNotificationsDao entityDao;
	@Autowired
	public void setDao(IEmailNotificationsDao dao) {
		super.setDao(dao);
		entityDao = dao;
	}
	
		/**
	 * 
	 *Returns the list of EmailNotifications
	 *@parameter emailNotifications of type EmailNotifications
	 *@returns a listof EmailNotifications
	 * 
	 */
	@ExceptionHandler
    @Override
	public List<EmailNotifications> search(EmailNotifications emailNotifications)throws BusinessException {
	logger.info("Finding record by emailNotifications name :"+emailNotifications);
		return super.search(emailNotifications);
	}

	/**
	 * 
	 *Returns the EmailNotifications finding by id
	 *@parameter primaryKey of type Long
	 *@returns EmailNotification 
	 * 
	 */
	@Override
	public EmailNotifications findById(Long primaryKey)throws BusinessException {
	logger.info("Finding record by primaryKey :"+primaryKey);
	try{
		return super.findById(primaryKey);
		}
		catch(EmptyResultDataAccessException ex)
		{
		 logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		 logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *Returns the list of EmailNotifications
	 *@returns a list of EmailNotifications
	 * 
	 */
	@Override
	public List<EmailNotifications> findAll() throws BusinessException {
			try{
			return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
		 logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		 logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *Returns the new valid EmailNotification
	 *@parameter valid emailNotifications of type EmailNotifications
	 *@returns a new emailNotifications of EmailNotifications
	 * 
	 */
	@Override
	public EmailNotifications create(@Valid EmailNotifications emailNotifications)throws BusinessException {
    logger.info("Create record by emailNotifications :"+emailNotifications);
		try{
		return super.create(emailNotifications);
		}catch(DataIntegrityViolationException ex)
    	{
    	 logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		 logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated valid EmailNotifications
	 *@parameter valid entity of type EmailNotifications
	 *@returns a updated EmailNotification entity
	 * 
	 */
	@Override
	public EmailNotifications update(@Valid EmailNotifications emailNotifications)throws BusinessException {
	logger.info("Update record by emailNotifications :"+emailNotifications);
		try{
		return super.update(emailNotifications);
		}catch(DataIntegrityViolationException ex)
    	{
    	 logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		 logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *Returns the removed valid EmailNotifications entity
	 *@parameter entity of type EmailNotifications
	 * 
	 */
	@Override
	public void remove(EmailNotifications emailNotifications)throws BusinessException {
	logger.info("Remove record by emailNotifications :"+emailNotifications);
		super.remove(emailNotifications);
	}

	/**
	 * 
	 *Returns the removed valid EmailNotifications by primaryKey
	 *@param primaryKey of type long 
	 * 
	 */
	@Override
	public void removeById(Long primaryKey)throws BusinessException {
	logger.info("Remove record by primaryKey :"+primaryKey);
		super.removeById(primaryKey);
	}
	
	/**
	 * 
	 *Returns the new entity of EmailNotifications
	 *@parameter users entity,email subject,sendby to create new EmailNotifications
	 * 
	 */
	public void createNotification(String email,String sendBy,Users emailNotifications,String subject )
	{
	try{
		EmailNotifications emailnotifi=new EmailNotifications();		
		emailnotifi.setCreatedDate(new Date());
		emailnotifi.setCreatedTime(new Date());
		emailnotifi.setEmail(email);
		emailnotifi.setSentBy(sendBy);
		emailnotifi.setSentTo(emailNotifications);
		emailnotifi.setSubject(subject);
				create(emailnotifi);
		}catch(BusinessException ex)
		{
		 logger.error(ex.getMessage());
			logger.error("An exception has been caught"+ex.toString());
		}
	}
	
	public Long getTotalCount(){
		return entityDao.getTotalCount();
	}	
}
