package com.inn.headstartdemo.service.impl;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayOutputStream;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.RandomStringUtils;

import org.json.JSONException;
import org.json.JSONObject;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import com.inn.headstartdemo.dao.IUserConfigDao;
import com.inn.headstartdemo.model.SocialCredentials;
import com.inn.headstartdemo.service.ISocialCredentialsService;
import com.inn.headstartdemo.dao.ISocialCredentialsDao;

import com.inn.headstartdemo.security.authentication.DomainAuthenticationToken;

import com.inn.headstartdemo.model.UserConfig;
import com.inn.headstartdemo.dao.IRolesDao;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.model.UserConfig.CurrencyFormat;
import com.inn.headstartdemo.model.UserConfig.DateFormat;
import com.inn.headstartdemo.model.UserConfig.TimeZone;
import com.inn.headstartdemo.model.UserConfig.UserLanguage;
import com.inn.headstartdemo.utils.ConfigUtil;

import  com.inn.headstartdemo.model.Roles;
import com.inn.headstartdemo.dao.IUsersDao;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.service.IUsersService;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.validation.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */

/**
 * 
 *Users Service
 *
 */
@Service
@Transactional
public class UsersServiceImpl extends AbstractService<Integer, Users> implements IUsersService {
 private Logger logger=LoggerFactory.getLogger(UsersServiceImpl.class);
  
  private IUsersDao iUsersDao;
				@Autowired
	private ISocialCredentialsService socialCredentials;
	
	@Autowired
	private ISocialCredentialsDao socialCredentialsDao;
		@Autowired
	private IUserConfigDao userConfigDao;
	
	@Autowired
	private IRolesDao rolesDao;

	private PasswordEncoder passwordEncoder;
	@ExceptionHandler
	@Autowired
	public void setPasswordEncoder(PasswordEncoder passwordEncoder) {
	        this.passwordEncoder = passwordEncoder;
	}
	@Autowired
	public void setDao(IUsersDao dao) {
		super.setDao(dao);
		this.iUsersDao=dao;
	}
	
	/**
	 * 
	 *method to find list of user entities
	 *@parameter users of type Users
	 *@returns list of User
	 * 
	 */
	@Override
	public List<Users> search(Users users) throws BusinessException{
		logger.info("Finding users list by users :"+users);
		return super.search(users);
	}

	/**
	 * 
	 *method to find user by primarykey
	 *@parameter primaryKey of type integer
	 *@returns User
	 * 
	 */
	@Override
	public Users findById(Integer primaryKey) throws BusinessException{
	logger.info("Finding user by primaryKey :"+primaryKey);
		try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to find all users
	 *@returns list of Users
	 * 
	 */
	@Override
	public List<Users> findAll() throws BusinessException{
	
	try{
		return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to create Users
	 *@parameter users of type Users
	 *@returns newUser
	 * 
	 */
	@Override
	public Users create(Users users) throws BusinessException{
	logger.info("Creating User by an users :"+users);
		try{
		return super.create(users);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}
		/**
	 * 
	 *method to update Users record by an users
	 *@parameter users of type Users
	 *@returns Update User
	 * 
	 */
	@Override
	public Users update(Users users) throws BusinessException{
		logger.info("Updating User by an users :"+users);
		try{
		return super.update(users);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    	logger.error(ex.getMessage());	
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *method to remove User by an users
	 *@parameter users of type Users
	 * 
	 */
	@Override
	public void remove(Users users) throws BusinessException{
		logger.info("RemovingUser by an users :"+users);
		super.remove(users);
	}

	/**
	 * 
	 *method to remove User by primaryKey
	 *@parameter primaryKey of type Integer
	 * 
	 */
	@Override
	public void removeById(Integer primaryKey) throws BusinessException{
		logger.info("Removing User by primaryKey :"+primaryKey);
		try{
		super.removeById(primaryKey);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to lock/unlock user
	 *@parameter username of type String
	 *@returns user status
	 * 
	 */	

	  public Boolean unLock(String username)
	  { logger.info("Unlock User by username :"+username);
	  	return iUsersDao.unLock(username);
	  }
	
	  @Override
		public Users findByUsername(String name) throws ValueNotFoundException 
		{   logger.info("Finding User by name :"+name);
			return iUsersDao.findByUserName(name);
		}  
	
		 @Override
	  public Users findByEmail(String email) 
		{   logger.info("Finding User by email :"+email);
			return iUsersDao.findByEmail(email);
		} 
		 
		@Override
		public Users findByUserName(String username) {
			 logger.info("Finding User by username :"+username);
				return iUsersDao.findByUserName(username);
		}
		
				@Override
		public Users gmailRegistration(String gaccesstoken) throws JSONException, BusinessException, HttpException, IOException		{
		logger.debug("Google Social Process Start");
		Users users = new Users();
		String urlGmailUser=ConfigUtil.getConfigProp(ConfigUtil.GOOGLE_USER_DETAIL_URL)+gaccesstoken;		
		String detail=getDetailUserByHttp(urlGmailUser);	 
        JSONObject json=new JSONObject(detail);    
        String userId=(String) json.get("id");
				 String emailId=(String) json.get("email");
        Users user=iUsersDao.findByEmail(emailId);  
        logger.debug("Find User exist in application or not");
        List<SocialCredentials> scEntity=socialCredentials.findByGoogleId(userId);
       	  if(user==null)
       {
					
							logger.debug("New User! Start registration process");
							return createNewGoogleUser(users,json,gaccesstoken ); 		  
						
       }
      else{
         	 SocialCredentials socialuser=null;
         	 try{
         	socialuser=socialCredentialsDao.findByUserId(user.getUserid());
         	 }catch (ValueNotFoundException e) {
				   logger.error(e.getMessage());
			}
         	if(socialuser==null)
         	 {
         			 SocialCredentials scNewntity=new SocialCredentials();
         			 scNewntity.setGmailToken(gaccesstoken);
       		 		 scNewntity.setGoogleUserid((String)json.get("id"));
       		 		 scNewntity.setUsers(user);
       		 		        				 socialCredentials.create(scNewntity);
       				        		
         		
         	 }	
         		else if(socialuser.getGoogleUserid()!=null)
         		 {
         			logger.info("Existing User from Gmail");
         			SocialCredentials newsc= googleCredentailDetailUpdate(scEntity,gaccesstoken );         			
         			 
         		 }
         		else{
       				socialuser.setGmailToken(gaccesstoken);
       				socialuser.setGoogleUserid(userId);
       				socialCredentials.update(socialuser);			
       				 
         			 
         		 }
         		 
       		}
       		return user;
		
		}
		
		@Override
		public Users createUsersFromFacebook(String userID,String facebookToken ) throws JSONException, HttpException, IOException, BusinessException,ValueNotFoundException 
		{
		
		logger.info("Facebook Registration Started");
		Users users = new Users();
		String urlUserDetail = ConfigUtil.getConfigProp(ConfigUtil.FACEBOOK_GRAPH_API_USER_DETAIL_URL)+facebookToken;
		String detail=getDetailUserByHttp(urlUserDetail);       
        JSONObject json=new JSONObject(detail);
        String userId=(String) json.get("id");
        String userProfilePic="https://graph.facebook.com/"+userId+"/picture?type=small";
        InputStream pic=getDetailUserByHttpInputStream(userProfilePic);
        byte[] image = null;
       
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            int nRead;
            byte[] data = new byte[16384];

            while ((nRead = pic.read(data, 0, data.length)) != -1) {
              buffer.write(data, 0, nRead);
            }

          
            image = buffer.toByteArray();
    		  buffer.flush();
		 String emailId=(String) json.get("email");
        Users user=iUsersDao.findByEmail(emailId);
       		  List<SocialCredentials> scEntity=socialCredentials.findByFacebookId(userId);        
        
       
       if(user==null) 
       	{
              			return createFacebookUser(users,json,facebookToken,image );
		 					
		 		
       	}else
       	{
       	
       	 SocialCredentials socialuser=socialCredentialsDao.findByUserId(user.getUserid());
       
       
       		 if(socialuser==null)
			 {
				SocialCredentials scNewntity=new SocialCredentials();
				 scNewntity.setFacebookToken(facebookToken);
				 scNewntity.setFacebookUserid((String) json.get("id"));
				 scNewntity.setUsers(user);
				 				 socialCredentials.create(scNewntity);
				 			 
				 
			 }else if(socialuser.getFacebookUserid()!=null)
				{
					
					SocialCredentials newsc=facebookCredentailDetailUpdate(scEntity,facebookToken );
					
				}	
				else
				{
				
					socialuser.setFacebookToken(facebookToken);
					socialuser.setFacebookUserid(userId);
					socialCredentials.update(socialuser);			
					
			       				
				}
			}
			return user;
		}
		private Users createNewGoogleUser(Users users,JSONObject json,String gaccesstoken ) throws JSONException,BusinessException {
		 users.setPassword(passwordEncoder.encodePassword("test123",null));
		 users.setActivationkey(this.generateActivationCode());
		 String []Spilt=((String)json.get("email")).split("@");		
		 users.setUsername(Spilt[0]);
		 users.setEmail((String)json.get("email"));
		 users.setEnabled(true);
		  Roles role= rolesDao.findByPk(new Long(2));
		 Set<Roles> roles=new HashSet<Roles>();
		 roles.add(role);
		 users.setRoles(roles);
				 logger.debug("New user on platform");
		 Users creUsers= super.create(users);
		  UserConfig userConfig=new UserConfig();
		 userConfig.setUserLanguage(UserLanguage.en);
		 userConfig.setCurrencyFormat(CurrencyFormat.indian);
		 userConfig.setDateFormat(DateFormat.yyyymmdd_dash);
		 userConfig.setTimeZone(TimeZone.IST);
		 userConfig.setUserid(creUsers);
		userConfigDao.create(userConfig);
		 logger.debug("User name "+users.getUsername());
		 SocialCredentials scNewntity=new SocialCredentials();
		 scNewntity.setGmailToken(gaccesstoken);
		 scNewntity.setGoogleUserid((String)json.get("id"));
		 scNewntity.setUsers(creUsers);
				 socialCredentials.create(scNewntity);
		 return creUsers;		
	}
		@Override
		public void setUserAuthentication(Users newsc) throws BusinessException{
		try{
											
			 SecurityContextHolder.getContext().getAuthentication();
		 	 final Authentication auth=new DomainAuthenticationToken(newsc.getUsername(),newsc.getPassword());			 
		 				 	
		 	 DomainAuthenticationToken tokenAuth=(DomainAuthenticationToken) auth;
		 	 tokenAuth.setUserid(newsc.getUserid());
		 	 			 	
		 	 SecurityContext sc=  SecurityContextHolder.getContextHolderStrategy().getContext();
		 	 sc.setAuthentication(auth);
		 	 ServletRequestAttributes attr=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();
		 	 if(attr!=null)
			 	 	{  	 
			 		 attr.getRequest().getSession(true).setAttribute("SPRING_SECURITY_CONTEXT", sc);
				    }
				
					 	}catch(Exception updateExp)
		  		{
		   		logger.error("Invalid or null Username:: "+updateExp);
		   		   logger.error(updateExp.getMessage());
				 }
				logger.info("Authenticate Successfully");
		}
		
			
		 private String generateActivationCode(){
		    	return RandomStringUtils.random(10, 0, 20, true,true, "1qaz2xsw3dce4rft5vbg6nhy7ujm8kl9i0o".toCharArray());
				}
				
		private Users createFacebookUser(Users users, JSONObject json, String facebookToken,byte[] image) throws JSONException ,BusinessException{
				 users.setPassword(passwordEncoder.encodePassword("test123",null));
				 users.setActivationkey(this.generateActivationCode());
				 String []Spilt=((String)json.get("email")).split("@");		
		 		 users.setUsername(Spilt[0]);
				 users.setFirstname((String) json.get("first_name"));
				 users.setLastname((String) json.get("last_name"));
				 users.setEmail((String) json.get("email"));
				 users.setEnabled(true);
				 users.setImageFile(image);
								 Roles role= rolesDao.findByPk(new Long(2));
				 Set<Roles> roles=new HashSet<Roles>();
				 roles.add(role);
				 users.setRoles(roles);
		 		 logger.debug("New user on platform");
		 		 logger.debug("Registration is processed");
		 		 Users creUsers= super.create(users);
		 		  UserConfig userConfig=new UserConfig();
				 userConfig.setUserLanguage(UserLanguage.en);
				userConfig.setCurrencyFormat(CurrencyFormat.indian);
		 		userConfig.setDateFormat(DateFormat.yyyymmdd_dash);
		 		userConfig.setTimeZone(TimeZone.IST);
				 userConfig.setUserid(creUsers);
				 userConfigDao.create(userConfig);		 		
		 		 logger.debug("User name "+users.getUsername());
		 		 SocialCredentials scNewntity=new SocialCredentials();
		 		 scNewntity.setFacebookToken(facebookToken);
		 		 scNewntity.setFacebookUserid((String) json.get("id"));
		 		 scNewntity.setUsers(creUsers);
				 		 		
		 		  socialCredentials.create(scNewntity);		
 				return creUsers;
	}
	    private String getDetailUserByHttp(String detailurl) throws HttpException, IOException
	    {
	    	HttpClient httpclient = new HttpClient();		
			GetMethod get=new GetMethod(detailurl);
			get.setFollowRedirects(true);
			HttpMethodParams param = new HttpMethodParams();
			get.setParams(param);
			httpclient.executeMethod(get);
			return get.getResponseBodyAsString();      	
	    	
	    	
	    }
		 private InputStream getDetailUserByHttpInputStream(String detailurl) throws HttpException, IOException
			    {
			    	HttpClient httpclient = new HttpClient();		
					GetMethod get=new GetMethod(detailurl);
					get.setFollowRedirects(true);
					HttpMethodParams param = new HttpMethodParams();
					get.setParams(param);
					httpclient.executeMethod(get);
					return get.getResponseBodyAsStream();      	
			    	
			    	
			    }
	   
	private SocialCredentials googleCredentailDetailUpdate(List<SocialCredentials> scEntity,String accessToken ) throws BusinessException {
		
		logger.debug("User Social Details are Updating  ");		
  		SocialCredentials newsc=scEntity.get(0);			 	
 		newsc.setGmailToken(accessToken);
				logger.debug("Your gmail or google token is successfully updated");
 		return socialCredentials.update(newsc);
		
	}
	private SocialCredentials facebookCredentailDetailUpdate(List<SocialCredentials> scEntity, String facebookToken) throws BusinessException {
		
		SocialCredentials newsc=scEntity.get(0);			 	
 		newsc.setFacebookToken(facebookToken);
		 		socialCredentials.update(newsc); 		
		return newsc;
	}	
	 }
