package com.inn.headstartdemo.service.impl;

import java.util.List;

import javax.persistence.NoResultException;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.elasticsearch.index.engine.DocumentMissingException;
import org.hibernate.exception.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.inn.headstartdemo.dao.ICustomerDao;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.CustomerAlreadyExistException;
import com.inn.headstartdemo.exceptions.application.CustomerNotFoundException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import com.inn.headstartdemo.model.Customer;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.ICustomerService;
import com.inn.headstartdemo.service.IElasticSearchService;
import com.inn.headstartdemo.service.generic.AbstractService;



/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * Service 
 *
 */
 
@ExceptionHandler @Service
@Transactional
public class CustomerServiceImpl extends AbstractService<Integer, Customer> implements ICustomerService {
 private Logger logger=LoggerFactory.getLogger(CustomerServiceImpl.class);
 private  ICustomerDao customerDao;
	@ExceptionHandler @Autowired
	public void setDao(ICustomerDao dao) {
		super.setDao(dao);
		customerDao = dao;
	}
	 /** IElasticSearchService Bean injection */
	@Autowired
	IElasticSearchService elasticSearchService;
	
		/**
	 * 
	 *Returns the list of Customer using entity
	 *@parameter customer to search record
	 *@returns a Customer record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Customer> search(Customer customer) throws BusinessException{
	logger.info("Finding record by customer name :"+customer);
		return super.search(customer);
	}

	/**
	 * 
	 *Returns the Customer finding by id
	 *@parameter primaryKey to find Customer
	 *@throws BusinessException
	 *@throws CustomerNotFoundException
	 *@returns a Customer record
	 * 
	 */
	@ExceptionHandler @Override
	public Customer findById(@NotNull Integer primaryKey)throws CustomerNotFoundException,BusinessException{
		logger.info("Finding record by primaryKey :"+primaryKey);
		try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new CustomerNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new CustomerNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the list of Customer 
	 *@throws BusinessException
	 *@throws CustomerNotFoundException
	 *@returns a list of Customer record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Customer> findAll() throws BusinessException ,CustomerNotFoundException{
		try{
			return super.findAll();

		}
		catch(EmptyResultDataAccessException ex)
		{	
			throw new CustomerNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new CustomerNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the new valid Customer record
	 *@parameter customer to create new record
	 *@returns a new Customer record
	 *@throws BusinessException 
	 *@throws CustomerAlreadyExistException 
	 *@throws ValidationFailedException		
	 */
	@ExceptionHandler @Override
	public Customer create(@Valid Customer customer) throws BusinessException{
    logger.info("Create record by customer : "+customer);
		try{	
    	Users username =CustomerInfo.getUserInContext();
			
	Customer newEntity=super.create(customer);
	
						

		
		elasticSearchService.createIndex(newEntity.getCustomerNumber().toString(),newEntity.getFirstName().toString(),"Customer");
		
	return newEntity;
    	
    	}catch(DataIntegrityViolationException ex)
    	{
				throw new CustomerAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    	throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated valid Customer record
	 *@parameter customer to update Customer record
	 * @throws BusinessException	
 	 * @throws ValidationFailedException	
 	 * @throws CustomerAlreadyExistException	
	 *@returns a updated Customer record
	 * 
	 */
	@ExceptionHandler @Override
	public Customer update(@Valid Customer customer)throws BusinessException {
	logger.info("Update record by customer : "+customer);	
		try{
			Users username =CustomerInfo.getUserInContext();		
			
			
			Customer newEntity= super.update(customer);
						
			try{
			 	elasticSearchService.updateDocument("Customer", customer.getCustomerNumber().toString(),"",customer.getFirstName().toString());
			}
			catch(DocumentMissingException ex)
			{
					logger.error(ex.getMessage());
				elasticSearchService.createIndex( customer.getCustomerNumber().toString(),customer.getFirstName().toString(),"Customer");
			}
			catch(NullPointerException e)
			{
				logger.error(e.getMessage());
			  elasticSearchService.createIndex( customer.getCustomerNumber().toString(),customer.getFirstName().toString(),"Customer");
			}
				return newEntity;
		
		}catch(DataIntegrityViolationException ex)
    	{
			throw new CustomerAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *method to remove Customer record
	 * @throws 	BusinessException
	 *@parameter customer  to remove Customer record
	 * 
	 */
	@ExceptionHandler @Override
	public void remove(Customer customer) throws BusinessException {
	logger.info("Remove record by customer : "+customer);	
		try{
			super.remove(customer);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new CustomerAlreadyExistException(ex);
		}
				elasticSearchService.deleteDocument("Customer", customer.getCustomerNumber().toString());
			}

	/**
	 * 
	 *method to remove Customer record by primaryKey
	 *@throws BusinessException 	
	 *@parameter primaryKey  to remove Customer 
	 * 
	 */
	@ExceptionHandler @Override
	public void removeById(@NotNull Integer primaryKey) throws BusinessException  {
	logger.info("Remove record by primaryKey :"+primaryKey);
	try{	
			
						super.removeById(primaryKey);
					}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new CustomerAlreadyExistException(ex);
		}
	  		elasticSearchService.deleteDocument("Customer", primaryKey.toString());
			}
	

  @ExceptionHandler public Long getTotalCount(){
				return customerDao.getTotalCount();
	}


}
