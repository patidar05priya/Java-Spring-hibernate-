package com.inn.headstartdemo.service.impl;

import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.test.context.transaction.TransactionConfiguration;

import com.inn.headstartdemo.service.IElasticSearchService;
import com.inn.headstartdemo.utils.ClientProvider;

/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */
@Service
@TransactionConfiguration(defaultRollback=false)
public class ElasticSearchServiceImpl implements IElasticSearchService{
	/** The logger. */
	private final Logger logger = LoggerFactory.getLogger(ElasticSearchServiceImpl.class);

	/** The index var. */
	private static final String INDEX_VAR="headstartdemoindex";
	
	/**
	 * Returns the search index.
	 *
	 * @param term the term
	 * @param term the type
	 * @return the String
	*/	
	@Override
	public String searchIndex(String term, String type, int first, int pageSize) {
	
		List<JSONObject> jsonList=new ArrayList<JSONObject>();	
		JSONObject objectJson;
		QueryBuilder qb;
		org.elasticsearch.action.search.SearchResponse siteHits=null;
		if (term == null || term.trim().length() <= 0) 
		{	qb = matchAllQuery();
		}else 
		{	
				qb=QueryBuilders.fieldQuery("label",term+"*");
				}if(type!=null)
		{
			siteHits = ClientProvider.instance().getClient()
				.prepareSearch()
				.setIndices(INDEX_VAR)
				.setTypes(type)
				.setSearchType(SearchType.DFS_QUERY_THEN_FETCH).setQuery(qb)
				.setFrom(first).setSize(pageSize)
				.execute().actionGet();
		}
		else
		{
			siteHits = ClientProvider.instance().getClient()
					.prepareSearch()
					.setIndices(INDEX_VAR)
					.setSearchType(SearchType.DFS_QUERY_THEN_FETCH).setQuery(qb)
					.setFrom(first).setSize(pageSize)
					.execute().actionGet();
		}
		SearchHit[] results = siteHits.getHits().getHits();
		for (SearchHit hit : results) 
		{
			objectJson=new JSONObject(hit.getSource());
			jsonList.add(objectJson);
		}
		return jsonList.toString();
	}
	
	/**
	 * create  index.
	 *
	 * @param id the id
	 * @param term the type
	*/	
	@Override
	public void createIndex(String id, String name, String type)
	{
	if(type!=null && id!=null && name!=null){
		try{
			ClientProvider.instance().getClient().prepareIndex(INDEX_VAR,type, type+id)
			        .setSource(putJsonDocument(id, name, type )).execute().actionGet();
		}
		catch(Exception ex)
		{
	  logger.error(ex.getMessage());
	   	}
	   	}
	}
	
	/**
	 * put json document
	 *
	 * @param id the id
	 * @param name the name
	 * @param term the type
	*/	
	public  Map<String, Object> putJsonDocument(String id, String name, String type ){
			Map<String, Object> jsonDocument = new HashMap<String, Object>();
			jsonDocument.put("id", id);
			jsonDocument.put("name", name);
			jsonDocument.put("category", type);
						jsonDocument.put("label", id+", "+name+", "+type);
			return jsonDocument;
	}
	
	/**
	 * update document
	 * @param term the type
	 * @param id the id
	 * @param field the field
	 * @param newValue the newValue
	*/	
	@Override
	public void updateDocument(String type, 
         String id, String field, String newValue){
         if(type!=null && field!=null && newValue!=null && id!=null){
			 Map<String, Object> updateObject = new HashMap<String, Object>();
			 updateObject.put("label", id+", "+newValue+", "+type);
				ClientProvider.instance().getClient().prepareUpdate(INDEX_VAR,type, type+id)
				.setScript("ctx._source.label = label")
				.setScriptParams(updateObject).execute().actionGet();
				}
	}
	
	/**
	 * delete document
	 * @param term the type
	 * @param id the id
	*/	
	@Override
	 public void deleteDocument(String type, String id){
	        if(type!=null && id!=null){
		ClientProvider.instance().getClient().prepareDelete(INDEX_VAR,type, type+id).execute().actionGet();
		}
	    }

}
