package com.inn.headstartdemo.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import  com.inn.headstartdemo.model.FileUploads;
import java.lang.Integer;
	import org.hibernate.exception.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;
import java.util.List;
import com.inn.headstartdemo.dao.IFileUploadsDao;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.service.IFileUploadsService;
import org.springframework.transaction.annotation.Transactional;
import javax.validation.Valid;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * FileUploadsService
 *
 */
@Service
@Transactional
public class FileUploadsServiceImpl extends AbstractService<Integer, FileUploads> implements IFileUploadsService {
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(FileUploadsServiceImpl.class);
	/** The fileUpload dao. */
	IFileUploadsDao entityDao;
	@Autowired
	public void setDao(IFileUploadsDao dao) {
		super.setDao(dao);
		entityDao = dao;
	}
	
	/**
	 * 
	 *Returns the FileUploads record seraching by entity
	 *@parameter fileUploads of type FileUploads
	 *@returns a list of FileUploads record
	 * 
	 */	
	@Override
	public List<FileUploads> search(FileUploads fileUploads) throws BusinessException{
		return super.search(fileUploads);
	}

	/**
	 * 
	 *Returns the FileUploads entity finding by id
	 *@parameter id of type Integer
	 *@returns a FileUploads record 
	 * 
	 */	
	@Override
	public FileUploads findById(Integer primaryKey) throws BusinessException{
		try{
		return super.findById(primaryKey);
		}
		catch(EmptyResultDataAccessException ex)
		{
		   logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		   logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}
	
	/**
	 * 
	 *Returns the list of all FileUploads
	 *@returns a list of FileUploads
	 * 
	 */
	@Override
	public List<FileUploads> findAll() throws BusinessException{
		try{
			return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
		   logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		   logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *Returns the new FileUploads record
	 *@parameter valid FileUploads entity
	 *@returns a new FileUploads record
	 * 
	 */	
	@Override
	public FileUploads create(@Valid FileUploads fileUploads) throws BusinessException{
		try{
		return super.create(fileUploads);
		}catch(DataIntegrityViolationException ex)
    	{
    	   logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		   logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated FileUploads record
	 *@parameter valid FileUploads entity
	 *@returns a updated FileUploads record
	 * 
	 */	
	@Override
	public FileUploads update(@Valid FileUploads fileUploads) throws BusinessException{
			
		try{
		return super.update(fileUploads);
		}catch(DataIntegrityViolationException ex)
    	{
    	   logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		   logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}
	
	/**
	 * 
	 *Returns the removed FileUploads record
	 *@parameter entity of type FileUploads
	 * 
	 */	
	@Override
	public void remove(FileUploads fileUploads) throws BusinessException{
		super.remove(fileUploads);
	}

	/**
	 * 
	 *Returns the removed FileUploads record by primary key
	 *@parameter primary key of type Integer  
	 * 
	 */
	@Override
	public void removeById(Integer primaryKey) throws BusinessException{
		super.removeById(primaryKey);
	}

}
