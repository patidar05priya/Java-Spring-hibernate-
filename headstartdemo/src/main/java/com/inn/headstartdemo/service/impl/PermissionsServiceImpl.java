package com.inn.headstartdemo.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.inn.headstartdemo.dao.IPermissionsDao;
import com.inn.headstartdemo.model.Permissions;
import com.inn.headstartdemo.service.IPermissionsService;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import javax.persistence.NoResultException;
import javax.validation.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * Service of Permissions
 *
 */
@Service
@Transactional
public class PermissionsServiceImpl extends AbstractService<Long, Permissions> implements IPermissionsService {
private Logger logger=LoggerFactory.getLogger(PermissionsServiceImpl.class);
	@Autowired
	public void setDao(IPermissionsDao dao) {
		super.setDao(dao);
	}
	@Autowired
	IPermissionsDao dao;
	/**
	 * 
	 *method to search list of permissions by entity 
	 *@parameter permissions of type Permissions
	 *@returns Permissions
	 *
	 */
	@Override
	public List<Permissions> search(Permissions permission) throws BusinessException{
	logger.info("Searching Permissions by permission:"+permission);
		return super.search(permission);
	}
	
	/**
	 * 
	 *method to find permission by primaryKey 
	 *@parameter primaryKey of type Long
	 *@returns Permission
	 *
	 */
	@Override
	public Permissions findById(Long primaryKey) throws BusinessException{
	logger.info("Finding Permissions by primaryKey:"+primaryKey);
		try{
		return super.findById(primaryKey);
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to find list of permission 
	 *@returns Permissions
	 *
	 */
	@Override
	public List<Permissions> findAll() throws BusinessException{
		try{
			return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}

	}
	
	/**
	 * 
	 *method to create permission by permission 
	 *@parameter permission of type Permissions
	 *@returns create permission
	 *
	 */
	@Override
	public Permissions create(Permissions permission) throws BusinessException{
	logger.info("Creating Permissions by entity:"+permission);
	try{
		return super.create(permission);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
    	
	}

	/**
	 * 
	 *method to update permission by permission 
	 *@parameter permission of type Permissions
	 *@returns update permission
	 *
	 */
	@Override
	public Permissions update(Permissions permission) throws BusinessException{
	logger.info("Updating Permissions by entity:"+permission);
		try{
		return super.update(permission);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *method to remove permission by permission 
	 *@parameter permission of type Permissions
	 *
	 */
	@Override
	public void remove(Permissions permission) throws BusinessException{
	logger.info("Removing Permissions by entity:"+permission);
		super.remove(permission);
	}
	
	/**
	 * 
	 *method to remove permission by primaryKey 
	 *@parameter primaryKey of type Long
	 *
	 */
	@Override
	public void removeById(Long primaryKey)throws BusinessException {
	logger.info("Creating Permissions by primaryKey:"+primaryKey);
		super.removeById(primaryKey);
	}

public Long getTotalCount(){
		return dao.getTotalCount();
}
}
