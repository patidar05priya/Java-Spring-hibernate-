package com.inn.headstartdemo.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.inn.headstartdemo.dao.IRolesDao;
import com.inn.headstartdemo.model.Roles;
import com.inn.headstartdemo.service.IRolesService;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import javax.persistence.NoResultException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.validation.ConstraintViolationException;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
@Service
@Transactional
public class RolesServiceImpl extends AbstractService<Long, Roles> implements IRolesService {
	private Logger logger=LoggerFactory.getLogger(RolesServiceImpl.class);
	
	private	IRolesDao entityDao;
	
	@Autowired
	public void setDao(IRolesDao dao) {
		super.setDao(dao);
			entityDao = dao;
	}

	/**
	 * 
	 *method to Finding list of roles for user 
	 *@param roles of type Roles
	 *@return roles
	 *
	 */
	@Override
	public List<Roles> search(Roles roles) throws BusinessException{
	logger.info("Searching roles by roles :"+roles);
		return super.search(roles);
	}

	/**
	 * 
	 *method to Finding roles by primaryKey 
	 *@param primaryKey of type Long
	 *@return roles
	 *
	 */
	@Override
	public Roles findById(Long primaryKey) throws BusinessException{
	logger.info("Searching roles by primaryKey :"+primaryKey);
	try{
		return super.findById(primaryKey);
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to Finding roles 
	 *@return roles
	 *
	 */
	@Override
	public List<Roles> findAll() throws BusinessException{
		try{
			return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
		logger.error(ex.getMessage());
			throw new BusinessException(ex);
		}
	}

	/**
	 * 
	 *method to create roles by entity 
	 *@param roles of type Roles
	 *@return create role
	 *
	 */
	@Override
	public Roles create(Roles roles) throws BusinessException{
	logger.info("Creating roles by roles :"+roles);
		try{
		return super.create(roles);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *method to update roles by entity 
	 *@param roles of type Roles
	 *@return update role
	 *
	 */
	@Override
	public Roles update(Roles roles) throws BusinessException{
	logger.info("Updating roles by roles :"+roles);
		try{
		return super.update(roles);
		}catch(DataIntegrityViolationException ex)
    	{
    	logger.error(ex.getMessage());
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		logger.error(ex.getMessage());
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *method to remove roles by entity 
	 *@param roles of type Roles
	 *
	 */
	@Override
	public void remove(Roles roles) throws BusinessException{
	logger.info("Removing roles by roles :"+roles);
		super.remove(roles);
	}

	/**
	 * 
	 *method to remove roles by primaryKey 
	 *@param primaryKey of type Long
	 *
	 */
	@Override
	public void removeById(Long primaryKey) throws BusinessException{
	logger.info("Removing roles by primaryKey :"+primaryKey);
		super.removeById(primaryKey);
	}
	
	/**
	 * 
	 *method to get list roles by userId 
	 *@param userId of type Integer
	 *@return roles
	 *
	 */
	public List<Roles> getRolesByUserId(Integer userId){
	logger.info("Getting roles by userId :"+userId);
		return entityDao.getRolesByUserId(userId);
	}


 public Long getTotalCount(){
		return entityDao.getTotalCount();
}


public List<Roles> getRolesByRolename(String rolename){
	 
	 return entityDao.getRolesByRolename(rolename);
 }


}
