package com.inn.headstartdemo.service.impl;

import java.util.List;

import javax.persistence.NoResultException;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.elasticsearch.index.engine.DocumentMissingException;
import org.hibernate.exception.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.inn.headstartdemo.dao.IProductDao;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.application.ProductAlreadyExistException;
import com.inn.headstartdemo.exceptions.application.ProductNotFoundException;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import com.inn.headstartdemo.model.Product;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.IElasticSearchService;
import com.inn.headstartdemo.service.IProductService;
import com.inn.headstartdemo.service.generic.AbstractService;



/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * Service 
 *
 */
 
@ExceptionHandler @Service
@Transactional
public class ProductServiceImpl extends AbstractService<Integer, Product> implements IProductService {
 private Logger logger=LoggerFactory.getLogger(ProductServiceImpl.class);
 private  IProductDao productDao;
	@ExceptionHandler @Autowired
	public void setDao(IProductDao dao) {
		super.setDao(dao);
		productDao = dao;
	}
	 /** IElasticSearchService Bean injection */
	@Autowired
	IElasticSearchService elasticSearchService;
	
		/**
	 * 
	 *Returns the list of Product using entity
	 *@parameter product to search record
	 *@returns a Product record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Product> search(Product product) throws BusinessException{
	logger.info("Finding record by product name :"+product);
		return super.search(product);
	}

	/**
	 * 
	 *Returns the Product finding by id
	 *@parameter primaryKey to find Product
	 *@throws BusinessException
	 *@throws ProductNotFoundException
	 *@returns a Product record
	 * 
	 */
	@ExceptionHandler @Override
	public Product findById(@NotNull Integer primaryKey)throws ProductNotFoundException,BusinessException{
		logger.info("Finding record by primaryKey :"+primaryKey);
		try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new ProductNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new ProductNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the list of Product 
	 *@throws BusinessException
	 *@throws ProductNotFoundException
	 *@returns a list of Product record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Product> findAll() throws BusinessException ,ProductNotFoundException{
		try{
			return super.findAll();

		}
		catch(EmptyResultDataAccessException ex)
		{	
			throw new ProductNotFoundException(ex);
		}catch(NoResultException ex)
		{
			throw new ProductNotFoundException(ex);
		}
	}

	/**
	 * 
	 *Returns the new valid Product record
	 *@parameter product to create new record
	 *@returns a new Product record
	 *@throws BusinessException 
	 *@throws ProductAlreadyExistException 
	 *@throws ValidationFailedException		
	 */
	@ExceptionHandler @Override
	public Product create(@Valid Product product) throws BusinessException{
    logger.info("Create record by product : "+product);
		try{	
    	Users username =CustomerInfo.getUserInContext();
			
	Product newEntity=super.create(product);
	
						

		
		elasticSearchService.createIndex(newEntity.getProductCode().toString(),newEntity.getProductName().toString(),"Product");
		
	return newEntity;
    	
    	}catch(DataIntegrityViolationException ex)
    	{
				throw new ProductAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    	throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated valid Product record
	 *@parameter product to update Product record
	 * @throws BusinessException	
 	 * @throws ValidationFailedException	
 	 * @throws ProductAlreadyExistException	
	 *@returns a updated Product record
	 * 
	 */
	@ExceptionHandler @Override
	public Product update(@Valid Product product)throws BusinessException {
	logger.info("Update record by product : "+product);	
		try{
			Users username =CustomerInfo.getUserInContext();		
			
			
			Product newEntity= super.update(product);
						
			try{
			 	elasticSearchService.updateDocument("Product", product.getProductCode().toString(),"",product.getProductName().toString());
			}
			catch(DocumentMissingException ex)
			{
					logger.error(ex.getMessage());
				elasticSearchService.createIndex( product.getProductCode().toString(),product.getProductName().toString(),"Product");
			}
			catch(NullPointerException e)
			{
				logger.error(e.getMessage());
			  elasticSearchService.createIndex( product.getProductCode().toString(),product.getProductName().toString(),"Product");
			}
				return newEntity;
		
		}catch(DataIntegrityViolationException ex)
    	{
			throw new ProductAlreadyExistException(ex);
    		
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new ValidationFailedException(ex);
    	}
	}

	/**
	 * 
	 *method to remove Product record
	 * @throws 	BusinessException
	 *@parameter product  to remove Product record
	 * 
	 */
	@ExceptionHandler @Override
	public void remove(Product product) throws BusinessException {
	logger.info("Remove record by product : "+product);	
		try{
			super.remove(product);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new ProductAlreadyExistException(ex);
		}
				elasticSearchService.deleteDocument("Product", product.getProductCode().toString());
			}

	/**
	 * 
	 *method to remove Product record by primaryKey
	 *@throws BusinessException 	
	 *@parameter primaryKey  to remove Product 
	 * 
	 */
	@ExceptionHandler @Override
	public void removeById(@NotNull Integer primaryKey) throws BusinessException  {
	logger.info("Remove record by primaryKey :"+primaryKey);
	try{	
			
						super.removeById(primaryKey);
					}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException ex)
		{
			throw new ProductAlreadyExistException(ex);
		}
	  		elasticSearchService.deleteDocument("Product", primaryKey.toString());
			}
	

  @ExceptionHandler public Long getTotalCount(){
				return productDao.getTotalCount();
	}


}
