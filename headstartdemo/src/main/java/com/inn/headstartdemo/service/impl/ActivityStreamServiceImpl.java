
package com.inn.headstartdemo.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.hibernate.exception.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inn.headstartdemo.dao.IActivityStreamDao;
import com.inn.headstartdemo.dao.IUsersDao;
import com.inn.headstartdemo.model.ActivityStream;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.IActivityStreamService;
import com.inn.headstartdemo.service.generic.AbstractService;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import  com.inn.headstartdemo.exceptions.application.BusinessException;
import  com.inn.headstartdemo.exceptions.application.ValidationFailedException;
import org.springframework.dao.DataIntegrityViolationException;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 *ActivityStream Service
 *
 */
@Service
@Transactional
public  class ActivityStreamServiceImpl extends AbstractService<Long, ActivityStream> implements IActivityStreamService {
	
	/** The logger. */
	private final Logger logger = LoggerFactory.getLogger(ActivityStreamServiceImpl.class);

	/** The user dao. */
	@Autowired
	IUsersDao userDao;
	
	/** The activitystream dao. */
	public IActivityStreamDao iActivityStreamDao;
	
	@Autowired
	public void setDao(IActivityStreamDao dao) {
		super.setDao(dao);
		iActivityStreamDao=dao;
	}

	/**
	 * 
	 *Returns the List of activitystream find by entity
	 *@parameter activityStream of type ActivityStream
	 *@return a list of activitystream activityStream
	 * 
	 */	
	@Override
	public List<ActivityStream> search(ActivityStream activityStream)throws  BusinessException {
		return super.search(activityStream);
	}

    /**
	 * 
	 *Returns the activitystream find by primaryKey
	 *@parameter primaryKey of type Long 
	 *@returns a activitystream of unique primaryKey
	 * 
	 */
	@Override
	public ActivityStream findById(Long primaryKey)throws  BusinessException{
	try{
		return (super.findById(primaryKey));
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
			throw new BusinessException(ex);
		}
	}

	/** Returns all activity stream list */
	@Override
	public List<ActivityStream> findAll()throws BusinessException {
		try{
		return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
			throw new BusinessException(ex);
		}
	}

    /**
	 * 
	 *Returns to create new activitystream activityStream
	 *@parameter activityStream of type activitystream
	 *@returns a new entity of activitystream
	 * 
	 */
	@Override
	public ActivityStream create(ActivityStream activityStream)throws BusinessException {
		try{
		return super.create(activityStream);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new BusinessException(ex);
    	}
	}

	/**
	 * 
	 *Returns the updated activitystream by entity
	 *@parameter activityStream of type activitystream
	 *@returns a updated activitystream entity
	 * 
	 */
	@Override
	public ActivityStream update(ActivityStream activityStream)throws BusinessException {
		try{
		return super.update(activityStream);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new BusinessException(ex);
    	}
	}

    /**
	 * 
	 *Returns the removed activitystream
	 *@parameter activityStream of type activitystream
	 * 
	 */
	@Override
	public void remove(ActivityStream activityStream) throws BusinessException{
		super.remove(activityStream);
	}

	/**
	 * 
	 *Returns the removed activitystream by using primary key
	 *@parameter primaryKey of type Long
	 * 
	 */
	@Override
	public void removeById(Long primaryKey)throws BusinessException {
		super.removeById(primaryKey);
	}
 
	/**
	 * 
	 *Returns the new activity
	 *@parameter message,id and type to create new activity
	 * 
	 */
	public void createActivity(String message,String id,String Type)
	{
		ActivityStream activityStream=new ActivityStream();
		activityStream.setDate(new Date());
		activityStream.setEntityId(id);
		activityStream.setType(Type);
		activityStream.setUser(CustomerInfo.getUserInContext());
		activityStream.setMessage(message);
			try {
			create(activityStream);
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			  logger.error(e.getMessage());
	   
		}
	}

	
	/**
	 * 
	 *Returns the latest activityStream
	 *@parameter id of type long
	 * 
	 */
	 @Override
	public ActivityStream getLatestStream(Long id)
			throws ValueNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}

	
	
	public Long getTotalCount(){
		return iActivityStreamDao.getTotalCount();
}	
	
	


}
