 package com.inn.headstartdemo.service.impl;

import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.hibernate.exception.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import com.inn.headstartdemo.dao.ICommentDao;
import com.inn.headstartdemo.dao.IUsersDao;
import com.inn.headstartdemo.model.Comment;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.ICommentService;
import com.inn.headstartdemo.service.generic.AbstractService;
import com.inn.headstartdemo.exceptions.application.ValidationFailedException;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * CommentService 
 *
 */
@Service
@Transactional
public class CommentServiceImpl extends AbstractService<Long, Comment> implements ICommentService {
	/** The logger. */
	private static Logger logger= LoggerFactory.getLogger(CommentServiceImpl.class);
	
	/** The comment dao */
	private ICommentDao entityDao;
	@Autowired
	public void setDao(ICommentDao dao) {
		super.setDao(dao);
		entityDao = dao;
	}
	
    /**
	 *Returns the List of  Comment 
	 *@parameter Comment comment
	 *@returns a list of Comment 
	 * 
	 */	
	@Override
	public List<Comment> search(Comment comment) throws BusinessException{
		logger.debug("Serching all Comment object's on service whose id :"+comment.getId());
		return super.search(comment);
	}
	
	/**
	 *Returns the Comment record of having unique primary key
	 *@parameter primaryKey of type Long 
	 *@returns a Comment  record
	 * 
	 */	
	@Override
	public Comment findById(Long primaryKey) throws BusinessException{
		logger.debug("Finding specific Comment object on service by primaryKey :"+primaryKey);
		try{
		return super.findById(primaryKey);
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
			throw new BusinessException(ex);
		}
	}

	/**
	 *Returns the list of Comment record
	 *@parameter Comment
	 *@returns a list of Comment  record
	 * 
	 */	
	@Override
	public List<Comment> findAll() throws BusinessException{
		logger.debug("Finding all Comment object on service ");
	

		try{
			return super.findAll();
		}
		catch(EmptyResultDataAccessException ex)
		{
			throw new BusinessException(ex);
		}catch(NoResultException ex)
		{
			throw new BusinessException(ex);
		}
	}

	/**
	 *Returns the new Comment record
	 *@parameter valid comment comment
	 *@returns a new Comment  record
	 * 
	 */	
	@Override
	public Comment create(@Valid Comment comment) throws BusinessException{
		logger.debug("Creating comment.");
		Users username =CustomerInfo.getUserInContext();
		comment.setUsers(username);
		Date dt = new Date();
		comment.setCreationtime(dt);
		comment.setModifiedtime(dt);
		logger.debug("Creating Comment object on service");
		try{
		return super.create(comment);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new BusinessException(ex);
    	}
	}

	/**
	 *Returns the updated Comment record
	 *@parameter valid comment entity
	 *@returns a updated Comment  record
	 * 
	 */	
	@Override
	public Comment update(@Valid Comment comment) throws BusinessException{
		logger.debug("Updating comment for id : "+comment.getId());
		Users username =CustomerInfo.getUserInContext();
		Date dt = new Date();
		comment.setModifiedtime(dt);
		comment.setUsers(username);
		logger.info("Updating Comment on service whose id is :"+comment.getId());
		
		try{
		return super.update(comment);
		}catch(DataIntegrityViolationException ex)
    	{
    		throw new ValidationFailedException(ex);
    		
    	}catch(ConstraintViolationException  ex){
    		
    		throw new BusinessException(ex);
    	}
	}

	/**
	 *Method to the remove Comment record
	 *@parameter comment entity
	 * 
	 */	
	@Override
	public void remove(Comment comment) throws BusinessException{
		logger.info("Removing Comment on service whose id is :"+comment.getId());
		super.remove(comment);
	}

	/**
	 *Method to remove Comment record of having unique primary key
	 *@parameter primaryKey of type Long
	 * 
	 */	
	@Override
	public void removeById(Long primaryKey) throws BusinessException{
		logger.info("Removing Annotation on service whose id is :"+primaryKey);
		super.removeById(primaryKey);
	}

	
	
}
