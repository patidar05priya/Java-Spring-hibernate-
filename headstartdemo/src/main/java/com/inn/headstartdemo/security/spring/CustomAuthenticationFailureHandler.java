package com.inn.headstartdemo.security.spring;

import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;



import com.inn.headstartdemo.security.mgmt.PasswordManagementService;
import com.inn.headstartdemo.utils.StringUtils;
import com.inn.headstartdemo.security.spring.PasswordExpiryConstants.PostAuthenticationAction;
import com.inn.headstartdemo.security.spring.context.ContextProvider;

/**
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
public class CustomAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler
{

	private Map<String, String> redirectUrlMap;
	/**
	 * @return returns the instance of PasswordManagementService configured in Spring application context.
	 */
	private PasswordManagementService getPasswordMgmtServiceBean()
	{
		return (PasswordManagementService)ContextProvider.getContext().
		getBean(PasswordExpiryConstants.PSWD_MGMT_SERVICE_BEAN_NAME);
	}
	@Override
	public void onAuthenticationFailure(HttpServletRequest request,
			HttpServletResponse response, AuthenticationException exception)
			throws IOException, ServletException 
	{
		logger.debug("Method called CustomAuthenticationFailureHandler");
		
		
		// do the normal authentication failure processing and get the url.
		// get the password management service bean from the Spring context.
		// process unsuccessful authentication.
		PasswordManagementService pwdMgmtService = getPasswordMgmtServiceBean();
		
		// user details
		Map<String, Object> customerInfo = new HashMap<String, Object>();
		customerInfo.put("username", request.getParameter("j_username"));
		customerInfo.put("domainname", request.getParameter("j_domain"));
		
		if(logger.isDebugEnabled()){
			logger.debug("onAuthenticationFailure() - customerInfo["+customerInfo+"]");
		}
		
		// password management service shall return additional parameters in the below map.
		Map<String, Object> returnMap = new HashMap<String, Object>();
		PostAuthenticationAction action = pwdMgmtService.processUnSuccessfulAuthentication(customerInfo, returnMap);
		
		String failureUrl = getRedirectUrl(action, returnMap);
		
		if(logger.isDebugEnabled()){
			logger.debug("onAuthenticationFailure() - returning failure url ["+failureUrl+"]");
		}
		
		setDefaultFailureUrl(failureUrl);
		
		super.onAuthenticationFailure(request, response, exception);
	}

	
	/**
	 * returns the redirect URL corresponding to given action and parameters in map as URL params.
	 * @param action
	 * @param returnMap
	 * @return
	 */
	private String getRedirectUrl(PostAuthenticationAction action, Map<String, Object> returnMap) 
	{
		if(getRedirectUrlMap() == null){
			logger.warn("no map configured for property authSuccessUrlMap in security context.");
			throw new RuntimeException("no map configured for property authSuccessUrlMap in security context.");
		}

		// get the configured URL for action
		String url = getRedirectUrlMap().get(action.toString());

		if(!StringUtils.hasValue(url)){
			return null;
		}

		StringBuilder urlBuffer = new StringBuilder(url);

		if(returnMap != null){
			Set<String> keys = returnMap.keySet();
			for(String key : keys){
				if(urlBuffer.toString().contains("?")){
					urlBuffer.append("&"+key+"="+returnMap.get(key));
				}
				else{
					urlBuffer.append("?"+key+"="+returnMap.get(key));
				}
			}
		}

		if(logger.isDebugEnabled()){
			logger.debug("getRedirectUrl returning url["+urlBuffer.toString()+"] for action["+action+"] " +
					"& returnMap["+returnMap+"]");
		}

		return urlBuffer.toString();
	}
	public Map<String, String> getRedirectUrlMap() {
		return redirectUrlMap;
	}
	
	public void setRedirectUrlMap(Map<String, String> redirectUrlMap) {
		this.redirectUrlMap = redirectUrlMap;
	}
}
