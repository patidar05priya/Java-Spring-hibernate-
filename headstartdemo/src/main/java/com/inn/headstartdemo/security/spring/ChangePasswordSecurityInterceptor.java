package com.inn.headstartdemo.security.spring;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.inn.headstartdemo.security.mgmt.PasswordExpiryDetailBean;
import com.inn.headstartdemo.security.mgmt.PasswordExpiryLoadStoreService;
import com.inn.headstartdemo.security.mgmt.PasswordFeatureBean;
import com.inn.headstartdemo.security.mgmt.PasswordManagementService;
import com.inn.headstartdemo.security.mgmt.PasswordValidationFailedException;
import com.inn.headstartdemo.security.spring.PasswordExpiryConstants.PersistDetailBeanCondition;

/**
 * A security filter which intercepts the authentication processing to update the new password to the 
 * database.
 * @author Auto Generated By HeadStart
 * @version 1.0
 */
public class ChangePasswordSecurityInterceptor implements Filter
{

    /**
     * represents the URL of page from where password shall be updated. 
     */
    private String passwordUpdateUrl;
    /**
     * represents the new password parameter which will be looked up in the request for new password value. 
     */
    private String newPasswordParam;
    /**
     * represents the URL of page where user control shall be redirected if password is not valid.
     */
    private String updateFailRedirectUrl;
    /**
     * represents the URL of page where user control shall be redirected after updating password.
     */
    private String postUpdateRedirectUrl;
    /* (non-Javadoc)
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy() {
    }

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
    throws IOException, ServletException 
    {
        HttpServletRequest httpRequest = (HttpServletRequest)request;
        HttpServletResponse httpResponse = (HttpServletResponse)response;

        PasswordManagementService pms = PasswordManagementService.getInstance();

        if(pms == null){
            logger.error("PasswordManagementService for further processing is not available.");
            throw new RuntimeException("PasswordManagementServiceBean available for processing.");
        }
        // process password management (Change Password) only if the request is from the configured
        // passwordUpdateUrl property.
        if(requiresPasswordMgmt(httpRequest, pms))
        {
            processPasswordChange(httpRequest, httpResponse, pms);
            return;
        }
        
        chain.doFilter(request, response);
    }
    /**
     * Helper method which does the password change operation. It takes help of Password Management Service to
     * complete this task. This method validates the password and redirect the control based on the validation result.
     * If the validation is successful password is updated and control is redirected to postUpdateRedirectUrl otherwise
     * error messages are shown on updateFailRedirectUrl.
     * 
     * @param httpRequest {@link HttpServletRequest} 
     * @param httpResponse {@link HttpServletResponse}
     * @param pms represent {@link PasswordManagementService} instance.
     * @throws IOException 
     * @throws ServletException
     */
    private void processPasswordChange(HttpServletRequest httpRequest, HttpServletResponse httpResponse, PasswordManagementService pms)
    throws IOException, ServletException
    {
        // get the new password from the request identified by newPasswordParam
        String newPassword = httpRequest.getParameter(getNewPasswordParam());
        
        if(logger.isInfoEnabled()){
            logger.info("processing password change new password["+newPassword+"]");
        }
        
        PasswordExpiryLoadStoreService loadStore = pms.getPasswordLoadStoreService();
        PasswordFeatureBean featureBean = loadStore.getPasswordFeatures();
        PasswordExpiryDetailBean detailBean = loadStore.getPasswordExpiryDetail();
        
        if(detailBean == null){
            detailBean = PasswordExpiryDetailBean.getNewDetailBean();
        }
        
        String redirectUrl;

        // update the detail bean with the new password, if new password is not valid
        // PasswordValidationFailedException will be thrown with appropriate error message
        // within. Redirect to the respective URL based on exception thrown.
        try
        {
            pms.updateDetailBean(detailBean, newPassword);
            loadStore.persist(detailBean, PersistDetailBeanCondition.AUTH_SUCCESS);
            redirectUrl = getPostUpdateRedirectUrl(pms, featureBean,detailBean);
        }
        catch(PasswordValidationFailedException pvfe)
        {
            redirectUrl = getUpdateFailRedirectUrl();
            StringBuilder msgs = new StringBuilder();
            for(String msg : pvfe.getErrorMessages()){
                msgs.append(msg);
            }
            redirectUrl+="?"+PasswordExpiryConstants.ERROR_MESSAGES+"="+msgs.toString();
        }
        if(logger.isInfoEnabled()){
            logger.info("Forwarding control to post update redirect url["+redirectUrl+"]");
        }
        
        httpResponse.sendRedirect(httpRequest.getContextPath() + redirectUrl);
    }
    
    /**
     * checks is if the request is from the password update page. It check whether request is from the configured
     * change password page and with screen information as update.
     * @param request
     * @param pms
     * @return
     */
    private boolean requiresPasswordMgmt(HttpServletRequest request, PasswordManagementService pms) 
    {
        String uri = request.getRequestURI();
       return uri.contains(getPasswordUpdateUrl());
    }
    public void init(FilterConfig arg0) throws ServletException 
    {
        // TODO Auto-generated method stub

    }
    public String getPasswordUpdateUrl() {
        return passwordUpdateUrl;
    }
    public void setPasswordUpdateUrl(String passwordUpdateUrl) {
        this.passwordUpdateUrl = passwordUpdateUrl;
    }
    
    public String getPostUpdateRedirectUrl() {
        return postUpdateRedirectUrl;
    }
    public void setPostUpdateRedirectUrl(String postUpdateRedirectUrl) {
        this.postUpdateRedirectUrl = postUpdateRedirectUrl;
    }
    public String getNewPasswordParam() {
        return newPasswordParam;
    }
    public void setNewPasswordParam(String newPasswordParam) {
        this.newPasswordParam = newPasswordParam;
    }
    public String getUpdateFailRedirectUrl() {
        return updateFailRedirectUrl;
    }
    public void setUpdateFailRedirectUrl(String updateFailRedirectUrl) {
        this.updateFailRedirectUrl = updateFailRedirectUrl;
    }
    private static Logger logger = Logger.getLogger(ChangePasswordSecurityInterceptor.class);
    public String getPostUpdateRedirectUrl(PasswordManagementService pms, PasswordFeatureBean featureBean, PasswordExpiryDetailBean detailBean) {
    	String configuredUpdateUrl = getPostUpdateRedirectUrl();
    	boolean isNotificationON = pms.getPasswordExpiryDataAnalyzer().isNotificationWindowOn(detailBean, featureBean);
    	if(isNotificationON){
    		int daysLeft = pms.getPasswordExpiryDataAnalyzer().daysLeftToExpire(detailBean, featureBean);
    		configuredUpdateUrl+="?expiry_days_left="+daysLeft;
    	}
        return configuredUpdateUrl;
    }
    
    
}
