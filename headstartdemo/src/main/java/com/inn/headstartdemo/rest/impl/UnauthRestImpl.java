package com.inn.headstartdemo.rest.impl;

/**
 * Created by innoeye.
 * User: Vipul 
 * Date: feb 20, 2012
 * Time: 4.21:44 PM
 *
 * 
 */

import static org.elasticsearch.node.NodeBuilder.nodeBuilder;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.exception.VelocityException;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.hibernate.proxy.HibernateProxy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.encoding.ShaPasswordEncoder;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.ui.velocity.VelocityEngineUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import com.inn.headstartdemo.security.authentication.DomainAuthenticationToken;
import com.inn.headstartdemo.utils.MobileAuthHelper;



import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.service.IUsersService;
import com.inn.headstartdemo.service.IEmailNotificationsService;
import com.inn.headstartdemo.service.mail.IMailSender;
import com.inn.headstartdemo.utils.ConfigUtil;
import com.inn.headstartdemo.exceptions.application.BusinessException;

import com.inn.headstartdemo.service.IUserConfigService;
import com.inn.headstartdemo.model.UserConfig;
import com.inn.headstartdemo.model.UserConfig.UserLanguage;
import com.inn.headstartdemo.model.UserConfig.CurrencyFormat;
import com.inn.headstartdemo.model.UserConfig.DateFormat;
import com.inn.headstartdemo.model.UserConfig.TimeZone;


import com.inn.headstartdemo.service.IElasticSearchService;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
import com.inn.autogen.ui.template.Constants;
import com.inn.toolUtils.XmlUtils;
 
 /**
 * 
 *UnauthRest
 *
 */


@Service("UnauthRestImpl")
@Path("/unauthorize")
@Produces("application/json")
public class UnauthRestImpl {

		
	@Autowired
	private IUsersService service;
	
	@Autowired
    private IMailSender mailsender;
	
	@Autowired
	@Qualifier("authenticationManager")
	AuthenticationManager authManager;
	@Autowired
	private IUserConfigService userConfigService;
	private Logger logger=LoggerFactory.getLogger(UnauthRestImpl.class);
	
	@Autowired
	private IEmailNotificationsService serviceEmail;
	
	@Autowired
    private VelocityEngine velocityEngine;
	 
	 
	   /**
        * method to send user activation mail for new user
        * @parameter activationCode of type String
        * @parameter userid of type Integer
        * @throws BusinessException
        * @returns temporaryredirectUrl
        */
	 @GET
     @Path("userActivation/{userid}/{code}")
     public Response userActivation(@PathParam("userid") Integer userid,@PathParam("code")String activationCode)throws BusinessException 
     {	
   	  Users user=service.findById(userid);
   	  user.getActivationkey().equals(activationCode);
   	  user.isEnabled();
   	  Boolean isRegBy=user.getRegisteredby();
   	String uriPath=null;
   	  if(isRegBy){
		   	  
		   	 	  if(user.getActivationkey().equals(activationCode) && !user.isEnabled() )
		   	  {
		   		  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+"/useractivation.jsp?id="+userid+"&activationCode="+activationCode;
		   		  URI uri = null;
		  		try {
		  			uri = new URI(uriPath);
		  		} catch (URISyntaxException e) {
		  			logger.error("URISyntaxException "+e.getCause());
		  			
		  		}
		         	return	 Response.temporaryRedirect(uri).build();
		         
		   	  }
		   	  else
		   	  {
		   		  service.unLock(user.getUsername());
		   		 uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+"/jsp/login.jsp";
		  		  URI uri = null;
		 		try {
		 			uri = new URI(uriPath);
		 		} catch (URISyntaxException e) {
		 			logger.error("URL Not found exception"+e.getCause());
		 			
		 		}
					return	 Response.temporaryRedirect(uri).build();
		
		   		  
		   	  }
		   	 	  
   	  }
   	  else{
   		  
   		  
   		 if(user.getActivationkey().equals(activationCode) && !user.isEnabled() )
	   	  {
	   		  user.setEnabled(true);
	   		  service.unLock(user.getUsername());
	   		  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+"/activationsuccess.html";
	   		  URI uri = null;
	  		try {
	  			uri = new URI(uriPath);
	  		} catch (URISyntaxException e) {
	  			logger.error("URISyntaxException "+e.getCause());
	  			
	  		}
	         	return	 Response.temporaryRedirect(uri).build();
	         
	   	  }
	   	  else
	   	  {
	   		 uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+"/jsp/login.jsp";
	  		  URI uri = null;
	 		try {
	 			uri = new URI(uriPath);
	 		} catch (URISyntaxException e) {
	 			logger.error("URISyntaxException "+e.getCause());
	 			
	 		}
				return	 Response.temporaryRedirect(uri).build();
	
	   		  
	   	  }
   		  
   		  
   		  
   	  }
       
	  	  
     }
	 
	/**
	 * 
	 *method to create new User entity
	 *@parameter users of type Users
	 *@throws BusinessException
	 *@returns newUsers
	 * 
	 */
	 @ExceptionHandler
		@POST
		@Path("create")
		public Users create(Users users)throws BusinessException  {
		 PasswordEncoder passwordenc=new ShaPasswordEncoder();		
			 String password = users.getPassword();
			 users.setPassword( passwordenc.encodePassword(password,null));
			 users.setActivationkey(this.generateActivationCode());
			 users.setRegisteredby(false);
			 Users newUsers=service.create(users);
			 UserConfig userConfig=new UserConfig();
			 userConfig.setUserLanguage(UserLanguage.en);
			 userConfig.setCurrencyFormat(CurrencyFormat.indian);
			 userConfig.setDateFormat(DateFormat.yyyymmdd_dash);
			 userConfig.setTimeZone(TimeZone.IST);
			 userConfig.setUserid(newUsers);
			 userConfigService.create(userConfig);
			 sendActivationEmail(newUsers);
			 return newUsers;	
		}
	 
	/**
	 * 
	 *method to send activation email to new user
	 *@parameter users of type Users
	 *@throws BusinessException
	 * 
	 */
	 @ExceptionHandler
	    public void sendActivationEmail(Users users)throws BusinessException 
		{
			   
				String activationURL=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL);
				String actObjClass = getObjectClassName(activationURL);
				String objClass = getObjectClassName(users);
			  
			  Map model = new HashMap();
			  model.put(objClass,users);
			  model.put(actObjClass,activationURL);
			  			  String path=ConfigUtil.ACTIVATION_TEMPALTE;
			  String text;
			try {
			    text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, path,"UTF-8", model);
				this.mailsender.sendMail("New user!!", text, users.getEmail(),"USER_MANAGEMENT");
			} catch (AddressException e) {
				logger.error("Address Not Found  "+e.getCause());
				
			} catch (MessagingException e) {
				
				logger.error("Message Sending Failed  Exception "+e.getCause());
				
			} catch (VelocityException e) {
			    // TODO Auto-generated catch block
			   logger.error(e.getMessage());
			}  	
			
			
		}
	  
	   /**
        * method to reset password for new user
        * @parameter activationCode of type String
        * @parameter userid of type Integer
        * @throws BusinessException
        * @returns temporaryredirectUrl
        */
	 @GET
     @Path("resetPassword/{userid}/{code}")
     public Response resetPassword(@PathParam("userid") Integer userid,@PathParam("code")String activationCode)throws BusinessException 
     {	
   	  Users user=service.findById(userid);
   	  user.getActivationkey().equals(activationCode);
   	  user.isEnabled();
   	  String uriPath=null;
   	 
   	  if(user.getActivationkey().equals(activationCode) && user.isEnabled() )
   	  {
   		  
   		  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+"/resetPassword.jsp?id="+userid+"&activationCode="+activationCode;
   		  URI uri = null;
  		try {
  			uri = new URI(uriPath);
  		} catch (URISyntaxException e) {
  			logger.error("URL Not found exception"+e.getCause());
  			
  		}
          return Response.temporaryRedirect(uri).build();
           
   	  }
   	  else
   	  {
   		  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+ConfigUtil.getConfigProp(ConfigUtil.APP_LOGIN_URL);
  		  URI uri = null;
 		try {
 			uri = new URI(uriPath);
 		} catch (URISyntaxException e) {
 			logger.error("URISyntax Exception "+e.getCause());
			
 			
 		}
    		return Response.temporaryRedirect(uri).build();
          
   		  
   	  }
   	 
       
	  	  
     }
	
	/**
	 * 
	 *method to change activation password of new user
	 *@path get path and change password 
	 *@parameter userid of type Integer
	 *@parameter password of type String
	 *@parameter activationCode of type String
	 *@throws BusinessException
	 *@returns update password and redirect
	 * 
	 */
	 @POST
     @Path("changePassword")
     public Response changePasswordActivation(@FormParam("userid")Integer userid,@FormParam("password")String password,@FormParam("activation")String activationCode)throws BusinessException 
     {
		  Users user=service.findById(userid);
	   	  user.getActivationkey().equals(activationCode);
	   	  user.isEnabled();
	   	  String uriPath=null;
	   	  PasswordEncoder passwordEncoder =new ShaPasswordEncoder();
		  
	   	  if(user.getActivationkey().equals(activationCode) && !user.isEnabled() )
	   	  {
	   		  user.setEnabled(true);
	   		  user.setPassword(passwordEncoder.encodePassword(password,null));
	   		  user.setActivationkey("");
	   		service.update(user);
	   		service.unLock(user.getUsername());
	   	  
	    uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+ConfigUtil.getConfigProp(ConfigUtil.APP_LOGIN_URL);
  		  URI uri = null;
  		  try {
  			  uri = new URI(uriPath);
  		  	} catch (URISyntaxException e) {
  		  	logger.error("URISyntax Exception "+e.getCause());
  		  	}
  		  
         return Response.temporaryRedirect(uri).build();
     
	   	  }
	   	  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+ConfigUtil.getConfigProp(ConfigUtil.APP_LOGIN_URL);
		  URI uri = null;
		  try {
			  uri = new URI(uriPath);
		  	} catch (URISyntaxException e) {
		  		logger.error("URISyntax Exception "+e.getCause());
				  	}
     		return	 Response.temporaryRedirect(uri).build();
		 
	   	  
		 
     	}
	 
	/**
	 * 
	 *method to reset passsword of user
	 *@path get path and reset password 
	 *@parameter userid of type Integer
	 *@parameter password of type String
	 *@parameter activationCode of type String
	 *@throws BusinessException
	 *@returns reset password and redirect
	 * 
	 */
	 @POST
     @Path("resetPasswordForm")
     public Response resetPasswordForm(@FormParam("userid")Integer userid,@FormParam("password")String password,@FormParam("activation")String activationCode)throws BusinessException 
     {
		 
		 Users user=service.findById(userid);
	   	  user.getActivationkey().equals(activationCode);
	   	  user.isEnabled();
		  PasswordEncoder passwordEncoder =new ShaPasswordEncoder();
		  
	   	  String uriPath=null;
	   	    	  if(user.getActivationkey().equals(activationCode) && user.isEnabled() )
	   	  {
	   		  user.setEnabled(true);
	   		  user.setPassword(passwordEncoder.encodePassword(password,null));
	   		  user.setActivationkey("");
	   		service.update(user);
	   		service.unLock(user.getUsername());
	   	  
	   	  uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+ConfigUtil.getConfigProp(ConfigUtil.APP_LOGIN_URL);
  		  URI uri = null;
  		  try {
  			  uri = new URI(uriPath);
  		  	} catch (URISyntaxException e) {
  		  	logger.error("URL Not found exception"+e.getCause());
 			
  		  	}
  		  
          return Response.temporaryRedirect(uri).build();
   
	   	  }
	   uriPath=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL)+ConfigUtil.getConfigProp(ConfigUtil.APP_LOGIN_URL);
		  URI uri = null;
		  try {
			  uri = new URI(uriPath);
		  	} catch (URISyntaxException e) {

				 logger.error("URISyntaxException"+e.getCause());
		  	}
       return Response.temporaryRedirect(uri).build();
		  	  
		 
     	}
	 
	/**
	 * 
	 *method to find passsword of user
	 *@path get path and send reset password mail to user email address
	 *@parameter username of type String
	 *@throws BusinessException
	 *@returns succecss message
	 * 
	 */
	 @PUT
	 @Path("forgetPassword")
	 public String forgetPassword(@QueryParam("username")String username )throws BusinessException  {
			
		 Users users = null;
						try {
				users = service.findByUsername(username);
			} catch (ValueNotFoundException e) {
				logger.error("ValueNotFoundException"+e.toString());	
				return "Username Doesnt exist";
			}
					if(users!=null)
		{	
		     try{
			  users.setActivationkey(generateActivationCode());
			  service.update(users);
			  //service.unLock(users.getUsername());
			  String objClass = getObjectClassName(users);
			
			  String activationURL=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL);
			  String actObjClass = getObjectClassName(activationURL);
			  String path=ConfigUtil.FORGET_PASSWORD_TEMPALTE;
			  Map model = new HashMap();
			  model.put(objClass,users);
			  model.put(actObjClass,activationURL);
			  try {
			  String text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, path,"UTF-8", model);
			
			 
				this.mailsender.sendMail("Reset Password", text, users.getEmail(),"USER_MANAGEMENT");
				serviceEmail.createNotification(users.getEmail(),"application",users,"Reset Password");
				
			} catch (AddressException e) {
				logger.error("Address  Exception "+e.getCause());
			} catch (MessagingException e) {
				logger.error("Message  Sending Failed "+e.getCause());
			} catch (VelocityException e) {
			    // TODO Auto-generated catch block
			    logger.error(e.getMessage());
			}
			   
			return "Reset Password Email has been Sent ";
			}
			catch(NullPointerException e)
			{		logger.debug("Username Not Found");
			logger.error(""+e.getMessage());
				return "Invalid Credentials";
			}
			}		
			return "Invalid Credentials";
			}
	
	 private String generateActivationCode(){
	    	return RandomStringUtils.random(10, 0, 20, true,true, "1qaz2xsw3dce4rft5vbg6nhy7ujm8kl9i0o".toCharArray());
			
	    }
	 private String getObjectClassName(Object object){
		 /* 
		  *  The type casting below is necessary in order to read if object that is passed into this method is really a Hibernate proxy object  
		  *  that wraps any entity object (due to Hibernate's lazy loading). 
		  */  
		 String objectClassName = "";
		 if (object instanceof HibernateProxy) {  
			   objectClassName = ((HibernateProxy)object).getHibernateLazyInitializer().getPersistentClass().getSimpleName();  
		 }  else{
			 objectClassName  = object.getClass().getSimpleName();
		 }
		 return objectClassName ;
	}
	
	 
	 
	   /**
        * method to check authentication from mobile app
        * @parameter password of type String
        * @parameter userid of type Integer
        * @throws AuthenticationException
        * @returns username
        */
	 @POST
	 @Path("mobileAppAuth")
	 public HashMap<String, String> setAuthentication(@FormParam("userid") String username,@FormParam("password") String password ) throws AuthenticationException
	 {
	 	 		 HashMap<String, String> token = new HashMap<String, String>();
	 try{

	 SecurityContextHolder.getContext().getAuthentication();
	  	 final Authentication auth=new DomainAuthenticationToken(username,new ShaPasswordEncoder().encodePassword(password, null));
 	  	 
 	 authManager.authenticate(auth);
 			 	
 	 SecurityContext sc=  SecurityContextHolder.getContextHolderStrategy().getContext();
 	 sc.setAuthentication(auth);
 	 ServletRequestAttributes attr=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();
 	 if(attr!=null)
	 	 	{  	 
	 		 attr.getRequest().getSession(true).setAttribute("SPRING_SECURITY_CONTEXT", sc);
		    }
			 token.put("AUTH-TOKEN", MobileAuthHelper.createJsonWebToken(username, 1L));
		
			 	}catch(Exception updateExp)
  		{
   		
   		  logger.error(updateExp.getMessage());
		 }
    	return token;
	 }	
	
	
	   /**
        * method to search username
        * @parameter username of type String
        * @returns boolean value
        */
     @GET
	 @Path("usernameSearch")
	 public Boolean usernameSearch(@QueryParam("username")String username)
	 {
		  Users users = null;
			try {
				users = service.findByUsername(username);
				
				return users != null;
				
			     }
			 catch(ValueNotFoundException e) 
			 {
				 	logger.error(""+e.getMessage());
				 logger.error("No Entity Found For Username");
				 return false;
			 }
       }
        
            /**
        * method to search email
        * @parameter email of type String
        * @throws BusinessException 
        * @returns boolean value
        */
     @GET
	 @Path("emailSearch")
	 public Boolean emailSearch(@QueryParam("email")String email)throws BusinessException 
	 {
		  Users users = null;
			
				users = service.findByEmail(email);
				
				return users != null;
			
       }
     	
	
    @Autowired
    IElasticSearchService elasticService;
    
    @GET
    @Path("indexOldData")
    public String  indexOldData() throws BusinessException,SQLException
    {
	DriverManagerDataSource dataSource = new DriverManagerDataSource();
	    dataSource.setDriverClassName("com.mysql.jdbc.Driver");
	    dataSource.setUrl("jdbc:mysql://localhost:3306/headstartdemo");
	    dataSource.setUsername("root");
	    dataSource.setPassword("root");
	    Connection con=null;
	    ResultSet rs=null;
	    Document schemaDocument = null;
		FileWriter sqlWriter = null;
		Statement stmt = null;
		try {  con = dataSource.getConnection();
			// The file is appended.
			schemaDocument = XmlUtils.readDocument(System.getProperty("catalina.base")+"/webapps/headstartdemo/WEB-INF/classes/schema.xml");
			// Get the list of node TABLE from the schema file
			List<Node> tableList = XmlUtils.getChildNodes(schemaDocument,
					"schemas/schema/table");
			logger.debug("Calling for");
			for (Node table : tableList) {
					String schemaTableName = XmlUtils.getAttributeValue(table,
							Constants.ATTR_NAME);
						logger.debug("match found for table : "
								+ schemaTableName);
						List<Node> columnList=XmlUtils.getChildNodes(table, "column");
						List<Node> primaryKeyList=XmlUtils.getChildNodes(table, "pk");
						
						for (Node node:columnList){
						    String columnName=XmlUtils.getAttributeValue(node,Constants.ATTR_NAME);
						    if((columnName.contains("name")||columnName.contains("Name") )&& !columnName.contains("comment") ){
							
							String primaryKey = XmlUtils.getAttributeValue(primaryKeyList.get(0),"column");
							stmt = con.createStatement();
							rs = stmt.executeQuery("select "+primaryKey+","+columnName+" from "+schemaTableName+" ");
							while (rs.next()) {
							  try{
							      	String tableName=toCamelCase(schemaTableName);
							      	elasticService.createIndex(rs.getInt(primaryKey)+"", rs.getString(columnName), tableName);
								}
								catch(Exception ex)
								{
								    logger.error("Exception arise while creating index for old data"
										+ ex.getMessage());
							   	}
							  }
						    }
						}
				
				}
		} catch (Exception e) {
			logger.error("Exception arise while creating the sql file for modification"
							+ e.getMessage());
			
		} 
			finally{
			stmt.close();
			rs.close();
			con.close();
		}
	return "success";	
	    
	}
public static String toCamelCase(String s) {
		String[] parts = s.split("_");
		String camelCaseString = "";
		for (String part : parts) {
			camelCaseString = camelCaseString + toProperCase(part);
		}
		return camelCaseString;
	}
	static String toProperCase(String s) {
	    return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
	}
}
