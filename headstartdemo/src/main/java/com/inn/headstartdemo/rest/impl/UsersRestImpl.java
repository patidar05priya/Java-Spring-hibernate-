package com.inn.headstartdemo.rest.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;

import org.apache.commons.httpclient.HttpException;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.cxf.jaxrs.ext.multipart.Multipart;
import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.exception.VelocityException;
import org.hibernate.proxy.HibernateProxy;
import org.json.JSONException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.ui.velocity.VelocityEngineUtils;

import com.inn.exha.exception.UserException;
import com.inn.headstartdemo.audit.AuditActionName;
import com.inn.headstartdemo.audit.AuditActionType;
import com.inn.headstartdemo.audit.Auditable;
import com.inn.headstartdemo.dao.ISocialCredentialsDao;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.model.Address;
import com.inn.headstartdemo.model.Roles;
import com.inn.headstartdemo.model.UserConfig;
import com.inn.headstartdemo.model.UserConfig.CurrencyFormat;
import com.inn.headstartdemo.model.UserConfig.DateFormat;
import com.inn.headstartdemo.model.UserConfig.TimeZone;
import com.inn.headstartdemo.model.UserConfig.UserLanguage;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.security.mgmt.PasswordExpiryDetailBean;
import com.inn.headstartdemo.security.mgmt.PasswordExpiryLoadStoreService;
import com.inn.headstartdemo.security.mgmt.PasswordManagementService;
import com.inn.headstartdemo.security.mgmt.PasswordValidationFailedException;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.security.spring.PasswordExpiryConstants.PersistDetailBeanCondition;
import com.inn.headstartdemo.service.IActivityStreamService;
import com.inn.headstartdemo.service.IAddressService;
import com.inn.headstartdemo.service.IEmailNotificationsService;
import com.inn.headstartdemo.service.IRolesService;
import com.inn.headstartdemo.service.ISocialCredentialsService;
import com.inn.headstartdemo.service.IUserConfigService;
import com.inn.headstartdemo.service.IUsersService;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.service.mail.IMailSender;
import com.inn.headstartdemo.utils.ConfigUtil;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 *Users Rest
 *
 */
  
@ExceptionHandler
@Path("/Users")
@Produces("application/json")
@Consumes("application/json")
@Service("UsersRestImpl")

public class UsersRestImpl extends AbstractCXFRestService<Integer, Users> {
	private Logger logger=LoggerFactory.getLogger(UsersRestImpl.class);
	public UsersRestImpl() {
		super(Users.class);
	}
	 /** IUsersService Bean injection */
	@Autowired
	private IUsersService service;
	
	 /** IActivityStreamService Bean injection */
	@Autowired
	IActivityStreamService activityservice;

 /** IEmailNotificationsService Bean injection */
	@Autowired
	private IEmailNotificationsService serviceEmail;
	
	/** IRolesService Bean injection */
	@Autowired
	private IRolesService serviceRoles;
	
		/** ISocialCredentialsService Bean injection */
	@Autowired
	private ISocialCredentialsService socialCredentials;
	
	/** ISocialCredentialsDao Bean injection */
	@Autowired
		private ISocialCredentialsDao socialCredentialsDao;
			/** SearchContext Bean injection */
	@Context
	private SearchContext context;

/** IUserConfigService Bean injection */
	@Autowired
	private IUserConfigService userConfigService;
	
	/** IAddressService Bean injection */
    @Autowired
	private IAddressService addressService;
    
    /** IMailSender Bean injection */
	@Autowired
    private IMailSender mailsender;
	
	/** VelocityEngine Bean injection */
	@Autowired
    private VelocityEngine velocityEngine;
	public List<Users> findAll() throws BusinessException{
		return service.findAll();
	}
	private PasswordEncoder passwordEncoder;
	@ExceptionHandler
	@Autowired
	public void setPasswordEncoder(PasswordEncoder passwordEncoder) {
	        this.passwordEncoder = passwordEncoder;
	}

	/**
	 * 
	 *method to find users by id
	 *@parameter id of type integer
	 *@throws BusinessException
	 *@returns User
	 * 
	 */
	@ExceptionHandler
	public Users findById(@QueryParam("") Integer id)throws BusinessException{
		logger.info("Finding users by id :"+id);
		return service.findById(id);
	}

	/**
	 * 
	 *method to find List of users by entity
	 *@parameter entity
	 *@throws BusinessException
	 *@returns User entity
	 * 
	 */	
	@ExceptionHandler
	@GET
	public List<Users> search(@QueryParam("") Users entity)throws BusinessException{
		logger.info("Searching users entity :"+entity);
		return service.search(entity);
	}
	

	/**
	 * 
	 *method to search List of users by entity
	 *@path get path and produce list of users
	 *@parameter llimit ulimit of type integer
	 *@throws BusinessException
	 *@returns List of users
	 * 
	 */
	@ExceptionHandler	
	@GET
	@Path("search")
	@Produces("application/json")
	public List<Users> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit)throws BusinessException{
		transform(context);
		return service.searchWithLimit(context,upperLimit,lowerLimit);
		
	}
	@GET
	@Path("/isUserAvailable")
	public Boolean isUserAvailable()
	{
		
		return true;
		
	}
	
	
	/**
	 * 
	 *method to create new User entity
	 *@parameter users of type Users
	 *@throws BusinessException
	 *@returns new entity
	 * 
	 */
	@ExceptionHandler
	@Override
	@POST
	@Path("create")
		@Auditable(actionType=AuditActionType.CREATE,actionName=AuditActionName.USERS_CREATE)	
		public Users create(Users users) throws BusinessException{
		try{
			Users newEntity=service.findByUsername(users.getUsername().toString().trim());
			Users userEmail=service.findByEmail(users.getEmail().toString().trim());
			if(newEntity==null && userEmail==null)
			{		
							     String password = users.getPassword();
			    //updatePasswordHistory(password);
			     users.setRegisteredby(true);
			     users.setEnabled(false);
			   	 users.setPassword(passwordEncoder.encodePassword(password,null));
				 users.setActivationkey(this.generateActivationCode());
				 newEntity=service.create(users);
				 UserConfig userConfig=new UserConfig();
				 userConfig.setUserLanguage(UserLanguage.en);
				 userConfig.setCurrencyFormat(CurrencyFormat.indian);
				 userConfig.setDateFormat(DateFormat.yyyymmdd_dash);
				 userConfig.setTimeZone(TimeZone.IST);
				 userConfig.setUserid(newEntity);
				 userConfigService.create(userConfig);
				 sendActivationEmail(newEntity);
				 Users username =CustomerInfo.getUserInContext();
				 activityservice.createActivity(username.getFirstname()+" Created a User "+newEntity.getFirstname(), newEntity.getUserid().toString(), "Users");
			    	
				 return newEntity;	
			 }else{
				throw new BusinessException("User Name and Email can not duplicate");
			 }
			
		}catch(ValueNotFoundException ve){
			throw new BusinessException("Error While Creating user");
		}catch(Exception e){
			throw new BusinessException(e.getMessage());
		}
	}
			
		@POST
	@Path("registeredgoogleuser")
	@Consumes("application/json")
	public void gmailRegistration(@QueryParam("gmailaccessToken") String gaccesstoken ) throws HttpException,BusinessException, IOException, JSONException  {
		Users users=service.gmailRegistration(gaccesstoken );
		service.setUserAuthentication(users);
		  }		
		  

	
		@POST
	@Path("registerFacebookUser")
	@Consumes("application/json")	
		public void createUserUsingFacebook(@QueryParam("UserID") String UserId,@QueryParam("faceaccessToken") String facebookToken ) throws IOException, JSONException, URISyntaxException,ValueNotFoundException,BusinessException {
		
	
       		Users users=service.createUsersFromFacebook(UserId,facebookToken);
      		service.setUserAuthentication(users);
       	}


	


	
	
	

	
	
	 @GET
	 @Path("emailSearchForUpdate")
	 public Boolean emailSearchForUpdate(@QueryParam("email")String email)
	 {Users contextUser = CustomerInfo.getUserInContext();
		  Users users = null;
		 
		 	
		  users = service.findByEmail(email);
				
		
				if(users != null){
				if(contextUser.getUserid()==users.getUserid())
				{	return false;
				}
				return true;
				}
				else{
				return false;
				}
			
       }
        @GET
	 @Path("emailSearchForuserUpdate")
	 public Boolean emailSearchForuserUpdate(@QueryParam("email") String email,@QueryParam("id") Integer id)
	 {
		  Users users = null;
		 
		  Users oldusers = null;
			 
		  users = service.findByEmail(email);
		  try {
			oldusers = service.findById(id);
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			   logger.error(e.getMessage());
		}
				
			
				if(users != null && oldusers!=null){
				if(oldusers.getUserid()==users.getUserid())
				{	return false;
				}
				return true;
				}
				else{
				return false;
				}
			
       }

	/**
	 * 
	 *method to update user by entity
	 *@parameter users of type Users
	 *@returns update user
	 *@throws BusinessException	
	 * 
	 */
	@ExceptionHandler
	@Override
	@PUT
	@Path("update")
		@Auditable(actionType=AuditActionType.UPDATE,actionName=AuditActionName.USERS_UPDATE)	
		public Users update(Users users) throws BusinessException{
		logger.debug("Updating user by an entity :"+users);
		 Users username =CustomerInfo.getUserInContext();
		 activityservice.createActivity(username.getFirstname()+" Updated a User "+users.getFirstname(), users.getUserid().toString(), "Users");
	    	
		return service.update(users);
	}

	/**
	 * 
	 *method to remove  user
	 *@parameter users of type Users
	 *@throws BusinessException
	 *@returns boolean result
	 * 
	 */
	@ExceptionHandler
	@Override
	@Path("delete")
		@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.USERS_DELETE)	
		public boolean remove(Users users) throws BusinessException{
	logger.debug("Removing user record by an entity :"+users);
		service.remove(users);
		 Users username =CustomerInfo.getUserInContext();
		 activityservice.createActivity(username.getFirstname()+" Deleted a User "+users.getFirstname(), users.getUserid().toString(), "Users");
	   
		return true;
	}

	/**
	 * 
	 *method to remove  user by primarykey
	 *@path get path and delete users
	 *@parameter primaryKey of type integer
	 *@throws BusinessException	
	 *@returns remove  user
	 * 
	 */
	@ExceptionHandler
    @DELETE
	@Override
	@Path("/{id}")
		@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.USERS_DELETE)	
		public void removeById(@PathParam("id") Integer primaryKey) throws BusinessException{
		logger.debug("Removing user by primaryKey :"+primaryKey);
		service.removeById(primaryKey);
		 Users username =CustomerInfo.getUserInContext();
		 activityservice.createActivity(username.getFirstname()+" Deleted a User "+service.findById(primaryKey).getFirstname(), service.findById(primaryKey).getUserid().toString(), "Users");
	   
	}
	
	@ExceptionHandler
	@Override	
	public IGenericService<Integer, Users> getService() {
	
	return service;
	}

	@ExceptionHandler
	@GET
	@Path("/userincontext")
	public Users getUserInContext() throws ValueNotFoundException , BusinessException{
		String username = CustomerInfo.getCustomerInfo().get("username");
		Users user = new Users();
		user.setUsername(username);
		List<Users> users = service.search(user);
		if(users==null || users.isEmpty() ){
				throw new ValueNotFoundException("user in context not corect");
		}
		return users.get(0);
	}
	
	
	/**
	 * 
	 *method to change password of user
	 *@path get path and change password 
	 *@parameter oldPass newPass of type String
	 *@returns update password
	 *@throws ValueNotFoundException
	 * 
	 */
	@ExceptionHandler
	@PUT
	@Path("/changepassword/{oldPass}/{newPass}")
	public Users changePassword(@PathParam("oldPass")String oldPass, @PathParam("newPass")String newPass) throws ValueNotFoundException,BusinessException{
		Users user =CustomerInfo.getUserInContext();
		
		if(!user.getPassword().equals(passwordEncoder.encodePassword(oldPass,null))){
			throw new ValueNotFoundException("password not matched");
		}
		 user.setPassword(passwordEncoder.encodePassword(newPass,null));
		return update(user); 
	}
	
	
	/**
	 * 
	 *method to change password of user
	 *@path get path and change password 
	 *@parameter oldPass newPass of type String
	 *@returns update password
	 *@throws ValueNotFoundException
	 * 
	 */
	@ExceptionHandler
	@PUT
	@Path("/changeuserpassword/{oldPass}/{newPass}")
	public Users changeuserPassword(@PathParam("oldPass")String oldPass, @PathParam("newPass")String newPass) throws ValueNotFoundException,BusinessException{
		Users user =CustomerInfo.getUserInContext();
	
		String oldencode = passwordEncoder.encodePassword(oldPass,null);
		if(!user.getPassword().equals(oldencode) ){
			throw new UserException("password not matched");
		}
		
		 updatePasswordHistory(newPass);
		 user.setPassword(passwordEncoder.encodePassword(newPass,null));
		return update(user); 
	}
	
	@ExceptionHandler
	@Override
	public SearchContext getSearchContext() {
		return context;
	}
	
	
       /**
        * method to enable user
        * @parameter userid of type Integer
        * @returns Users
		*@throws BusinessException
        */
	   @ExceptionHandler
	   @PUT
       @Path("enableuser/{userid}")
       @Produces("application/json")
       @Consumes("application/json")
       public Users enableUser(@PathParam("userid")Integer userid)throws BusinessException{
              Users user = service.findById(userid);
              user.setEnabled(true);
              service.update(user);
              Users username =CustomerInfo.getUserInContext();
     		 activityservice.createActivity(username.getFirstname()+" Enabled a User "+user.getFirstname(), user.getUserid().toString(), "Users");
     	   
              return user;
       }
       @ExceptionHandler
       @PUT
       @Path("disableuser/{userid}")
       @Produces("application/json")
       @Consumes("application/json")
       /**
        * method to disable user
        * @parameter userid of type Integer
        * @returns Users
        */
       public Users disableUser(@PathParam("userid")Integer userid)throws BusinessException{
              Users user = service.findById(userid);
              user.setEnabled(false);
              service.update(user);
              Users username =CustomerInfo.getUserInContext();
      		 activityservice.createActivity(username.getFirstname()+" Disabled a User "+user.getFirstname(), user.getUserid().toString(), "Users");
      	   
              return user;
       }
       /**
        * method to reset password of user
        * @parameter password of type String
        * @parameter userid of type Integer
        * @returns Users
        */
       @ExceptionHandler
       @PUT
       @Path("resetpassword/{password}/{userid}")
       @Produces("application/json")
       @Consumes("application/json")
       public Users changePassword(@PathParam("password")String password,@PathParam("userid")Integer userid)throws BusinessException {
        
              logger.debug("Changing password by userid :"+userid);
              Users user = service.findById(userid);
			user.setPassword(passwordEncoder.encodePassword(password,null));
			  //updatePasswordHistory(password);
              return service.update(user);
       }
       
       /**
	 * Update password history.
	 * 
	 * @param newPassword
	 *            the new password
	 */
	public void updatePasswordHistory(String newPassword) {
		logger.info("Inside  @class" + this.getClass().getName()
				+ " @Method : updatePasswordHistory @param: newPassword="
				+ newPassword);
		PasswordManagementService pms = PasswordManagementService.getInstance();
		PasswordExpiryLoadStoreService loadStore = pms
				.getPasswordLoadStoreService();
		PasswordExpiryDetailBean detailBean = loadStore
				.getPasswordExpiryDetail();
		if (detailBean == null) {
			detailBean = PasswordExpiryDetailBean.getNewDetailBean();
		}


		try {
			detailBean = pms.updateDetailBean(detailBean, newPassword);
			loadStore.persist(detailBean,
					PersistDetailBeanCondition.PASS_CHANGE);
		} catch (PasswordValidationFailedException pvfe) {
			logger.error("Error occurred  @class"
					+ this.getClass().getName()
					+ " @Method : updatePasswordHistory : PasswordValidationFailedException ");
			StringBuilder msgs = new StringBuilder();
			for (String msg : pvfe.getErrorMessages()) {
				msgs.append(msg);
			}
			throw new UserException(
					"Password Must not be among last 6 password");
		} catch (Exception e) {
			logger.error("Error occurred  @class" + this.getClass().getName()
					+ " @Method : updatePasswordHistory ", e);

		}

	}
      
       @ExceptionHandler
       @PUT
       @Path("changepassword")
       @Produces("application/json")
       @Consumes("application/json")
       /**
        *
        * @parameter passwords
        * @returns Users
        * @throws ValueNotFoundException
        */
       public Users changePassword(Map<String,String> passwords) throws ValueNotFoundException,BusinessException{
              Users user = CustomerInfo.getUserInContext();
              String oldPassword=passwords.get("old");
              String newPassword=passwords.get("new");
              if(user.getPassword().equals(oldPassword)){
                    
					 user.setPassword(passwordEncoder.encodePassword(newPassword,null));
	
                     return service.update(user);
              }
              throw new ValueNotFoundException("Old password did not match");
       }
      
       @ExceptionHandler
       @GET
       @Path("rolesbyid/{userid}")
       @Produces("application/json")
       @Consumes("application/json")
       /**
        *
        * @parameter userid of type Integer
        * @returns set of Users
        * @throws ValueNotFoundException
        */
       public Set<Roles> getByUserName(@PathParam("userid") Integer userid) throws BusinessException{
              logger.debug("Set roles by userid :"+userid);
              Users user = service.findById(userid);
              return user.getRoles();
       }
      
       @ExceptionHandler
       @PUT
       @Path("updateRoles/{userid}")
       @Consumes("application/json")
       /**
        * 
        * method to update roles
        * @parameter userid of type Integer
        * @parameter roles of type Set
        * @returns Users
        */
       public Users updateRoles(@PathParam("userid")Integer userid,Set<Roles> roles)throws BusinessException{
              logger.debug("Updating roles by userid :"+userid);
              Users persistedUser  = service.findById(userid);
              persistedUser .setRoles(roles);
              service.update(persistedUser);
              return persistedUser;
       }
      
       /**
        *
        * method to update user
        * @parameter users of type Users
        * @returns Users
        */
       @ExceptionHandler
       @PUT
       @Path("updateUser") 
       @Consumes("application/json")
       	@Auditable(actionType=AuditActionType.UPDATE,actionName=AuditActionName.USERS_UPDATE)	
	
         public Users updateUser(Users users) throws BusinessException{
              Users persistedUser  = service.findById(users.getUserid());
              persistedUser.setFirstname(users.getFirstname());
              persistedUser.setLastname(users.getLastname());
              persistedUser.setTelephone(users.getTelephone());
                           persistedUser.setEnabled(users.isEnabled());

              persistedUser.setEmail(users.getEmail());
                           persistedUser= service.update(persistedUser);
             if(users.getUserAddress()!=null)
              {  addressService.update(users.getUserAddress());
              }
             Users username =CustomerInfo.getUserInContext();
     		 activityservice.createActivity(username.getFirstname()+" Updated a User "+users.getFirstname(), users.getUserid().toString(), "Users");
     	   
               return persistedUser;
       }
     
       /**
       *
       * method to update user profile
       * @parameter users of type Users
       * @returns Users
       */
      @ExceptionHandler
      @PUT
      @Path("updateUserProfileAddress") 
      @Consumes("application/json")
      
      public Address updateUserProfileAddress(Address address) throws BusinessException{
            
    	   
    	    Users username =CustomerInfo.getUserInContext();
    	   Address newaddress= addressService.update(address);
    	    if(username.getUserAddress()==null)
    	    {
    	    	username.setUserAddress(newaddress);
    	    	service.update(username);
    	    }
    	    
             return  newaddress;
      }

       
       
       /**
        *
        * method to update user profile
        * @parameter users of type Users
        * @returns Users
        */
       @ExceptionHandler
       @PUT
       @Path("updateUserProfile") 
       @Consumes("application/json")
       
       public Users updateUserProfile(Users users) throws BusinessException{
              Users persistedUser  = service.findById(users.getUserid());
              persistedUser.setFirstname(users.getFirstname());
              persistedUser.setLastname(users.getLastname());
        
              persistedUser.setTelephone(users.getTelephone());
              
              persistedUser.setEnabled(users.isEnabled());
       
         
              persistedUser.setEmail(users.getEmail());
              service.update(persistedUser);
                 Users username =CustomerInfo.getUserInContext();
      		 activityservice.createActivity(persistedUser.getFirstname()+" Updated a User Profile ", persistedUser.getUserid().toString(), "Users");
   
              return persistedUser;
       }
       
       @ExceptionHandler
       @PUT
       @Path("unlock/{username}")
       public Boolean unLock(@PathParam("username") String username)
       {
       	return service.unLock(username);
       }
       
       	@ExceptionHandler
	@GET
	@Path("auditSearch")
	@Produces("application/json")
	public  String auditSearch(@QueryParam("id") Integer pk)throws BusinessException{
		return service.findAudit(pk).toString();
	}
			@ExceptionHandler
	    public void sendActivationEmail(Users users)
		{
			    logger.debug("Sending activation mail by  an entity :"+users);
				String activationURL=ConfigUtil.getConfigProp(ConfigUtil.APP_DEPLOY_URL);
				String actObjClass = getObjectClassName(activationURL);
				String objClass = getObjectClassName(users);
			  
			  Map model = new HashMap();
			  model.put(objClass,users);
			  model.put(actObjClass,activationURL);
			  			  String path=ConfigUtil.ACTIVATION_TEMPALTE;
			   String text="";
				try {
					text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, path,"UTF-8", model);
				} catch (VelocityException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			  //String text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, path,"UTF-8", model);
			   serviceEmail.createNotification(users.getEmail(),"application",users,"New user!!");
			   try {
				this.mailsender.sendMail("New user!!", text, users.getEmail(),"USER_MANAGEMENT");
			} catch (AddressException e) {
				logger.error("Sending activation mail by  an entity :"+users+e.getMessage());
				
			} catch (MessagingException e) {
				
			   logger.error(e.getMessage());
			}  	
			
			
		}
	    
	
		 private String generateActivationCode(){
	    	return RandomStringUtils.random(10, 0, 20, true,true, "1qaz2xsw3dce4rft5vbg6nhy7ujm8kl9i0o".toCharArray());
			}
	    private String getObjectClassName(Object object){
	    	 /* 
	    	  *  The type casting below is necessary in order to read if object that is passed into this method is really a Hibernate proxy object  
	    	  *  that wraps any users object (due to Hibernate's lazy loading). 
	    	  */  
	    	String objectClassName = "";
	    	 if (object instanceof HibernateProxy) {  
				   objectClassName = ((HibernateProxy)object).getHibernateLazyInitializer().getPersistentClass().getSimpleName();  
	    	 }  else{
	    		 objectClassName  = object.getClass().getSimpleName();
	    	 }
	    	 return objectClassName ;
	    }
		
			@GET
	    @Path("getUserImage")
	    @Produces("image/jpeg")
	    @Multipart(value = "root", type = "application/octet-stream")
	    public byte[] getUserImage() throws ValueNotFoundException ,BusinessException{
	     Users user=service.findById(CustomerInfo.getUserInContext().getUserid());
			     byte[] image=null;
					try{
			   image=user.getImageFile();
			     @SuppressWarnings("unused")
			     int length=image.length;
					}catch(NullPointerException e)
					{
					logger.error("No values found returning null"+e.toString());					
						}
			     return image;
	    	} 
			@GET
		    @Path("getUserImageById/{id}")
		    @Produces("image/jpeg")
		    public  byte[] getUserImageById(@PathParam("id") Integer id) throws ValueNotFoundException,BusinessException {
		     Users user=service.findById(id);
		     byte[] image = null;	
		     try{
		    image=user.getImageFile();
		     @SuppressWarnings("unused")
		     int length=image.length;
		     }catch(NullPointerException e)
		     {
		    	logger.error("No values found returning null"+e.toString()); 
		     }
	    
	      return image;
		
	    }
		
		@POST
   @Path("setUserImage")
   @Consumes("multipart/form-data")
   @Produces("text/html")
   @Multipart(value = "root", type = "application/octet-stream")
	public String postMyImage(InputStream in) throws ValueNotFoundException,  IOException,BusinessException {	
	byte[] image = null;
       try{
           ByteArrayOutputStream buffer = new ByteArrayOutputStream();
           int nRead;
           byte[] data = new byte[16384];

           while ((nRead = in.read(data, 0, data.length)) != -1) {
             buffer.write(data, 0, nRead);
           }

           buffer.flush();
           image = buffer.toByteArray();

       } catch(IOException e){
             logger.error("No values found returning null"+e.toString());
           return "<SCRIPT LANGUAGE=\"JavaScript\">parent.imageUploaded(false);</SCRIPT>";
       }

       Users user=service.findById(CustomerInfo.getUserInContext().getUserid());
       user.setImageFile(image);
       Users username =CustomerInfo.getUserInContext();
		 activityservice.createActivity(user.getFirstname()+" Updated his User Image", user.getUserid().toString(), "Users");
	    
       update(user);


return "<SCRIPT LANGUAGE=\"JavaScript\">parent.imageUploaded(true);</SCRIPT>";
}

}
