package com.inn.headstartdemo.rest.impl;

import java.util.HashSet;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import  com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.model.Roles;
import com.inn.headstartdemo.model.Permissions;
import  com.inn.headstartdemo.service.IPermissionsService;
import com.inn.headstartdemo.service.IRolesService;
import com.inn.headstartdemo.utils.QueryObject;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.IActivityStreamService;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.utils.AdvanceSearchResult;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.audit.Auditable;
import com.inn.headstartdemo.audit.AuditActionName;
import com.inn.headstartdemo.audit.AuditActionType;

import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.exceptions.ExceptionHandler;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 *Rest Of Role
 *
 */
@ExceptionHandler
@Path("/Roles")
@Produces("application/json")
@Consumes("application/json")
@Service("RolesRestImpl")

public class RolesRestImpl extends AbstractCXFRestService<Long, Roles> {
private Logger logger=LoggerFactory.getLogger(RolesRestImpl.class);
	public RolesRestImpl() {
		super(Roles.class);
	}
	@Autowired
	private IRolesService service;
	@Autowired
	private IPermissionsService permissionService;
	
	@Context
	private SearchContext context;
	@Autowired
	IActivityStreamService activityservice;
		
	/**
	 * 
	 *method to Finding list of roles for user 
	 *@returns roles
	 *
	 */
	 @ExceptionHandler
	public List<Roles> findAll()throws BusinessException{
		return service.findAll();
	}
	
	/**
	 * 
	 *method to find roles by id 
	 *@parameter id of type Long
	 *@returns roles
	 *
	 */
	 @ExceptionHandler
	public Roles findById(@QueryParam("") Long id)throws BusinessException{
	logger.info("Finding roles by id :"+id);
		return service.findById(id);
	}
	
	/**
	 * 
	 *method to find list of roles by entity 
	 *@parameter roles of type Roles
	 *@returns roles
	 *
	 */
	 @ExceptionHandler
	@GET
	public List<Roles> search(@QueryParam("") Roles roles)throws BusinessException{
	logger.info("Searching roles by roles :"+roles);
		return service.search(roles);
	}
	
	/**
	 * 
	 *method to search list of roles 
	 *get path and search roles of users 
	 *@parameter llimit ulimit of type Integer
	 *@returns roles
	 *
	 */
	 @ExceptionHandler
	@GET
	@Path("search")
	@Produces("application/json")
	public List<Roles> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit)throws BusinessException{
		return service.searchWithLimit(context,upperLimit,lowerLimit);
		
		
	}


	/**
	 * 
	 *method to create roles 
	 *@parameter roles of type Roles
	 *@returns create roles
	 *
	 */
	 @ExceptionHandler
	@Override
	@POST
	@Path("create")
		@Auditable(actionType=AuditActionType.CREATE,actionName=AuditActionName.ROLES_CREATE)	
		public Roles create(Roles roles) throws BusinessException{
	logger.info("Creating roles by roles :"+roles);
	
	HashSet<Permissions> set = new HashSet<Permissions>();
	set.addAll(roles.getPermissions());
	set.add(permissionService.findById(300L));
	roles.setPermissions(set);
	Users username =CustomerInfo.getUserInContext();
	Roles createrole=service.create(roles);
	activityservice.createActivity(username.getFirstname()+" Created a Role "+createrole.getRolename(), createrole.getRoleid().toString(), "Roles");
	
	
	return createrole;
	}

	/**
	 * 
	 *method to update roles 
	 *@parameter roles of type Roles
	 *@returns update role
	 *
	 */
	@ExceptionHandler
	@Override
	@PUT
	@Path("update")
		@Auditable(actionType=AuditActionType.UPDATE,actionName=AuditActionName.ROLES_UPDATE)	
		public Roles update(Roles roles) throws BusinessException{
	logger.info("Updating roles by roles :"+roles);
	
Users username =CustomerInfo.getUserInContext();
	
	activityservice.createActivity(username.getFirstname()+" Updated a Role "+roles.getRolename(), roles.getRoleid().toString(), "Roles");
	return service.update(roles);
	}

	/**
	 * 
	 *method to remove roles 
	 *@parameter roles of type Roles
	 *@returns remove role
	 *
	 */
	@ExceptionHandler
	@Override
	@Path("delete")
		@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.ROLES_DELETE)	
		public boolean remove(Roles roles) throws BusinessException{
	logger.info("Removing roles by roles :"+roles);
		service.remove(roles);
		Users username =CustomerInfo.getUserInContext();
		
		activityservice.createActivity(username.getFirstname()+" Deleted a Role "+roles.getRolename(), roles.getRoleid().toString(), "Roles");
		
		return true;
	}

	/**
	 * 
	 *method to remove roles by id 
	 *get path and remove roles of user by id
	 *@parameter primaryKey of type Long
	 *
	 */
	@ExceptionHandler
    @DELETE
	@Override
	@Path("/{id}")
		@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.ROLES_DELETE)	
		public void removeById(@PathParam("id") Long primaryKey) throws BusinessException{
	logger.info("Removing roles by primaryKey :"+primaryKey);
	Users username =CustomerInfo.getUserInContext();
	
	activityservice.createActivity(username.getFirstname()+" Deleted a Role "+service.findById(primaryKey).getRolename(), service.findById(primaryKey).getRoleid().toString(), "Roles");

	service.removeById(primaryKey);
	}

	@ExceptionHandler
	@Override
	public IGenericService<Long, Roles> getService() {
		return service;
	}

    @ExceptionHandler
	@Override
	public SearchContext getSearchContext() {
		return context;
	}
	
	/**
	 * 
	 *method to remove roles by userId 
	 *get path and get roles of user by userId
	 *@parameter userId of type Integer
	 *@returns roles
	 *
	 */
	@ExceptionHandler
	@GET
	@Path("getRolesByUserId/{userId}")
	public List<Roles> getRolesByUserId(@PathParam("userId")Integer userId) {
	logger.info("Getting roles by userId :"+userId);
		return service.getRolesByUserId(userId);
	}
	
	@ExceptionHandler @GET
	@Path("totalCount")
	@Produces("application/json")
      public Long getTotalCount(){
				return service.getTotalCount();
	}
	
	
	@ExceptionHandler
	@GET
	@Path("getRolesByRolename")
	@Produces("application/json")
	public List<Roles> getRolesByRolename(@QueryParam("rolename") String rolename)throws BusinessException{
		return service.getRolesByRolename(rolename);
	}
	
}
