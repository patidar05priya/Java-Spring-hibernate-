package com.inn.headstartdemo.rest.impl;

import java.util.List;
import java.util.Date;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.utils.QueryObject;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.utils.AdvanceSearchResult;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.service.IFileUploadsService;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import com.inn.headstartdemo.model.FileUploads;
import com.inn.headstartdemo.model.Users;
import java.lang.Integer;
import javax.validation.Valid;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * FileUploadsRest
 *
 */
@Path("/FileUploads")
@Produces("application/json")
@Consumes("application/json")
@Service("FileUploadsRestImpl")

public class FileUploadsRestImpl extends AbstractCXFRestService<Integer, FileUploads> {

	/**
	 * Instantiates a new fileUploads rest impl.
	 */
	public FileUploadsRestImpl() {
		super(FileUploads.class);
	}
	
	/** The fileUploads service*/
	@Autowired
	private IFileUploadsService service;
	
	/** The search context*/
	@Context
	private SearchContext context;
	
	/**
	 * 
	 *Returns the list of all FileUploads
	 *@returns a list of FileUploads
	 * 
	 */
	public List<FileUploads> findAll() throws BusinessException{
		return service.findAll();
	}
	
	/**
	 * 
	 *Returns the FileUploads entity finding by id
	 *@parameter id of type Integer
	 *@returns a FileUploads record 
	 * 
	 */	
	public FileUploads findById(@QueryParam("") Integer id)throws BusinessException{
		return service.findById(id);
	}
	
	/**
	 * 
	 *Returns the FileUploads record seraching by entity
	 *@parameter fileUploads of type FileUploads
	 *@returns a list of FileUploads record
	 * 
	 */	
	@GET
	public List<FileUploads> search(@QueryParam("") FileUploads fileUploads)throws BusinessException{
		return service.search(fileUploads);
	}
	
	/**
	 * 
	 *Returns the list of FileUploads by using lowerlimit and upper limit
	 *@path get path and produce FileUploads list
	 *@parameter llimit ulimit of type integer in query param
	 *@returns a list of FileUploads record
	 * 
	 */	
	@GET
	@Path("search")
	@Produces("application/json")
	public List<FileUploads> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit)throws BusinessException{
		QueryObject queryObject = transform(context);
		if(lowerLimit != null && upperLimit != null){
			queryObject.setPaginationLowerLimit(lowerLimit);
			queryObject.setPaginationUpperLimit(upperLimit);
		}
		AdvanceSearchResult<FileUploads> advanceResults = advanceSearch(queryObject);
		return advanceResults.getResults();
		
	}

    /**
	 * 
	 *Returns the new FileUploads record
	 *@parameter valid FileUploads entity
	 *@returns a new FileUploads record
	 * 
	 */	
	@Override
	@POST
		public FileUploads create(@Valid FileUploads fileUploads)throws BusinessException {
		CustomerInfo.getUserInContext();
		return service.create(fileUploads);
	}

	/**
	 * 
	 *Returns the updated FileUploads record
	 *@parameter valid FileUploads entity
	 *@returns a updated FileUploads record
	 * 
	 */	
	@Override
	@PUT
		public FileUploads update(@Valid FileUploads fileUploads)throws BusinessException {
		CustomerInfo.getUserInContext();
		return service.update(fileUploads);
	}

	/**
	 * 
	 *Returns the removed FileUploads record
	 *@parameter entity of type FileUploads
	 *@returns a boolean result
	 * 
	 */	
	@Override
		public boolean remove(FileUploads fileUploads) throws BusinessException{
		service.remove(fileUploads);
		return true;
	}
	
	/**
	 * 
	 *Returns the removed FileUploads record by primary key
	 *@parameter primary key of type Integer  
	 * 
	 */
    @DELETE
	@Override
	@Path("/{id}")
		public void removeById(@PathParam("id") Integer primaryKey)throws BusinessException {
		service.removeById(primaryKey);
	}

	@Override
	public IGenericService<Integer, FileUploads> getService() {
		return service;
	}

	@Override
	public SearchContext getSearchContext() {
		return context;
	}
}
