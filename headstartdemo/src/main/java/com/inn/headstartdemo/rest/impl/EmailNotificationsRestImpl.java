package com.inn.headstartdemo.rest.impl;

import java.util.List;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.service.IEmailNotificationsService;
import com.inn.headstartdemo.utils.AdvanceSearchResult;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;

import com.inn.headstartdemo.model.EmailNotifications;
import com.inn.headstartdemo.model.Users;
import java.lang.Integer;

import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.application.BusinessException;


import javax.validation.Valid;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * EmailNotificationRest 
 *
 */
 
@ExceptionHandler 
@Path("/EmailNotifications")
@Produces("application/json")
@Consumes("application/json")
@Service("EmailNotificationsRestImpl")

public class EmailNotificationsRestImpl extends AbstractCXFRestService<Long, EmailNotifications> {
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(EmailNotificationsRestImpl.class);
	
	/**
	 * Instantiates a new email notifications rest impl.
	 */
	public EmailNotificationsRestImpl() {
		super(EmailNotifications.class);
	}
	
	/** The email notifications service*/
	@Autowired
	private IEmailNotificationsService service;
	
	/** The search context */
	@Context
	private SearchContext context;
	
	/**
	 * 
	 *Returns the list of EmailNotifications
	 *@returns a listof EmailNotifications
	 * 
	 */
	@ExceptionHandler
    public List<EmailNotifications> findAll()throws BusinessException{
	
	return service.findAll();
	
	}

	/**
	 * 
	 *Returns the EmailNotifications finding by id
	 *@parameter primaryKey of type Long
	 *@returns EmailNotification 
	 * 
	 */
	@ExceptionHandler 
	public EmailNotifications findById(@QueryParam("") Long id)throws BusinessException{
		
		logger.info("Find record by id :"+id);
		return service.findById(id);
		
		 	}
	
	/**
	 * 
	 *Returns the list of EmailNotifications by using lowerlimit and upper limit
	 *@path get path and produce EmailNotifications list using fiql search
	 *@parameter llimit ulimit of type integer in query param
	 *@returns a list of EmailNotifications record
	 * 
	 */	
	@GET
	@Path("FIQLsearch")
	@Produces("application/json")
	public List<EmailNotifications> searchWithLimitAndOrderBy(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit,@QueryParam("orderBy") String orderBy,@QueryParam("orderType") String orderType)throws BusinessException{
		logger.info("Searching activitystream entity for llimit:"+lowerLimit+"& ulimit "+upperLimit);
		return service.searchWithLimitAndOrderBy(context,upperLimit,lowerLimit,orderBy,orderType);
	}	
	
	
	/**
	 * 
	 *Returns the list of EmailNotifications by using entity
	 *@parameter emailNotifications of type EmailNotifications
	 *@returns a list of EmailNotifications record
	 * 
	 */		
	@ExceptionHandler
    @GET
	public List<EmailNotifications> search(@QueryParam("") EmailNotifications emailNotifications)throws BusinessException{
		return service.search(emailNotifications);
	}
	
		
	/**
	 * 
	 *Returns the list of EmailNotifications by using lowerlimit and upper limit
	 *@path get path and produce EmailNotifications list
	 *@parameter llimit ulimit of type integer in query param  to search list
	 *@returns a list of EmailNotifications record
	 * 
	 */			
	@ExceptionHandler 
	@GET
	@Path("search")
	@Produces("application/json")
	public List<EmailNotifications> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit)throws BusinessException{
	
		return service.searchWithLimitAndOrderBy(context,upperLimit,lowerLimit,"modifiedtime","desc");
		
	}

	/**
	 * 
	 *Returns the new valid EmailNotification
	 *@parameter valid emailNotifications of type EmailNotifications
	 *@returns a new emailNotifications of EmailNotifications
	 * 
	 */
	@ExceptionHandler 
	@Override
	@POST
	@Path("create")
		public EmailNotifications create(@Valid EmailNotifications emailNotifications)throws BusinessException {
		logger.info("Create record by emailNotifications :"+emailNotifications);	
		return service.create(emailNotifications);
	}
 
    /**
	 * 
	 *Returns the updated valid EmailNotifications
	 *@parameter valid entity of type EmailNotifications
	 *@returns a updated EmailNotification entity
	 * 
	 */
	@ExceptionHandler 
	@Override
	@PUT
	@Path("update")
		public EmailNotifications update(@Valid EmailNotifications emailNotifications)throws BusinessException {
		logger.info("Updating record by emailNotifications :"+emailNotifications);
		return service.update(emailNotifications);
	}

    /**
	 * 
	 *Returns the removed valid EmailNotifications entity
	 *@parameter entity of type EmailNotifications
	 *@returns bolean value true if entity removed succesfully
	 */
	@ExceptionHandler 
	@Override
	@Path("delete")
		public boolean remove(EmailNotifications emailNotifications)throws BusinessException {
	
	    logger.info("Removing record by emailNotifications :"+emailNotifications);
		service.remove(emailNotifications);
		return true;
	}

	/**
	 * 
	 *Returns the removed valid EmailNotifications by using primaryKey
	 *@parameter primaryKey of type Long
	 * 
	 */
    @ExceptionHandler 
    @DELETE
	@Override
	@Path("delete/{id}")
		public void removeById(@PathParam("id") Long primaryKey)throws BusinessException {
	
	    logger.info("Remove record by primary key :"+primaryKey);
		service.removeById(primaryKey);
		
	}

	@ExceptionHandler 
	@Override
	public IGenericService<Long, EmailNotifications> getService() {
		return service;
	}

	@ExceptionHandler 
	@Override
	public SearchContext getSearchContext() {
		return context;
	}
	
	@GET
	@Path("totalCount")
	@Produces("application/json")
      public Long getTotalCount(){
				return service.getTotalCount();
	}
	}
