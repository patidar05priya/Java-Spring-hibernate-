
package  com.inn.headstartdemo.rest.impl;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import  com.inn.headstartdemo.exceptions.ValueNotFoundException;

import  com.inn.headstartdemo.dao.IUsersDao;
import  com.inn.headstartdemo.model.ActivityStream;

import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.service.IActivityStreamService;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 /**
 * 
 *ActivityStream Rest
 *
 */
@Path("/ActivityStream")
@Produces("application/json")
@Consumes("application/json")
@Service("ActivityStreamRestImpl")

public class ActivityStreamRestImpl extends AbstractCXFRestService<Long, ActivityStream> {

	/** The logger. */
	private static Logger logger= LoggerFactory.getLogger(ActivityStreamRestImpl.class);
	
	/**
	 * Instantiates a new activityStream rest impl.
	 */
	public ActivityStreamRestImpl() {
		super(ActivityStream.class);
	}
	
	/** The activityStream Service */
	@Autowired
	private IActivityStreamService service;
	
	/** The user dao */
	@Autowired
	private IUsersDao userDao;
	
	/** The Search Context */
	@Context
	private SearchContext context;

    /** Retrun all list of activity stream */
	public List<ActivityStream> findAll()throws BusinessException{
		return service.findAll();
	}
	/**
	 * 
	 *Returns the activitystream find by id
	 *@parameter id of type Long 
	 *@returns a activitystream
	 * 
	 */
	public ActivityStream findById(@QueryParam("") Long id)throws BusinessException{
		logger.info("Finding activitystream by id :"+id);
		return service.findById(id);
	}
	/**
	 * 
	 *Returns the List of activitystream find by entity
	 *@parameter activityStream of type ActivityStream
	 *@return a list of activitystream activityStream
	 * 
	 */	
	
	@GET
	public List<ActivityStream> search(@QueryParam("") ActivityStream activityStream)throws BusinessException{
		logger.info("Searching activitystream activityStream :"+activityStream);
		return service.search(activityStream);
	}
	/**
	 * 
	 *Returns the List of activitystream find by activityStream
	 *@path get path and produce list of activitystream using fiql search
	 *@parameter llimit ulimit of type integer in query param
	 *@returns a list of activitystream
	 * 
	 */
	@GET
	@Path("search")
	@Produces("application/json")
	public List<ActivityStream> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit,@QueryParam("orderBy") String orderBy,@QueryParam("orderType") String orderType)throws BusinessException{
		logger.info("Searching activitystream activityStream for llimit:"+lowerLimit+"& ulimit "+upperLimit);
		return service.searchWithLimitAndOrderBy(context,upperLimit,lowerLimit,orderBy,orderType);
	}	
	/**
	 * 
	 *Returns the List of activitystream find by activityStream
	 *@path get path and produce list of activitystream using fiql search
	 *@parameter llimit ulimit of type integer in query param
	 *@returns a list of activitystream
	 * 
	 */
	@GET
	@Path("FIQLsearch")
	@Produces("application/json")
	public List<ActivityStream> searchWithLimitAndOrderBy(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit,@QueryParam("orderBy") String orderBy,@QueryParam("orderType") String orderType)throws BusinessException{
		logger.info("Searching activitystream activityStream for llimit:"+lowerLimit+"& ulimit "+upperLimit);
		return service.searchWithLimitAndOrderBy(context,upperLimit,lowerLimit,orderBy,orderType);
	}	
	/**
	 * 
	 *Returns the activitystream search by id
	 *@path get path and produce activityStream of activitystream
	 *@parameter id  of type Long
	 *@returns a activitystream activityStream
	 * 
	 */
	@GET
	@Path("getLatestStream")
	@Produces("application/json")
	public ActivityStream searchStream(@QueryParam("id") Long id) throws BusinessException{
		ActivityStream activityStream=new ActivityStream();
		try
		{logger.debug("Proceed activitystream entity for id = :"+id);
		activityStream= service.getLatestStream(id);
		}
		catch(ValueNotFoundException ex)
		{logger.error("Proceed activitystream entity for id = :"+id);
		logger.error(ex.getMessage());
		}
		return activityStream;
	}
	/**
	 * 
	 *Returns the new activitystream entity
	 *@parameter activityStream of type activitystream
	 *@returns a new entity of activitystream
	 * 
	 */
	@Override
	@POST
	public ActivityStream create(ActivityStream activityStream) throws BusinessException{
		logger.info("Creating activitystream entity:"+activityStream);
		return service.create(activityStream);
	}

	/**
	 * 
	 *Returns the updated activitystream by entity
	 *@parameter activityStream of type activitystream
	 *@returns a updated activitystream entity
	 * 
	 */
	@Override
	@PUT
	public ActivityStream update(ActivityStream activityStream) throws BusinessException{
		logger.info("Updating activitystream entity:"+activityStream);
		return service.update(activityStream);
	}
	/**
	 * 
	 *Returns the removed activitystream
	 *@parameter activityStream of type activitystream
	 *@returns a boolean result
	 * 
	 */
	@Override
	public boolean remove(ActivityStream activityStream) throws BusinessException{
		logger.info("Removing activitystream entity:"+activityStream);
		service.remove(activityStream);
		return true;
	}

   /**
	 * 
	 *Returns the removed activitystream by using primary key
	 *@parameter primaryKey of type Long
	 * 
	 */
    @DELETE
	@Override
	@Path("/{id}")
	public void removeById(@PathParam("id") Long primaryKey) throws BusinessException{
    	service.removeById(primaryKey);
	}
	
	 @GET
	@Path("totalCount")
	@Produces("application/json")
      public Long getTotalCount(){
				return service.getTotalCount();
	}
	
	/**
	 * 
	 *method to remove  activitystream by primarykey
	 *@path get path and delete activitystream
	 *@param primaryKey of type integer
	 *@return remove  activitystream
	 * 
	 */
	@Override
	public IGenericService<Long, ActivityStream> getService() {
		return service;
	}
	
  
	
	@Override
	public SearchContext getSearchContext() {
		return context;
	}
	


}
