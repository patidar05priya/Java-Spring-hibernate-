 package com.inn.headstartdemo.rest.impl;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.exceptions.application.BusinessException;

import com.inn.headstartdemo.model.Comment;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.service.ICommentService;
import com.inn.headstartdemo.service.generic.IGenericService;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * CommentRest 
 *
 */
@Path("/Comment")
@Produces("application/json")
@Consumes("application/json")
@Service("CommentRestImpl")

public class CommentRestImpl extends AbstractCXFRestService<Long, Comment> {
	
	/** The logger. */
	private static Logger logger= LoggerFactory.getLogger(CommentRestImpl.class); 
	
	/**
	 * Instantiates a new commnent rest impl.
	 */
	public CommentRestImpl() {
		super(Comment.class);
	}
	
	/** The comment service*/
	@Autowired
	private ICommentService service;
	
	/** The search context */
	@Context
	private SearchContext context;

    /**
	 *Returns the List of  Comment
	 *@parameter Comment 
	 *@returns a list of Comment 
	 * 
	 */	
	public List<Comment> findAll() throws BusinessException {
		logger.debug("Finding all comments.");
		return service.findAll();
	}
	
	/**
	 *  
	 *Returns the Comment record by searching using id 
	 *@parameter id of type Long
	 *@returns  a Comment record 
	 * 
	 */	
	public Comment findById(@QueryParam("") Long id)throws BusinessException{
		logger.debug("Finding comment for id : "+id);
		return service.findById(id);
	}
	
	/**
	 *  
	 *Returns the list of Comment record
	 *@parameter Comment entity
	 *@returns  a Comment record 
	 * 
	 */	
	@GET
	public List<Comment> search(@QueryParam("") Comment comment)throws BusinessException{
		logger.debug("Searching comments by comment.");
		return service.search(comment);
	}
	
	/**
	 * 
	 *Returns the Comment record
	 *@path get path and produce Comment record
	 *@parameter llimit ulimit of type integer
	 *@return a Comment record
	 * 
	 */	
	@GET
	@Path("search")
	@Produces("application/json")
	public List<Comment> search() throws BusinessException{
		logger.debug("Searching comments by limit from ");
		return service.searchWithLimitAndOrderBy(context,1000,0,"modifiedtime","desc");
		
	}


	/**
	 *  
	 *Returns the new Comment record
	 *@parameter valid Comment comment
	 *@returns  a new Comment record 
	 * 
	 */	
	@Override
	@POST
	public Comment create(@Valid Comment comment) throws BusinessException{
		
		return service.create(comment);
	}
	
	/**
	 * 
	 *Returns the new Comment record
	 *@parameter Comment entity
	 *@returns a new Comment record
	 * 
	 */	
	@POST
	@Path("createComment")
	public Comment createComment(Comment comment)throws BusinessException{
	
		return service.create(comment);
	}
	
	/**
	 * 
	 *Returns the updated Comment record
	 *@parameter valid Comment entity
	 *@returns a updated Comment record
	 * 
	 */	
	@Override
	@PUT
		public Comment update(@Valid Comment comment) throws BusinessException{
	
		return service.update(comment);
	}

	/**
	 * 
	 *Returns the removed Comment record
	 *@parameter Comment entity
	 *@returns a removed Comment record
	 * 
	 */	
	@Override
		public boolean remove(Comment comment) throws BusinessException{
		logger.debug("Removing comment.");
		service.remove(comment);
		return true;
	}

	/**
	 * 
	 *Method to remove Comment record by using primary key
	 *@path get path for unique comment
	 *@parameter primaryKey of type Long
	 * 
	 */	
    @DELETE
	@Override
	@Path("/{id}")
		public void removeById(@PathParam("id") Long primaryKey)throws BusinessException {
    	logger.debug("Removing comment for id : "+primaryKey);    	
		service.removeById(primaryKey);
	}

	@Override
	public IGenericService<Long, Comment> getService() {
		logger.debug("Getting comment service.");
		return service;
	}

	@Override
	public SearchContext getSearchContext() {
		logger.debug("Getting search context.");
		return context;
	}
	
}
