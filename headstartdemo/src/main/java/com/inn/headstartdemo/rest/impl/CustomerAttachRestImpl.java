package com.inn.headstartdemo.rest.impl;

import java.util.List;
import java.util.Date;
import java.io.InputStream;
import org.apache.cxf.jaxrs.ext.multipart.Multipart;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.utils.QueryObject;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.utils.AdvanceSearchResult;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.service.ICustomerAttachService;

import com.inn.headstartdemo.model.CustomerAttach;
import com.inn.headstartdemo.model.Users;
import java.lang.Long;

import com.inn.headstartdemo.exceptions.application.BusinessException;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * EntityAttach Rest 
 *
 */
@Path("/CustomerAttach")
@Produces("application/json")
@Consumes("application/json")
@Service("CustomerAttachRestImpl")

public class CustomerAttachRestImpl extends AbstractCXFRestService<Integer, CustomerAttach> {
	
	/**
	 * Instantiates a new CustomerAttach impl.
	 */
	public CustomerAttachRestImpl() {
		super(CustomerAttach.class);
	}
	
	/* The ICustomerAttachService */
	@Autowired
	private ICustomerAttachService service;
	
	/* The search context */
	@Context
	private SearchContext context;

    /**
	 * 
	 *Returns the list of all CustomerAttach
	 *@throws BusinessException
	 *@returns a list of CustomerAttach
	 * 
	 */
	public List<CustomerAttach> findAll()throws BusinessException{
		return service.findAll();
	}
	
	/**
	 * 
	 *Returns the list of CustomerAttach by id
	 *@parameter id of type Integer to find CustomerAttach
	 *@throws BusinessException
	 *@returns CustomerAttach
	 * 
	 */
	public CustomerAttach findById(@QueryParam("") Integer id)throws BusinessException{
		return service.findById(id);
	}
	
	/**
	 * 
	 *Returns the CustomerAttach record finding by entity 
	 *@parameter entity of type CustomerAttach in query param 
	 *@throws BusinessException
	 *@returns a list of CustomerAttach record
	 * 
	 */
	@GET
	public List<CustomerAttach> search(@QueryParam("") CustomerAttach customer)throws BusinessException{
		return service.search(customer);
	}
	
	
	/**
	 * 
	 *Returns the list of CustomerAttach by using lower limit and upper limit
	 *@path get path and produce Customer list
	 *@parameter llimit ulimit of type integer in query 
	 *@throws BusinessException
	 *@return a list of Customer$ 
	 * 
	 */
	@GET
	@Path("search")
	@Produces("application/json")
	public List<CustomerAttach> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit)throws BusinessException{
		return service.searchWithLimit(context, upperLimit, lowerLimit);
		
	}

	/**
	 * 
	 *Returns the new CustomerAttach record
	 *@path get path and produce CustomerAttach record
	 *@parameter valid CustomerAttach entity
	 *@throws BusinessException
	 *@returns a new CustomerAttach record
	 * 
	 */
	@Override
	@POST
	public CustomerAttach create(CustomerAttach customer)throws BusinessException {
		return service.create(customer);
	}

	/**
	 * 
	 *Returns the updated CustomerAttach record
	 *@path get path and produces updated CustomerAttach record
	 *@parameter valid CustomerAttach entity
	 *@throws BusinessException
	 *@returns a updated CustomerAttach record
	 * 
	 */

	@Override
	@PUT
	public CustomerAttach update(CustomerAttach customer)throws BusinessException {
		return service.update(customer);
	}

	/**
	 * 
	 *Returns the boolean value
	 *@parameter valid CustomerAttach entity
	 *@throws BusinessException
	 *@returns remove CustomerAttach record
	 * 
	 */
	@Override
	public boolean remove(CustomerAttach customer)throws BusinessException {
		service.remove(customer);
		return true;
	}


    /**
	 * 
	 *method to remove CustomerAttach record by primary key
	 *@path get path and remove the  CustomerAttach record
	 *@parameter primaryKey of type Integer
	 *@throws BusinessException
	 * 
	 */
    @DELETE
	@Override
	@Path("/{id}")
	public void removeById(@PathParam("id") Integer primaryKey)throws BusinessException {
		service.removeById(primaryKey);
	}

	@Override
	public IGenericService<Integer, CustomerAttach> getService() {
		return service;
	}

	@Override
	public SearchContext getSearchContext() {
		return context;
	}
	
	/**
	 * 
	 *Returns the file uploaded record 
	 *@parameter requirementId of type Integer in pathparam
	 *@parameter fileName of type String in queryparam
	 *@parameter in of type InputStream
	 *@returns remove CustomerAttach record
	 * 
	 */
	 @POST
	 @Path("addattachment/{requirementId}")
	 @Consumes("multipart/form-data")
	 @Produces("text/html") 
	 public String addAttachments(@PathParam("requirementId")Integer requirementId,@Multipart(value = "filedata")InputStream in , @QueryParam(value = "filename")String fileName)  {
		 service.add(requirementId,fileName,in);
	 return "{\"data\":\"File uploaded successfully\"}";
	 }
}
