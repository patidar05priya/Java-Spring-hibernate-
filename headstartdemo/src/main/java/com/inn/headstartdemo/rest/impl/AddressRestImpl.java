package com.inn.headstartdemo.rest.impl;

import java.util.List;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;

import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.generic.IGenericService;
import com.inn.headstartdemo.rest.generic.AbstractCXFRestService;
import com.inn.headstartdemo.service.IAddressService;
import com.inn.headstartdemo.model.Address;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.exceptions.application.BusinessException;
import java.lang.Integer;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.service.IActivityStreamService;
import com.inn.headstartdemo.audit.Auditable;
import com.inn.headstartdemo.audit.AuditActionName;
import com.inn.headstartdemo.audit.AuditActionType;
import javax.validation.Valid;
/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */
/**
 * 
 * Rest 
 *
 */ 
@ExceptionHandler @Path("/Address")
@Produces("application/json")
@Consumes("application/json")
@Service("AddressRestImpl")

public class AddressRestImpl extends AbstractCXFRestService<Integer, Address> {
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(AddressRestImpl.class);
	
	/**
	 * Instantiates a new address rest impl.
	 */
	public AddressRestImpl() {
		super(Address.class);
	}
	
	/** The address service */
	@Autowired
	private IAddressService AddressService;
	
	/** The search context */
	@Context
	private SearchContext context;
	
	/** The activity service */
	@Autowired
	IActivityStreamService activityservice;
		
	/**
	 * 
	 *Returns the list of all Address
	 *@returns a list of Address
	 * 
	 */
	 @ExceptionHandler 
	 public List<Address> findAll()throws BusinessException{
	
			return AddressService.findAll();
	
	}

	/**
	 * 
	 *Returns the Address finding by id
	 *@parameter id of type Integer
	 *@returns a Address record 
	 * 
	 */	
	 @ExceptionHandler 
	 public Address findById(@QueryParam("") Integer id)throws BusinessException{
				logger.info("Find record by id :"+id);
				return AddressService.findById(id);
		
	}
	
	
	/**
	 * 
	 *Returns the record by searching Address name
	 *@parameter address of typeAddress 
	 *@returns a list of Address record
	 * 
	 */	
	@ExceptionHandler 
	@GET
	public List<Address> search(@QueryParam("") Address address) throws BusinessException{
		return AddressService.search(address);
	}
	
		
	/**
	 * 
	 *Returns the list of Address by using lowerlimit and upper limit
	 *@path get path and produce Address list
	 *@parameter llimit ulimit of type integer in query param
	 *@returns a list of Address record
	 * 
	 */		
	@ExceptionHandler 
	@GET
	@Path("search")
	@Produces("application/json")
	public List<Address> search(@QueryParam("llimit") Integer lowerLimit, @QueryParam("ulimit") Integer upperLimit,@QueryParam("orderBy") String orderBy,@QueryParam("orderType") String orderType)throws BusinessException{
	
		return AddressService.searchWithLimitAndOrderBy(context,upperLimit,lowerLimit,orderBy,orderType);
		
	}


	
	/**
	 * 
	 *Returns the new Address record
	 *@path get path and produce Address record
	 *@parameter valid Address address
	 *@returns a new Address record
	 * 
	 */	
	@ExceptionHandler 
	@Override
	@POST
	@Path("create")
	@Auditable(actionType=AuditActionType.CREATE,actionName=AuditActionName.ADDRESS_CREATE)
	public Address create(@Valid Address address) throws BusinessException{
		Users username =CustomerInfo.getUserInContext();
		logger.info("Create record by address :"+address);	
		address=AddressService.create(address);
				{
				activityservice.createActivity(username.getFirstname()+" Created a Address "+address.getId(), address.getId().toString(), "Address");
				}
				return address;
		
	}

	/**
	 * 
	 *Returns the updated Address record
	 *@path get path and produces updated Address record
	 *@parameter valid Address entity
	 *@returns a updated Address record
	 * 
	 */	
	@ExceptionHandler 
	@Override
	@PUT
	@Path("update")
	@Auditable(actionType=AuditActionType.UPDATE,actionName=AuditActionName.ADDRESS_UPDATE)
	public Address update(@Valid Address address) throws BusinessException{
		Users username =CustomerInfo.getUserInContext();
		logger.info("Updating record by address :"+address);
		address=AddressService.update(address);
				{
			activityservice.createActivity(username.getFirstname()+" Updated a Address "+address.getId(), address.getId().toString(), "Address");
				}
				return address;
		
	}

	/**
	 * 
	 *Returns the removed Address record
	 *@path get path and delete Address record 
	 *@parameter valid Address entity
	 *@returns a removed Address record
	 * 
	 */	
	@ExceptionHandler 
	@Override
	@Path("delete")
	@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.ADDRESS_DELETE)
	public boolean remove(Address address) throws BusinessException{
		Users username =CustomerInfo.getUserInContext();
		logger.info("Removing record by address :"+address);
		AddressService.remove(address);
				{
			activityservice.createActivity(username.getFirstname()+" Deleted a Address "+address.getId(), address.getId().toString(), "Address");
				}
				
		return true;
	}

	/**
	 * 
	 *method remove audit action
	 *@path get path to remove audit action
	 *@parameter id of type Integer in path param
	 * 
	 */
	@ExceptionHandler 
	@DELETE
	@Override
	@Path("delete/{id}")
	@Auditable(actionType=AuditActionType.DELETE,actionName=AuditActionName.ADDRESS_DELETE)
	public void removeById(@PathParam("id") Integer primaryKey) throws BusinessException{
		Users username =CustomerInfo.getUserInContext();
		logger.info("Remove record by primary key :"+primaryKey);
		Address address=AddressService.findById(primaryKey);
		AddressService.removeById(primaryKey);
				{
				activityservice.createActivity(username.getFirstname()+" Deleted a Address "+address.getId(), address.getId().toString(), "Address");
				}
			
	}

	@ExceptionHandler 
	@Override
	public IGenericService<Integer, Address> getService() {
		return AddressService;
	}

	@ExceptionHandler 
	@Override
	public SearchContext getSearchContext() {
		return context;
	}
}
