package com.inn.headstartdemo.model;


import java.io.Serializable;
import java.util.Date;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;




/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@XmlRootElement(name="ActivityStream") @Entity
@Table(name="activity_stream")
 @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"})
public class ActivityStream implements Serializable {
	
	@Id
	     @GeneratedValue(strategy = GenerationType.AUTO)
	 	private Long id;

	@Basic
		private Date date;

	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="userid")
	private Users user;

	@Basic
	private String type;
		@Basic
	@Column(nullable=false)
	private String message;

	@Basic
	private String entityId;

	
	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}



	public ActivityStream() {
	}

	public String getEntityId() {
		return entityId;
	}

	public void setEntityId(String entityId) {
		this.entityId = entityId;
	}

	public ActivityStream(Long id) {
		this.id = id;
	}


	

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}


	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof ActivityStream) {
			ActivityStream stream= (ActivityStream) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.appendSuper(super.equals(obj));
			equalsBuilder.append(id, stream.getId());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(id);
		return hashCodeBuilder.toHashCode();
	}
}
