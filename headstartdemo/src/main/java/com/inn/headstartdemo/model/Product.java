package com.inn.headstartdemo.model;

import javax.persistence.*;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import java.io.Serializable;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.Audited;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import com.inn.headstartdemo.utils.BaseEntity;
import javax.xml.bind.annotation.XmlRootElement;
import org.hibernate.validator.constraints.Length;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@XmlRootElement(name="Product") @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"}) @Audited @Entity
@Table(name="product")
public class Product extends BaseEntity implements Serializable {
	@Basic
	@Column(nullable=false)
	private Double buyPrice;

	@GeneratedValue(strategy=javax.persistence.GenerationType.AUTO) @Id
	@Column(columnDefinition="INT UNSIGNED")
	private Integer productCode;

	@NotAudited @Basic
	@Column(nullable=false)
	private String productDescription;

	@Length(min=0, max=70) @Basic
	@Column(nullable=false, length=70)
	private String productName;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String productVendor;

	@Basic
	@Column(nullable=false)
	private Integer quantityInStock;

	@Basic
	@Column(nullable=false)
	private Double sellPrice;


	public Product() {
	}

	public Product(Integer productCode) {
		this.productCode = productCode;
	}

	public Double getBuyPrice() {
		return buyPrice;
	}

	public void setBuyPrice(Double buyPrice) {
		this.buyPrice = buyPrice;
	}

	public Integer getProductCode() {
		return productCode;
	}

	public void setProductCode(Integer productCode) {
		this.productCode = productCode;
	}

	public String getProductDescription() {
		return productDescription;
	}

	public void setProductDescription(String productDescription) {
		this.productDescription = productDescription;
	}

	public String getProductName() {
		return productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	public String getProductVendor() {
		return productVendor;
	}

	public void setProductVendor(String productVendor) {
		this.productVendor = productVendor;
	}

	public Productline getProductline() {
		return productline;
	}

	public void setProductline(Productline productline) {
		this.productline = productline;
	}

	public Integer getQuantityInStock() {
		return quantityInStock;
	}

	public void setQuantityInStock(Integer quantityInStock) {
		this.quantityInStock = quantityInStock;
	}

	public Double getSellPrice() {
		return sellPrice;
	}

	public void setSellPrice(Double sellPrice) {
		this.sellPrice = sellPrice;
	}

	@Enumerated(EnumType.STRING) private Productline productline;

	public static enum Productline {Trucks,Motorcycles,Cars,Planes,Ships,Trains}
	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof Product) {
			Product product = (Product) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.append(buyPrice, product.getBuyPrice());
			equalsBuilder.append(productCode, product.getProductCode());
			equalsBuilder.append(productDescription, product.getProductDescription());
			equalsBuilder.append(productName, product.getProductName());
			equalsBuilder.append(productVendor, product.getProductVendor());
			equalsBuilder.append(productline, product.getProductline());
			equalsBuilder.append(quantityInStock, product.getQuantityInStock());
			equalsBuilder.append(sellPrice, product.getSellPrice());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(buyPrice);
		hashCodeBuilder.append(productCode);
		hashCodeBuilder.append(productDescription);
		hashCodeBuilder.append(productName);
		hashCodeBuilder.append(productVendor);
		hashCodeBuilder.append(productline);
		hashCodeBuilder.append(quantityInStock);
		hashCodeBuilder.append(sellPrice);
		return hashCodeBuilder.toHashCode();
	}

	@org.codehaus.jackson.annotate.JsonIgnore
	public String getPrimaryKeyIdentifier() {
		return productCode.toString();
	}
}