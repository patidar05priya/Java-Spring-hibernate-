package com.inn.headstartdemo.model;

import java.util.*;
import javax.persistence.*;
import java.io.Serializable;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import javax.xml.bind.annotation.XmlRootElement;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import  org.codehaus.jackson.annotate.JsonIgnore;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.annotations.Cascade;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
@XmlRootElement(name="Roles") @Entity
@Table(name="roles")
@NamedQueries( {

    @NamedQuery(name = "getRolesIdByRolename", query = "select r from Roles r where r.rolename=:rolename ") ,
    @NamedQuery(name = "getRolesByRolename", query = "select r from Roles r where r.rolename=:rolename ")
        } )
         @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"})
public class Roles implements Serializable {
	@Basic
	@Column(nullable=false, length=200)
	private String description;

		
	@ManyToMany(targetEntity=com.inn.headstartdemo.model.Permissions.class, fetch=FetchType.LAZY)
	@JoinTable(name="rolepermission", joinColumns=@JoinColumn(name="roleid"), inverseJoinColumns=@JoinColumn(name="permissionid"))
	private Set<Permissions> permissions = new HashSet<Permissions>();

	@Id
	    @GeneratedValue(strategy = GenerationType.AUTO)
	 	private Long roleid;

	@Basic
	@Column(nullable=false, length=50)
	private String rolename;


	public Roles() {
	}

	public Roles(Long roleid) {
		this.roleid = roleid;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	
		
	@XmlTransient
	public Set<Permissions> getPermissions() {
		return permissions;
	}

	public void setPermissions(Set<Permissions> permissions) {
		this.permissions = permissions;
	}

	public Long getRoleid() {
		return roleid;
	}

	public void setRoleid(Long roleid) {
		this.roleid = roleid;
	}

	public String getRolename() {
		return rolename;
	}

	public void setRolename(String rolename) {
		this.rolename = rolename;
	}

	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof Roles) {
			Roles roles = (Roles) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.appendSuper(super.equals(obj));
			equalsBuilder.append(description, roles.getDescription());
						
			equalsBuilder.append(permissions, roles.getPermissions());
			equalsBuilder.append(roleid, roles.getRoleid());
			equalsBuilder.append(rolename, roles.getRolename());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(description);
				hashCodeBuilder.append(roleid);
		hashCodeBuilder.append(rolename);
		return hashCodeBuilder.toHashCode();
	}
	
	@JsonIgnore
	public String getIdentifier()
	{
		return ""+rolename;
	}
	
}
