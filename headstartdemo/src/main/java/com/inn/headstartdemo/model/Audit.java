
package com.inn.headstartdemo.model;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.FilterDefs;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.ParamDef;
import org.hibernate.annotations.Type;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import com.inn.headstartdemo.audit.AuditActionName;
import com.inn.headstartdemo.audit.AuditActionType;
import java.io.Serializable;
import javax.persistence.*;
import java.util.Date;


@NamedQueries({ 
	@NamedQuery(name="getAudits",query="select e from Audit e order by e.auditId desc"),
	@NamedQuery(name="getLoggedInUsersFromAudit",query="select e from Audit e where  e.date>:passedDate " +
			"and e.auditActionName=:login and not exists(select l.auditId from Audit l where l.auditActionName=:logout and l.sessionid=e.sessionid) order by e.date desc")
	})

@FilterDefs({
	  @FilterDef(name="userfullnameFilter",parameters={@ParamDef(name="userfullname", type = "java.lang.String")}),
	  @FilterDef(name="actiontypeFilter",parameters={@ParamDef(name="actiontype", type = "java.lang.String")}),
	  @FilterDef(name="actionnameFilter",parameters={@ParamDef(name="actionname", type = "java.lang.String")}),
	  @FilterDef(name="successFilter",parameters={@ParamDef(name="success", type = "java.lang.String")})
	  
})


@Filters({
	@Filter(name = "userfullnameFilter",condition="USER_FULLNAME like :userfullname"),
	@Filter(name = "actiontypeFilter",condition="AUDIT_ACTION_TYPE=:actiontype"),
	@Filter(name = "actionnameFilter",condition="AUDIT_ACTION_NAME like :actionname"),
	@Filter(name = "successFilter",condition="SUCCESS=:success")

 })

/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */
@Entity
@Table(name = "audit")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"})
public class Audit implements Serializable
{
	private static final long serialVersionUID = -5025801585806813596L;
    @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
	     @Column(name = "AUDIT_ID")
	private Long	auditId;

    @ManyToOne
    @JoinColumn(name = "USER_ID")
    @Basic(fetch = FetchType.LAZY)
	private Users user;

    @Column(name = "AUDIT_DATE")
	private Date date;

         @Column(name = "ACTION", length = 256)
	   	private String 	action;

    @Column(name = "PARAMETERS", length = 1024)
	  	private String	parameters;

    @Column(name = "SUCCESS")
    @Type(type = "yes_no")
	private Boolean	success = Boolean.TRUE;

    @Column(name = "USER_FULLNAME", length = 256)
	private String	userFullName;

		
	
    @Column(name = "remote_host", length = 256)
	private String	remoteHost;
    
    @Column(name = "sessionid", length = 256)
	private String	sessionid;
    
    
          @Column(name = "host", length = 256)
	 	private String	host;
    
    @Column(name = "exceptionDetails", length = 500)
	private String	exceptionDetails;

    /**
     * 
     * @return String
     */

    /**
     * 
     * @param externalSystemName of type String
     */


	@Column(name = "PAGE", length = 256)
	private String	page;

    @Enumerated(EnumType.STRING)
    @Column(name = "AUDIT_ACTION_TYPE", length = 100)
	private AuditActionType auditActionType;
	
    @Enumerated(EnumType.STRING)
    @Column(name = "AUDIT_ACTION_NAME", length = 100)
	private AuditActionName auditActionName;
    @Column(name = "userAgent", length = 300)
	private String userAgent;
    
    /**
     * @return String
     */
	public String toString()
	{
		return new ToStringBuilder(this)
						.append("auditId", auditId)
						.append("userFullName", userFullName)
						.append("date", date)
						.append("action", action)
						.toString();
	}
	
	/**
	 * @return  String 
	 */
	public String getPage()
	{
		return page;
	}

	/**
	 * @param page the page to set
	 */
	public void setPage(String page)
	{
		this.page = page;

	}

	/**
	 * @return the userName
	 */
	public String getUserFullName()
	{
		return userFullName;
	}

	/**
	 * @param userName the userName to set
	 */
	public void setUserFullName(String userFullName)
	{
		this.userFullName = userFullName;

	}


	/**
	 * @return the parameters
	 */
	public String getParameters()
	{
		return parameters;
	}

	/**
	 * @return the success
	 */
	public Boolean getSuccess()
	{
		return success;
	}

	/**
	 * @return the auditActionType
	 */
	public AuditActionType getAuditActionType()
	{
		return auditActionType;
	}

	/**
	 * @param parameters the parameters to set
	 */
	public void setParameters(String parameters)
	{
		this.parameters =  (parameters != null && parameters.length() > 4096) ? parameters.substring(0, 4095) : parameters;

	}

	/**
	 * @param success the success to set
	 */
	public void setSuccess(Boolean success)
	{
		this.success = success;

	}

	/**
	 * @param auditActionType the auditActionType to set
	 */
	public void setAuditActionType(AuditActionType auditActionType)
	{
		this.auditActionType = auditActionType;

	}
	/**
	 * 
	 * @param action of type String
	 */

	public void setAction(String action)
	{
		this.action = action;

	}
/**
 * 
 * @param user
 */
	public void setUser(Users user)
	{
		this.user = user;

	}
/**
 * 
 * @param date
 */
	public void setDate(Date date)
	{
		this.date = date;

	}

	/**
	 * @return the user
	 */
	public Users getUser()
	{
		return user;
	}

	/**
	 * @return the date
	 */
	public Date getDate()
	{
		return date;
	}

	/**
	 * @return the action
	 */
	public String getAction()
	{
		return action;
	}



	/**
	 * @return the auditId
	 */
	public Long getAuditId()
	{
		return auditId;
	}

	/**
	 * @param auditId the auditId to set
	 */
	public void setAuditId(Long auditId)
	{
		this.auditId = auditId;
	}
	
	
	/**
	 * 
	 * @param o
	 * @return
	 */
	public int compareTo(Audit o)
	{
		return new CompareToBuilder()
			.append(this.getAuditId(), o.getAuditId())
			.toComparison();
	}

	@Override

	/**
	 * @return int
	 */
	public int hashCode()
	{
		return new HashCodeBuilder()
					.append(this.getAuditId())
					.toHashCode();
	}

	@Override
	
	/**
	 * @return boolean
	 */
	public boolean equals(Object obj) 
	{
		if (obj == null)
		{
			return false;
		}
		
		if (obj == this)
		{
			return true;
		}
		
		if (obj.getClass() != getClass())
		{
			return false;
		}
		
		Audit other = (Audit) obj;

		return new EqualsBuilder()
				.append(this.getAuditId(), other.getAuditId())
				.isEquals();
	}
	/**
	 * 
	 * @param auditActionName
	 */

	public void setAuditActionName(AuditActionName auditActionName) {
		this.auditActionName = auditActionName;

	}	
	/**
	 * 
	 * @return AuditActionName
	 */
	public AuditActionName getAuditActionName()
	{
		return auditActionName;
	}
	public String getRemoteHost() {
		return remoteHost;
	}
	public void setRemoteHost(String remoteHost) {
		this.remoteHost = remoteHost;
	}
	public String getSessionid() {
		return sessionid;
	}
	public void setSessionid(String sessionid) {
		this.sessionid = sessionid;
	}
	public String getHost() {
		return host;
	}
	public void setHost(String host) {
		this.host = host;
	}
	public void setUserAgent(String header) {
		this.userAgent = header;
		
	}
	public String getUserAgent() {
		return this.userAgent ;
		
	}
	public String getExceptionDetails() {
		return exceptionDetails;
	}
	public void setExceptionDetails(String exceptionDetails) {
		this.exceptionDetails = exceptionDetails;
	}
	
		}
