package com.inn.headstartdemo.model;

import java.util.*;
import javax.persistence.*;
import javax.persistence.GeneratedValue;
import java.io.Serializable;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.hibernate.envers.Audited;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import com.inn.headstartdemo.utils.BaseEntity;
import javax.xml.bind.annotation.XmlRootElement;
import org.hibernate.validator.constraints.Length;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@XmlRootElement(name="Payment") @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"}) @Audited @Entity
@Table(name="payment")
public class Payment extends BaseEntity implements Serializable {
	@Basic
	@Column(nullable=false)
	private Double amount;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String checkNumber;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="customerid", columnDefinition="INT UNSIGNED", nullable=false)
	private Customer customer;

	@GeneratedValue(strategy=javax.persistence.GenerationType.AUTO) @Id
	private Long id;

	@Basic
	@Column(name="payment_date", nullable=false)
	private Date paymentDate;


	public Payment() {
	}

	public Payment(Long id) {
		this.id = id;
	}

	public Double getAmount() {
		return amount;
	}

	public void setAmount(Double amount) {
		this.amount = amount;
	}

	public String getCheckNumber() {
		return checkNumber;
	}

	public void setCheckNumber(String checkNumber) {
		this.checkNumber = checkNumber;
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Date getPaymentDate() {
		return paymentDate;
	}

	public void setPaymentDate(Date paymentDate) {
		this.paymentDate = paymentDate;
	}

	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof Payment) {
			Payment payment = (Payment) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.append(amount, payment.getAmount());
			equalsBuilder.append(checkNumber, payment.getCheckNumber());
			equalsBuilder.append(customer, payment.getCustomer());
			equalsBuilder.append(id, payment.getId());
			equalsBuilder.append(paymentDate, payment.getPaymentDate());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(amount);
		hashCodeBuilder.append(checkNumber);
		hashCodeBuilder.append(customer);
		hashCodeBuilder.append(id);
		hashCodeBuilder.append(paymentDate);
		return hashCodeBuilder.toHashCode();
	}

	@org.codehaus.jackson.annotate.JsonIgnore
	public String getPrimaryKeyIdentifier() {
		return id.toString();
	}
}