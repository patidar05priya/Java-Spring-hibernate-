package com.inn.headstartdemo.model;

import javax.persistence.*;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import java.io.Serializable;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.hibernate.envers.Audited;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.hibernate.envers.NotAudited;
import com.inn.headstartdemo.utils.BaseEntity;
import javax.persistence.NamedQuery;
import javax.persistence.NamedQueries;
import org.springframework.context.ApplicationContext;
import com.inn.headstartdemo.security.spring.context.ContextProvider;
import com.inn.headstartdemo.dao.ICustomerDao;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import javax.persistence.OneToOne;
import javax.xml.bind.annotation.XmlRootElement;
import org.hibernate.validator.constraints.Length;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@XmlRootElement(name="Customer") @NamedQueries(value={@NamedQuery(name="getFileCountsByCustomer", query="select count(e) from CustomerAttach e where e.customer= :customer")}) @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"}) @Audited @Entity
@Table(name="customer")
public class Customer extends BaseEntity implements Serializable {
	@OneToOne(fetch=FetchType.LAZY, cascade=CascadeType.ALL) @JoinColumn(name="customer_address", columnDefinition="INT UNSIGNED")
	private Address address;

	@Basic
	private Double creditLimit;

	@GeneratedValue(strategy=javax.persistence.GenerationType.AUTO) @Id
	@Column(columnDefinition="INT UNSIGNED")
	private Integer customerNumber;

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="salesman", columnDefinition="INT")
	private Employee employee;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String firstName;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String lastName;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String name;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String phone;

	public Customer() {
	}

	public Customer(Integer customerNumber) {
		this.customerNumber = customerNumber;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public Double getCreditLimit() {
		return creditLimit;
	}

	public void setCreditLimit(Double creditLimit) {
		this.creditLimit = creditLimit;
	}

	public Integer getCustomerNumber() {
		return customerNumber;
	}

	public void setCustomerNumber(Integer customerNumber) {
		this.customerNumber = customerNumber;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Prioritystatus getPrioritystatus() {
		return prioritystatus;
	}

	public void setPrioritystatus(Prioritystatus prioritystatus) {
		this.prioritystatus = prioritystatus;
	}

	@Enumerated(EnumType.STRING) private Prioritystatus prioritystatus;

	public static enum Prioritystatus {Basic,Gold,Silver,Diamond,Platinum}
	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof Customer) {
			Customer customer = (Customer) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.append(address, customer.getAddress());
			equalsBuilder.append(creditLimit, customer.getCreditLimit());
			equalsBuilder.append(customerNumber, customer.getCustomerNumber());
			equalsBuilder.append(employee, customer.getEmployee());
			equalsBuilder.append(firstName, customer.getFirstName());
			equalsBuilder.append(lastName, customer.getLastName());
			equalsBuilder.append(name, customer.getName());
			equalsBuilder.append(phone, customer.getPhone());
			equalsBuilder.append(prioritystatus, customer.getPrioritystatus());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(address);
		hashCodeBuilder.append(creditLimit);
		hashCodeBuilder.append(customerNumber);
		hashCodeBuilder.append(employee);
		hashCodeBuilder.append(firstName);
		hashCodeBuilder.append(lastName);
		hashCodeBuilder.append(name);
		hashCodeBuilder.append(phone);
		hashCodeBuilder.append(prioritystatus);
		return hashCodeBuilder.toHashCode();
	}

	@org.codehaus.jackson.annotate.JsonIgnore
	public String getPrimaryKeyIdentifier() {
		return customerNumber.toString();
	}

	public Long getFileAttacheCount() throws ValueNotFoundException {
		ApplicationContext applicationContext = ContextProvider.getContext();
		ICustomerDao dao = applicationContext.getBean(ICustomerDao.class);
		return dao.getFileCountsByEntity(customerNumber);
	}

	public Long getCommentCount() throws ValueNotFoundException {
		ApplicationContext applicationContext = ContextProvider.getContext();
		ICustomerDao dao = applicationContext.getBean(ICustomerDao.class);
		return dao.getCommentCountByEntity(customerNumber);
	}
}