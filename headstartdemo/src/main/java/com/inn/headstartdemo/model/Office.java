package com.inn.headstartdemo.model;

import javax.persistence.*;
import javax.persistence.GeneratedValue;
import java.io.Serializable;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.hibernate.envers.Audited;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import com.inn.headstartdemo.utils.BaseEntity;
import org.springframework.context.ApplicationContext;
import com.inn.headstartdemo.security.spring.context.ContextProvider;
import com.inn.headstartdemo.dao.IOfficeDao;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import javax.xml.bind.annotation.XmlRootElement;
import org.hibernate.validator.constraints.Length;

/**
 * Auto-generated by:
 * org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@XmlRootElement(name="Office") @JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"}) @Audited @Entity
@Table(name="office")
public class Office extends BaseEntity implements Serializable {
	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String addressLine1;

	@Length(min=0, max=50) @Basic
	@Column(length=50)
	private String addressLine2;

	@Length(min=0, max=50) @Basic
	@Column(name="city_name", nullable=false, length=50)
	private String cityName;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String country;

	@GeneratedValue(strategy=javax.persistence.GenerationType.AUTO) @Id
	@Column(columnDefinition="INT")
	private Integer officeCode;

	@Length(min=0, max=50) @Basic
	@Column(nullable=false, length=50)
	private String phone;

	@Length(min=0, max=15) @Basic
	@Column(nullable=false, length=15)
	private String postalCode;

	@Length(min=0, max=50) @Basic
	@Column(length=50)
	private String state;

	@Length(min=0, max=10) @Basic
	@Column(nullable=false, length=10)
	private String territory;


	public Office() {
	}

	public Office(Integer officeCode) {
		this.officeCode = officeCode;
	}

	public String getAddressLine1() {
		return addressLine1;
	}

	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	public String getAddressLine2() {
		return addressLine2;
	}

	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	public String getCityName() {
		return cityName;
	}

	public void setCityName(String cityName) {
		this.cityName = cityName;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public Integer getOfficeCode() {
		return officeCode;
	}

	public void setOfficeCode(Integer officeCode) {
		this.officeCode = officeCode;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getPostalCode() {
		return postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getTerritory() {
		return territory;
	}

	public void setTerritory(String territory) {
		this.territory = territory;
	}

	public boolean equals(Object obj) {
		boolean returnValue = false;
		if (obj instanceof Office) {
			Office office = (Office) obj;
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.append(addressLine1, office.getAddressLine1());
			equalsBuilder.append(addressLine2, office.getAddressLine2());
			equalsBuilder.append(cityName, office.getCityName());
			equalsBuilder.append(country, office.getCountry());
			equalsBuilder.append(officeCode, office.getOfficeCode());
			equalsBuilder.append(phone, office.getPhone());
			equalsBuilder.append(postalCode, office.getPostalCode());
			equalsBuilder.append(state, office.getState());
			equalsBuilder.append(territory, office.getTerritory());
			returnValue = equalsBuilder.isEquals();
		}
		return returnValue;
	}

	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}

	public int hashCode() {
		HashCodeBuilder hashCodeBuilder = new HashCodeBuilder(17, 37);
		hashCodeBuilder.append(addressLine1);
		hashCodeBuilder.append(addressLine2);
		hashCodeBuilder.append(cityName);
		hashCodeBuilder.append(country);
		hashCodeBuilder.append(officeCode);
		hashCodeBuilder.append(phone);
		hashCodeBuilder.append(postalCode);
		hashCodeBuilder.append(state);
		hashCodeBuilder.append(territory);
		return hashCodeBuilder.toHashCode();
	}

	@org.codehaus.jackson.annotate.JsonIgnore
	public String getPrimaryKeyIdentifier() {
		return officeCode.toString();
	}

	public Long getCommentCount() throws ValueNotFoundException {
		ApplicationContext applicationContext = ContextProvider.getContext();
		IOfficeDao dao = applicationContext.getBean(IOfficeDao.class);
		return dao.getCommentCountByEntity(officeCode);
	}
}