package com.inn.headstartdemo.dao.impl;

import com.inn.headstartdemo.model.Address;
import java.lang.Integer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.dao.IAddressDao;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.NoResultException;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import javax.validation.Valid;
/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */
/**
 * 
 *Dao 
 * 
 */
@ExceptionHandler 
@Dao
public class AddressDaoImpl extends HibernateGenericDao<Integer, Address> implements IAddressDao {
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(AddressDaoImpl.class);
	
	/**
	 * Instantiates a new address dao.
	 */
	public AddressDaoImpl() {
		super(Address.class);
	}

	/**
	 * 
	 *Returns the new Address record
	 *@parameter address of type  Address
	 *@returns a new Address
	 * 
	 */
	@ExceptionHandler 
	@Override
	public Address create(@Valid Address address)throws DataAccessException {
	
	logger.info("Create record by an address :"+address);
		return super.create(address);
		
		
	}

	/**
	 * 
	 *Returns the updated Address record
	 *@parameter address of type  Address
	 *@returns a updated Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public Address update(@Valid Address address) throws DataAccessException {
	logger.info("update record by an address :"+address);
	
		return super.update(address);
	}

	/**
	 * 
	 *Method to remove Address record
	 *@parameter address of type  Address
	 * 
	 */
	@ExceptionHandler 
	@Override
	public void delete(Address address) throws DataAccessException {
	logger.info("Deleting record by an address :"+address);

		super.delete(address);
	}

	/**
	 * 
	 *Method to remove Address record by primary key
	 *@parameter primary key of type Integer  
	 * 
	 */
	@ExceptionHandler 
	@Override
	public void deleteByPk(Integer addressPk) throws DataAccessException{
	logger.info("Deleting record by primary key :"+addressPk);
	
		super.deleteByPk(addressPk);
	}
	
	/**
	 * 
	 *Returns the list of Address record 
	 *@returns  Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public List<Address> findAll() throws NoResultException,EmptyResultDataAccessException{
		return super.findAll();
	}
	
	/**
	 * 
	 *Returns  the record of Address  finding by primary key 
	 *@parameter primary key  of type Integer
	 *@returns a Address record
	 * 
	 */
	@ExceptionHandler 
	@Override
	public Address findByPk(Integer addressPk) throws NoResultException,EmptyResultDataAccessException{
	logger.info("Find record by Primary Key :"+addressPk);
	
		return super.findByPk(addressPk);
	}

}
