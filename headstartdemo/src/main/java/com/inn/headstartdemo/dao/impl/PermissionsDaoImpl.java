package com.inn.headstartdemo.dao.impl;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inn.headstartdemo.dao.IPermissionsDao;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.model.Permissions;
import com.inn.headstartdemo.exceptions.ExceptionHandler;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * Permissions Dao
 *
 */
@Dao
@ExceptionHandler
public class PermissionsDaoImpl extends HibernateGenericDao<Long, Permissions> implements IPermissionsDao {
private Logger logger=LoggerFactory.getLogger(PermissionsDaoImpl.class);

	public PermissionsDaoImpl() {
		super(Permissions.class);
	}

	/**
	 * 
	 *method to create permissions
	 *@parameter permission of type Permissions
	 *@returns permission
	 * 
	 */  
	@Override
	@ExceptionHandler
	public Permissions create(Permissions permission) {
	logger.info("Creating permission by permission :"+permission);
		return super.create(permission);
	}

	/**
	 * 
	 *method to update permissions
	 *@parameter permission of type Permissions
	 *@returns update permissions
	 * 
	 */  
	@Override
	@ExceptionHandler
	public Permissions update(Permissions permission) {
	logger.info("Updating permission by permission :"+permission);
		return super.update(permission);
	}

	/**
	 * 
	 *method to delete permissions 
	 *@parameter permission of type Permissions
	 * 
	 */  
	@Override
	@ExceptionHandler
	public void delete(Permissions permission) {
	logger.info("Deleting permission by permission :"+permission);
		super.delete(permission);
	}
	
	/**
	 * 
	 *method to delete permissions by primary Key
	 *@parameter permissionPk of type Long
	 * 
	 */ 
	@Override
	@ExceptionHandler
	public void deleteByPk(Long permissionPk) {
	logger.info("Deleting permission by permissionPk :"+permissionPk);
		super.deleteByPk(permissionPk);
	}

	/**
	 * 
	 *method to find all permissions
	 *@returns permissions
	 * 
	 */
	@Override
	@ExceptionHandler
	public List<Permissions> findAll() {
		return super.findAll();
	}

	/**
	 * 
	 *method to find permissions by primaryKey
	 *@parameter permissionPk of type Long
	 *@returns permissions
	 * 
	 */
	@Override
	@ExceptionHandler
	public Permissions findByPk(Long permissionPk) {
	logger.info("Finding permission by permissionPk :"+permissionPk);
		return (super.findByPk(permissionPk));
	}
	
	 public Long getTotalCount(){
		return ((Long)this.getEntityManager().createQuery("select count(x) from Permissions x").getSingleResult());		
	}

}
