package com.inn.headstartdemo.dao.impl;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import  com.inn.headstartdemo.exceptions.ExceptionHandler;
import org.springframework.dao.DataAccessException;
import com.inn.headstartdemo.dao.IEmailNotificationsDao;
import  com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.model.EmailNotifications;
 
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * EmailNotificationDao
 *
 */
 

@Dao
public class EmailNotificationsDaoImpl extends HibernateGenericDao<Long, EmailNotifications> implements IEmailNotificationsDao {
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(EmailNotificationsDaoImpl.class);
	/**
	 * Instantiates a new email notifications dao impl.
	 */
	public EmailNotificationsDaoImpl() {
		super(EmailNotifications.class);
	}

	/**
	 * 
	 *Returns the new valid EmailNotification
	 *@parameter valid emailNotifications of type EmailNotifications
	 *@returns a new entity of EmailNotifications
	 * 
	 */

	@Override
	public EmailNotifications create(@Valid EmailNotifications emailNotifications)throws DataAccessException{
	
	logger.info("Create record by an entity :"+emailNotifications);
		return super.create(emailNotifications);
		
		
	}

	/**
	 * 
	 *Returns the updated valid EmailNotifications
	 *@parameter valid entity of type EmailNotifications
	 *@returns a updated EmailNotification entity
	 * 
	 */

	@Override
	public EmailNotifications update(@Valid EmailNotifications emailNotifications)throws DataAccessException {
	logger.info("update record by an entity :"+emailNotifications);
	
		return super.update(emailNotifications);
	}

	/**
	 * 
	 *Returns the removed valid EmailNotifications entity
	 *@parameter entity of type EmailNotifications
	 *@returns bolean value true if entity removed succesfully
	 */
	@Override
	public void delete(EmailNotifications emailNotifications)throws DataAccessException  {
	logger.info("Deleting record by an entity :"+emailNotifications);

		super.delete(emailNotifications);
	}

	/**
	 * 
	 *Returns the removed valid EmailNotifications by using primaryKey
	 *@parameter primaryKey of type Long
	 * 
	 */
	@ExceptionHandler
	@Override
	public void deleteByPk(Long emailNotificationsPk) throws DataAccessException {
	logger.info("Deleting record by primary key :"+emailNotificationsPk);
	
		super.deleteByPk(emailNotificationsPk);
	}
	
	/**
	 * 
	 *Returns the list of EmailNotifications
	 *@returns a listof EmailNotifications
	 * 
	 */
	@Override
	public List<EmailNotifications> findAll()throws DataAccessException  {
		return super.findAll();
	}
	
	/**
	 * 
	 *Returns the EmailNotifications finding by primary key
	 *@parameter primaryKey of type Long
	 *@returns EmailNotification 
	 * 
	 */
	@Override
	public EmailNotifications findByPk(Long emailNotificationsPk)throws DataAccessException  {
	logger.info("Find record by Primary Key :"+emailNotificationsPk);
	
		return (super.findByPk(emailNotificationsPk));
	}

	public Long getTotalCount(){//false false
	 		return ((Long)this.getEntityManager().createQuery("select count(x) from EmailNotifications x ").getSingleResult());		
		}
}
