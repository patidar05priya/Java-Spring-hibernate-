package com.inn.headstartdemo.dao.impl;

import java.math.BigInteger;
import java.util.List;


import javax.persistence.Query;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;


import com.inn.headstartdemo.model.Orders;
import java.lang.Integer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.dao.IOrdersDao;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.NoResultException;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 *Dao 
 * 
 */
@ExceptionHandler @Dao
public class OrdersDaoImpl extends HibernateGenericDao<Integer, Orders> implements IOrdersDao {
	
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(OrdersDaoImpl.class);
	
	
	public OrdersDaoImpl() {
		super(Orders.class);
	}

	    
	/**
	 * 
	 *Returns the new Orders record
	 *@parameter orders of type  Orders
	 *@returns a new Orders
	 * 
	 */
	@ExceptionHandler @Override
	public Orders create(@Valid Orders orders)throws DataAccessException {
	
	logger.info("Create record by an entity :"+orders);
	Orders newEntity=super.create(orders);
	
	return newEntity;
	}

	/**
	 * 
	 *Returns the updated Orders record
	 *@parameter anEntity of type  Orders
	 *@returns a updated Orders record
	 * 
	 */
	@ExceptionHandler @Override
	public Orders update(@Valid Orders orders) throws DataAccessException {
	logger.info("update record by an entity :"+orders);
		
		
		return super.update(orders);
	}

	/**
	 * 
	 *Method to remove Orders record
	 *@parameter orders of type  Orders
	 * 
	 */
	@ExceptionHandler @Override
	public void delete(@Valid Orders orders) throws DataAccessException {
	logger.info("Deleting record by an entity :"+orders);

		super.delete(orders);

	}
	

	/**
	 * 
	 *Method to remove Orders record by primary key
	 *@parameter primary key of type Integer  
	 * 
	 */
	@ExceptionHandler @Override
	public void deleteByPk(@NotNull Integer integerPk) throws DataAccessException{
	logger.info("Deleting record by primary key :"+integerPk);
		
		super.deleteByPk(integerPk);

	}
	
	/**
	 * 
	 *Returns the list of Orders record 
	 *@returns  Orders record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Orders> findAll() throws NoResultException,EmptyResultDataAccessException{
		return super.findAll();
	}
	
	/**
	 * 
	 *Returns  the record of Orders  finding by primary key 
	 *@parameter primary key  of type Integer
	 *@returns a Orders record
	 * 
	 */
	@ExceptionHandler @Override
	public Orders findByPk(@NotNull Integer integerPk) throws NoResultException,EmptyResultDataAccessException{
	logger.info("Find record by Primary Key :"+integerPk);
	
		return super.findByPk(integerPk);
	}

	
		
		
		
	@ExceptionHandler public Long getTotalCount(){
			return ((Long)this.getEntityManager().createQuery("select count(x) from Orders x  ").getSingleResult());		
		}
}
