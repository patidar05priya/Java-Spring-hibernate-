package  com.inn.headstartdemo.dao.impl;

import java.util.List;

import javax.persistence.Query;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.EmptyResultDataAccessException;

import  com.inn.headstartdemo.exceptions.ValueNotFoundException;
import  com.inn.headstartdemo.dao.IActivityStreamDao;
import  com.inn.headstartdemo.dao.annotation.Dao;
import  com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import  com.inn.headstartdemo.model.ActivityStream;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
* 
* ActivityStream Dao 
* 
*/
@Dao
public class ActivityStreamDaoImpl extends HibernateGenericDao<Long,ActivityStream> implements IActivityStreamDao {
	
	/** The logger. */
	private static Logger logger= LoggerFactory.getLogger(ActivityStreamDaoImpl.class);

	/**
	 * Instantiates a new activity Stream dao impl.
	 */
	public ActivityStreamDaoImpl() {
		super(ActivityStream.class);
	}
	/**
	 * 
	 *Returns the new activitystream entity
	 *@parameter activityStream of type activitystream
	 *@returns a new entity of activitystream
	 * 
	 */
	@Override
	public ActivityStream create(@Valid ActivityStream activityStream) {
		logger.info("Creating activitystream entity:"+activityStream);
		return super.create(activityStream);
	}
	/**
	 * 
	 *Returns the updated activitystream by entity
	 *@parameter activityStream of type activitystream
	 *@returns a updated activitystream entity
	 * 
	 */
	@Override
	public ActivityStream update(@Valid ActivityStream activityStream) {
		logger.info("Updating activitystream entity:"+activityStream);
		return super.update(activityStream);
	}
	/**
	 * 
	 *Returns the removed activitystream
	 *@parameter activityStream of type activitystream
	 * 
	 */
	@Override
	public void delete(ActivityStream activityStream) {
		logger.info("Deleting activitystream entity:"+activityStream);
		super.delete(activityStream);
	}
	/**
	 * 
	 *Returns the removed activitystream by using primary key
	 *@parameter primaryKey of type Long
	 * 
	 */
	@Override
	public void deleteByPk(Long activityStreamPk) {
		logger.info("Deleting activitystream entity by primary key:"+activityStreamPk);
		super.deleteByPk(activityStreamPk);
	}
	/**
	 * 
	 *Returns the list of all activityStream
	 */
	@Override
	public List<ActivityStream> findAll() {
		return super.findAll();
	}

	/**
	 * 
	 *Returns the  activitystream find by primary key
	 *@parameter primary key of type Long
	 *@returns a activitystream activityStream
	 * 
	 */
	@Override
	public ActivityStream findByPk(Long activityStreamPk) {
		logger.info("finding activitystream activityStream by primary key:"+activityStreamPk);
		return super.findByPk(activityStreamPk);
	}

	public Long getTotalCount(){
	 		return ((Long)this.getEntityManager().createQuery("select count(x) from ActivityStream x").getSingleResult());		
		}
	

}
