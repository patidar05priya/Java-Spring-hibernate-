package com.inn.headstartdemo.dao.generic.impl;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;

import javax.persistence.TypedQuery;

import org.apache.cxf.jaxrs.ext.search.SearchCondition;
import org.apache.cxf.jaxrs.ext.search.SearchContext;
import org.apache.cxf.jaxrs.ext.search.jpa.JPATypedQueryVisitor;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Example;
import org.hibernate.envers.AuditReader;
import org.hibernate.envers.AuditReaderFactory;
import org.hibernate.envers.query.AuditEntity;
import org.hibernate.envers.query.impl.AbstractAuditQuery;
import org.hibernate.proxy.HibernateProxyHelper;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.inn.headstartdemo.dao.generic.IGenericDao;
import com.inn.headstartdemo.dao.criteria.IQueryCriteriaBuilder;
import com.inn.headstartdemo.dao.criteria.IQueryExecutor;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.utils.QueryObject.SortOrder;
import com.inn.headstartdemo.utils.ClassUtils;

/**
 * Represents the implementation of DAO using JPA Hibernate. Provides the basic 
 * generic implementation for all CRUD operation.
 *
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 * @param <Pk> represents primary key class.
 * @param <Entity> represents the entity class.
 */
public class HibernateGenericDao<Pk, Entity> extends JPABaseDao<Pk, Entity>
		implements IGenericDao<Pk, Entity> {
		
	/**
	 * represents the logger instance
	 */
	private Logger logger = LoggerFactory.getLogger(HibernateGenericDao.class);	

	public static final String IDENTIFIER_METHOD="getPrimaryKeyIdentifier";
	public static final String USERNAME_METHOD="getUsername";
	public static final String MODIFCATIONTIME_METHOD="getModifiedTime";
	public static final String MODIFIEDBY_METHOD  ="last_modifier";
	public static final String CHANGES = "changes";
	public static final String CHANGED_BY = "changed_by";
	public static final String CHANGED_ON = "changed_on";
	public static final String GET = "get";
	public static final String SET = "set";
	public static final String CREATED_TIME = "CreatedTime";
	public static final String MODIFIED_TIME = "ModifiedTime";
	public static final String CREATOR = "Creator";
	public static final String LAST_MODIFIER = "LastModifier";
	public static final String DOMAIN = "Domain";
	public static final String DESC ="desc";
	public static final String ADMIN = "admin";

	@Override
	@Autowired(required = true)
	@Qualifier("hibernateCriteriaBuilder")
	public void setCriteriaBuilder(IQueryCriteriaBuilder<Entity> criteriaBuilder) {
		super.setCriteriaBuilder(criteriaBuilder);
	}

	@Override
	@Autowired(required = true)
	@Qualifier("hibernateQueryExecutor")
	public void setQueryExecutor(IQueryExecutor<Entity> queryExecutor) {
		super.setQueryExecutor(queryExecutor);
	}

	public HibernateGenericDao(Class<Entity> type) {
		super(type);
	}

	/**
	 * Returns the List of Entities that match the search criteria specified
	 * through the Example. Searches all Entities that match the properties set
	 * in the Example entity.
	 * 
	 * @param refEntity
	 *            Example Element to search for.
	 * @return List of entities that match the search criteria specified through
	 *         all properties set in the Example.
	 */
	public List<Entity> findByExample(Entity refEntity, String[] excludeProperty) {
		logger.info(
				"performing findByExample using entity {} excludedProperty{}",
				refEntity, excludeProperty);
		Session session = (Session) getEntityManager().getDelegate();

		Criteria criteria = session.createCriteria(getType());

		addSimpleFieldCriteria(refEntity, criteria);

		List<Entity> result = criteria.list();
		logger.info("filtered result after findByExample {}", result);
		return result;
	}

	/**
	 * add simple field criteria using entity object
	 * 
	 * @param entityObject
	 * @param criteria
	 * 
	 */
	protected void addSimpleFieldCriteria(Object entityObject, Criteria criteria) {

		if (entityObject == null) {
			return;
		}
		
		logger.debug("entity object's class is [" + entityObject.getClass()
				+ "]");
		logger.debug("entity object's type is [" + getType() + "]");

		if (criteria == null) {
			// This is parent entity. Start criteria building
			Session session = (Session) getEntityManager().getDelegate();
			criteria = session.createCriteria(entityObject.getClass());
		}

		Field entityClassFields[] = entityObject.getClass().getDeclaredFields();

		try {

			Object simpleObject = entityObject.getClass().newInstance();

			if (entityClassFields != null) {

				for (Field embeddedField : entityClassFields) {
					
					embeddedField.setAccessible(true);

					if (ClassUtils.isUserDefined(embeddedField
									.getType())
							&& embeddedField.get(entityObject) != null) {

						addEmbeddedFieldCriteria(embeddedField, entityObject,
								criteria);

					} else if (embeddedField.get(entityObject) != null
							&& ClassUtils.isSimpleType(embeddedField
									.getType())) {
						logger.debug("field [" + embeddedField.getName()
								+ "] will be added to criteria of this class");

						// As field is of primitive type add to example
						embeddedField.set(simpleObject, embeddedField
								.get(entityObject));
					} else {
						logger
								.debug("field ["
										+ embeddedField.getName()
										+ "] will be not be added to criteria as it's value is null");
					}

				}

				Example example = Example.create(simpleObject);
				
				criteria.add(example);

			}
		} catch (Exception e) {
			logger.error(" Exception while add simple field criteria ", e);
		}

	}

	/**
	 * add embedded field criteria using entity object
	 * 
	 * @param Field
	 *            as field
	 * @param Object
	 *            as entityObject
	 * 
	 */
	protected void addEmbeddedFieldCriteria(Field field, Object entityObject,
			Criteria parentCriteria) {

		if (parentCriteria == null) {
			// This is parent entity. Start criteria building
			Session session = (Session) getEntityManager().getDelegate();
			parentCriteria = session.createCriteria(field.getDeclaringClass());
		}

		Criteria criteria = parentCriteria.createCriteria(field.getName());

		try {
				if (ClassUtils.isUserDefined(field.getType())
					&& field.get(entityObject) != null) {

					logger.debug("field [" + field.getName()
						+ "] is candidate for criteria building");

					addSimpleFieldCriteria(field.get(entityObject), criteria);

				}
		} catch (Exception e) {
			logger.error(" Exception while add embedded field criteria : ", e);
		}

	}

	/**
	 * Returns the record by searching Entity.
	 * 
	 * @param SearchContext
	 *            the ctx
	 * @param Integer
	 *            the maxLimit
	 * @param Integer
	 *            the minLimit
	 * @param String
	 *            the orderby
	 * @param String
	 *            the orderType
	 ** @returns a list of Entity record
	 */
	public List<Entity> search(SearchContext ctx, Integer maxLimit,
			Integer minLimit, String orderby, String orderType) {
		logger.info("HibernateGenericDao-search method start With param maxLimit : "+maxLimit+" , minLimit:"+minLimit+", orderby : "+orderby+" ,orderType : "+orderType);
		SearchCondition<Entity> sc = ctx.getCondition(getType());
		if (sc != null) {
			return getResultsForSearchCondition(sc,maxLimit,minLimit,orderby,orderType);
		} else {
			if (orderby != null && orderType != null) {
				if (orderType.equalsIgnoreCase(DESC)) {
					logger.info("HibernateGenericDao-search-findAllWithPagination-SortOrder.DESC");
					return findAllWithPagination(minLimit, maxLimit, orderby,
							SortOrder.DESC);
				} else {
					logger.info("HibernateGenericDao-search-findAllWithPagination-SortOrder.ASC");
					return findAllWithPagination(minLimit, maxLimit, orderby,
							SortOrder.ASC);
				}
			} else {
				logger.info("HibernateGenericDao-search-findAllWithPagination");
				return findAllWithPagination(minLimit, maxLimit);
			}
		}
	}
	
	
	/**
	 * Get search results entity for search condition.
	 * @param sc
	 * @param maxLimit
	 * @param minLimit
	 * @return
	 */
	private List<Entity> getResultsForSearchCondition(SearchCondition<Entity> sc,Integer maxLimit,
			Integer minLimit,String orderby, String orderType) {
		logger.info("HibernateGenericDao-getResultsForSearchCondition start");
				JPATypedQueryVisitor<Entity> visitor = new JPATypedQueryVisitor<Entity>(
				getEntityManager(), getType());
		sc.accept(visitor);
		visitor.visit(sc);
		TypedQuery<Entity> typedQuery = null;
		if (orderby != null && orderType != null) {
			if (orderType.equalsIgnoreCase(DESC)) {
				logger.info("HibernateGenericDao-search-findAllWithPagination-SortOrder.DESC");
				typedQuery =visitor.getTypedQuery(orderby,orderType);
			} else {
				logger.info("HibernateGenericDao-search-findAllWithPagination-SortOrder.ASC");
				typedQuery =visitor.getTypedQuery(orderby,orderType);
			}
		}else{
				typedQuery =visitor.getTypedQuery();
			}

		if (maxLimit >= 0) {
			typedQuery.setMaxResults(maxLimit - minLimit + 1);
		}

		if (minLimit >= 0) {
			typedQuery.setFirstResult(minLimit);
		}
		logger.info("HibernateGenericDao-getResultsForSearchCondition end");
		return typedQuery.getResultList();
		
	} 

	/**
	 * Returns the record by searching Entity.
	 * 
	 * @param SearchContext
	 *            the ctx
	 * @param Integer
	 *            the maxLimit
	 * @param Integer
	 *            the minLimit
	 ** @returns a list of Entity record
	 */
	public List<Entity> search(SearchContext ctx, Integer maxLimit,
			Integer minLimit) {
		logger.info("HibernateGenericDao-search method start With param maxLimit : "+maxLimit+" , minLimit:"+minLimit);
		SearchCondition<Entity> sc = ctx.getCondition(getType());
		if (sc != null) {
			return getResultsForSearchCondition(sc,maxLimit,minLimit,null,null);
		} else {
			logger.info("HibernateGenericDao-search-findAllWithPagination");
			return findAllWithPagination(minLimit, maxLimit);
		}
	}
	
		/**
	 * Returns the audit record by searching Entity pk.
	 * 
	 * @param Pk
	 *            the pk
	 ** @returns a list of JSONObject record
	 */
	 public List<JSONObject> findAudit(Pk pk) {
		logger.info("Geting History for entity " + getClass() + "   ");
		try {
			AuditReader reader = AuditReaderFactory.get(getEntityManager());
			List<Number> revisions = reader.getRevisions(getType(), pk);
			Class objClass = getType();
			Method[] methods = objClass.getMethods();
			List<String> methodList = new ArrayList<String>();
			Method modifyByGetMethod = null;
			Method modifiedTimeMethod = null;

			for (Method method : methods) {
				methodList.add(method.getName());

				if (method.getName().replaceFirst(GET, "")
						.equalsIgnoreCase(LAST_MODIFIER)) {
					modifyByGetMethod = method;

				}
				if (method.getName().replaceFirst(GET, "")
						.equalsIgnoreCase(MODIFIED_TIME)) {
					modifiedTimeMethod = method;

				}

			}

			List<JSONObject> historyList = new ArrayList<JSONObject>();
			String changes = null;
			String changedBy = null;
			String changedTime = null;
			changes = "Created with ";
			AbstractAuditQuery queryNew1 = null;

			queryNew1 = (AbstractAuditQuery) reader.createQuery()
					.forEntitiesAtRevision(getType(), revisions.get(0))
					.add(AuditEntity.id().eq(pk));
			Object objectNew1 = queryNew1.getSingleResult();

			for (Method method : methods) {
				String name = method.getName();
				if (name.startsWith(GET) && !name.endsWith(CREATED_TIME)
						&& !name.endsWith(MODIFIED_TIME)
						&& !name.endsWith(CREATOR)
						&& !name.contains(LAST_MODIFIER)
						&& !name.contains(DOMAIN)
						&& methodList.contains(name.replaceFirst(GET, SET))) {

					if (method.invoke(objectNew1) != null) {
						if (!method.invoke(objectNew1).getClass()
								.getCanonicalName().contains("com.inn")
								|| method.invoke(objectNew1).getClass()
										.isEnum()) {

							changes += "<br/>" + name.replaceFirst(GET, "")
									+ " :"
									+ method.invoke(objectNew1).toString();

							if (modifiedTimeMethod.invoke(objectNew1) != null) {
								changedTime = ""
										+ modifiedTimeMethod.invoke(objectNew1);
							} else {
								changedTime = new Date().toString();
							}
							Method getUsernameMethod = Users.class
									.getDeclaredMethod(USERNAME_METHOD);
							if (modifyByGetMethod.invoke(objectNew1) != null) {
								changedBy = ""
										+ getUsernameMethod
												.invoke(modifyByGetMethod
														.invoke(objectNew1));
							} else {
								changedBy = ADMIN;
							}
						} else {

							Class fk_class = HibernateProxyHelper
									.getClassWithoutInitializingProxy(method
											.invoke(objectNew1));
							Method getIdentifier = fk_class
									.getDeclaredMethod(IDENTIFIER_METHOD);
							changes += "<br/>"
									+ name.replaceFirst(GET, "")
									+ " :"
									+ (String) getIdentifier.invoke(method
											.invoke(objectNew1));
							Method getUsernameMethod = Users.class
									.getDeclaredMethod(USERNAME_METHOD);
							if (modifyByGetMethod.invoke(objectNew1) != null) {
								changedBy = ""
										+ getUsernameMethod
												.invoke(modifyByGetMethod
														.invoke(objectNew1));
							} else {
								changedBy = ADMIN;
							}
							if (modifiedTimeMethod.invoke(objectNew1) != null) {
								changedTime = ""
										+ modifiedTimeMethod.invoke(objectNew1);
							} else {
								changedTime = new Date().toString();
							}
						}

					}

				}
			}
			JSONObject change = new JSONObject();

			try {
				change.put(CHANGES, changes);
				change.put(CHANGED_BY, changedBy);
				change.put(CHANGED_ON, changedTime);
				changes = null;
				changedBy = null;
				changedTime = null;
			} catch (JSONException e) {
				logger.error("Unable to create Json object for history  "
						+ e.getMessage());
			}
			for (int i = revisions.size() - 1; i > 0; i--) {
				AbstractAuditQuery queryNew = null;

				AbstractAuditQuery queryOld = null;
				try {
					queryNew = (AbstractAuditQuery) reader.createQuery()
							.forEntitiesAtRevision(getType(), revisions.get(i))
							.add(AuditEntity.id().eq(pk));
				} catch (Exception e) {
					logger.error(" Exception while create Abstract Audit Query :  ",e);
				}
				try {
					queryOld = (AbstractAuditQuery) reader
							.createQuery()
							.forEntitiesAtRevision(getType(),
									revisions.get(i - 1))
							.add(AuditEntity.id().eq(pk));
				} catch (Exception e) {
					logger.error(" Exception while create Abstract Audit Query :  ",e);
				}
				Object objectOld = null;
				if (queryOld != null) {
					objectOld = queryOld.getSingleResult();
				}

				Object objectNew = queryNew.getSingleResult();

				int k = 0;
				if (objectOld != null) {
					for (Method method : methods) {
						String name = method.getName();
						if (name.startsWith(GET)
								&& !name.endsWith(CREATED_TIME)
								&& !name.endsWith(CREATOR)
								&& !name.contains(LAST_MODIFIER)
								&& !name.endsWith(MODIFIED_TIME)
								&& !name.contains(DOMAIN)
								&& methodList.contains(name.replaceFirst(GET,
										SET))) {

							try {

								if (method.invoke(objectNew) != null
										&& method.invoke(objectOld) != null) {
									if (!method.invoke(objectNew).equals(
											method.invoke(objectOld))) {
										if (!method.invoke(objectNew)
												.getClass().getCanonicalName()
												.contains("com.inn")
												|| method.invoke(objectNew)
														.getClass().isEnum()) {
											if (k == 0) {
												changes = "changed  "
														+ name.replaceFirst(
																GET, "")
														+ "  from  "
														+ method.invoke(
																objectOld)
																.toString()
														+ "   to   "
														+ method.invoke(
																objectNew)
																.toString();
											} else {
												changes += " <br/>changed  "
														+ name.replaceFirst(
																GET, "")
														+ "  from  "
														+ method.invoke(
																objectOld)
																.toString()
														+ "   to   "
														+ method.invoke(
																objectNew)
																.toString();
											}

											changedTime = ""
													+ modifiedTimeMethod
															.invoke(objectNew);

											Method getUsernameMethod = Users.class
													.getDeclaredMethod(USERNAME_METHOD);
											changedBy = ""
													+ getUsernameMethod
															.invoke(modifyByGetMethod
																	.invoke(objectNew));

											k = 1;

										} else {

											Class fk_class = HibernateProxyHelper
													.getClassWithoutInitializingProxy(method
															.invoke(objectOld));
											Method getIdentifier = fk_class
													.getDeclaredMethod(IDENTIFIER_METHOD);

											String changeOLD = null;

											changeOLD = (String) getIdentifier
													.invoke(method
															.invoke(objectOld));

											String changeNEW = null;

											changeNEW = (String) getIdentifier
													.invoke(method
															.invoke(objectNew));

											if (!changeOLD.equals(changeNEW)) {
												if (k == 0) {
													changes = "changed "
															+ name.replaceFirst(
																	GET, "")
															+ " From   "
															+ changeOLD
															+ " to  "
															+ changeNEW;
												} else {
													changes += "<br/> changed "
															+ name.replaceFirst(
																	GET, "")
															+ " From  "
															+ changeOLD
															+ " to  "
															+ changeNEW;
												}
												Method getUsernameMethod = Users.class
														.getDeclaredMethod(USERNAME_METHOD);
												changedBy = ""
														+ getUsernameMethod
																.invoke(modifyByGetMethod
																		.invoke(objectNew));

												changedTime = ""
														+ modifiedTimeMethod
																.invoke(objectNew);

												k = 1;
											}

										}

									}
								} else if (method.invoke(objectNew) != null
										&& method.invoke(objectOld) == null) {

									if (!method.invoke(objectNew).getClass()
											.getCanonicalName()
											.contains("com.inn")
											|| method.invoke(objectNew)
													.getClass().isEnum()) {
										if (k == 0) {
											changes = "changed  "
													+ name.replaceFirst(GET, "")
													+ "  from  Null   to   "
													+ method.invoke(objectNew)
															.toString();
										} else {
											changes += " <br/>changed  "
													+ name.replaceFirst(GET, "")
													+ "  from  Null   to   "
													+ method.invoke(objectNew)
															.toString();
										}

										changedTime = ""
												+ modifiedTimeMethod
														.invoke(objectNew);

										Method getUsernameMethod = Users.class
												.getDeclaredMethod(USERNAME_METHOD);
										if (modifyByGetMethod.invoke(objectNew) != null) {
											changedBy = ""
													+ getUsernameMethod
															.invoke(modifyByGetMethod
																	.invoke(objectNew));
										}
										k = 1;
									} else {

										Class fk_class = HibernateProxyHelper
												.getClassWithoutInitializingProxy(method
														.invoke(objectNew));
										Method getIdentifier = fk_class
												.getDeclaredMethod(IDENTIFIER_METHOD);
										String changeNEW = (String) getIdentifier
												.invoke(method
														.invoke(objectNew));
										Method getUsernameMethod = Users.class
												.getDeclaredMethod(USERNAME_METHOD);
										changedBy = ""
												+ getUsernameMethod
														.invoke(modifyByGetMethod
																.invoke(objectNew));

										changedTime = ""
												+ modifiedTimeMethod
														.invoke(objectNew);

										if (k == 0) {
											changes = "changed  "
													+ name.replaceFirst(GET, "")
													+ " From    Null  to  "
													+ changeNEW;
										} else {
											changes += "<br/>changed  "
													+ name.replaceFirst(GET, "")
													+ " From  Null to  "
													+ changeNEW;
										}

										k = 1;
									}

								} else if (method.invoke(objectNew) == null
										&& method.invoke(objectOld) != null) {

									if (!method.invoke(objectOld).getClass()
											.getCanonicalName()
											.contains("com.inn")
											|| method.invoke(objectOld)
													.getClass().isEnum()) {
										if (k == 0) {
											changes = "changed  "
													+ name.replaceFirst(GET, "")
													+ "  from  "
													+ method.invoke(objectOld)
															.toString()
													+ "  to  Null";
										} else {
											changes += " <br/> "
													+ name.replaceFirst(GET, "")
													+ "  from  "
													+ method.invoke(objectOld)
															.toString()
													+ "  to  Null";
										}

										changedTime = ""
												+ modifiedTimeMethod
														.invoke(objectOld);

										Method getUsernameMethod = Users.class
												.getDeclaredMethod(USERNAME_METHOD);
										changedBy = ""
												+ getUsernameMethod
														.invoke(modifyByGetMethod
																.invoke(objectOld));
										k = 1;

									} else {

										Class fk_class = HibernateProxyHelper
												.getClassWithoutInitializingProxy(method
														.invoke(objectOld));
										Method getIdentifier = fk_class
												.getDeclaredMethod(IDENTIFIER_METHOD);
										String changeOLD = null;
										changeOLD = (String) getIdentifier
												.invoke(method
														.invoke(objectOld));
										Method getUsernameMethod = Users.class
												.getDeclaredMethod(USERNAME_METHOD);
										changedBy = ""
												+ getUsernameMethod
														.invoke(modifyByGetMethod
																.invoke(objectOld));

										changedTime = ""
												+ modifiedTimeMethod
														.invoke(objectOld);
										if (k == 0) {
											changes = "changed  "
													+ name.replaceFirst(GET, "")
													+ " From  " + changeOLD
													+ " to Null";
										} else {
											changes += "<br/> changed  "
													+ name.replaceFirst(GET, "")
													+ " From " + changeOLD
													+ " to Null";
										}
										k = 1;
									}

								}

							} catch (IllegalAccessException e) {

								logger.error("Illegal exception Found in hibernate generic Dao Method For History"
										+ e.getMessage());

							} catch (InvocationTargetException e) {

								logger.error("InvocationTargetException Found in hibernate generic Dao Method For History"
										+ e.getMessage());

							} catch (SecurityException e) {
								logger.error("Security   Exception  in hiberante generic dao"
										+ e.getMessage());

							} catch (NoSuchMethodException e) {
								logger.error("Method not found "
										+ method.getName() + e.getMessage());

							}
						}

					}

				}
				if (changes != null && changedTime != null && changedBy != null) {
					JSONObject change1 = new JSONObject();

					try {
						change1.put(CHANGES, changes);
						change1.put(CHANGED_BY, changedBy);
						change1.put(CHANGED_ON, changedTime);
						historyList.add(change1);
						changes = null;
						changedBy = null;
						changedTime = null;
					} catch (JSONException e) {
						logger.error("Unable to create Json object for history  "
								+ e.getMessage());
					}
				}
			}
			historyList.add(change);
			return historyList;

		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
		
}

