package com.inn.headstartdemo.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.math.BigInteger;
import java.util.Date;
import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import javax.persistence.NoResultException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.Query;
 
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.dao.IUsersDao;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.security.mgmt.PasswordManagementService;
import com.inn.headstartdemo.utils.BarChart;
import com.inn.headstartdemo.utils.BarChart.DataWrapperBar;
import com.inn.headstartdemo.utils.PieChart;
import com.inn.headstartdemo.utils.TrendChart;
import com.inn.headstartdemo.utils.TrendChart.DataWrapper;
/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 *Users Dao
 *
 */
@Dao
public class UsersDaoImpl extends HibernateGenericDao<Integer, Users> implements IUsersDao {
private Logger logger=LoggerFactory.getLogger(UsersDaoImpl.class);
	public UsersDaoImpl() {
		super(Users.class);
	}

	/**
	 * 
	 *method to create Users
	 *@parameter users of type Users
	 *@returns newUser
	 * 
	 */
	@Override
	public Users create(Users users) {
	logger.info("creating users by entity :"+users);
	 Date date=new Date();
	 users.setModifiedTime(date);
	 users.setCreatedTime(date);
		Users newusers = super.create(users);
		addSOXCompliance(newusers);
		return newusers;
	}
		/**
	 * 
	 *method to update Users record
	 *@parameter users of type Users
	 *@returns Update User
	 * 
	 */
	@Override
	public Users update(Users users) {
	logger.info("updating users by entity :"+users);
	 Users entityUsers=findByPk(users.getUserid());
	Date date=new Date();
	 users.setModifiedTime(date);
	 users.setCreatedTime(entityUsers.getCreatedTime());
		return super.update(users);
	}

	/**
	 * 
	 *method to delete Users
	 *@parameter users of type Users
	 * 
	 */
	@Override
	public void delete(Users users) {
	logger.info("Deleting users by entity :"+users);
		super.delete(users);
	}

	/**
	 * 
	 *method to delete Users entity by PrimaryKey
	 *@parameter usersPk of type integer
	 * 
	 */
	@Override
	public void deleteByPk(Integer usersPk) {
	logger.info("Deleting  users by primary key :"+usersPk);
		super.deleteByPk(usersPk);
	}

	/**
	 * 
	 *method to find all users
	 *@returns list of Users
	 * 
	 */
	@Override
	public List<Users> findAll()throws NoResultException,EmptyResultDataAccessException {
		return super.findAll();
	}

	/**
	 * 
	 *method to find Users entity by PrimaryKey
	 *@parameter usersPk of type integer
	 *@returns find Users by primaryKey
	 * 
	 */
	@Override
	public Users findByPk(Integer usersPk) throws NoResultException,EmptyResultDataAccessException{
	logger.info("finding  users by primary key :"+usersPk);
		return (super.findByPk(usersPk));
	}
	
	private void addSOXCompliance(Users user) {			
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("provisionedUser", user.getUsername());
				passwordManagementService.AddSOXCompliance(params);		
	}

	/**
	 * 
	 *method to find Users detail by UserName
	 *@parameter userdetails of type String
	 *@returns User
	 * 
	 */	
	@Autowired(required=true)
	private PasswordManagementService passwordManagementService;
		
	public Users findByUserName(String userdetails){
		
	try{ logger.debug("Finding users by Userdetails:"+userdetails);
			Query query =getEntityManager().createNamedQuery("findByUserName").setParameter("username", userdetails);
		    Users user =(Users) query.getSingleResult();
		    return user;
		}catch(Exception e){
		logger.error("Finding users by Userdetails:"+userdetails);
		logger.error(""+e.getMessage());
			return null;
		}
	
		
	}	
		/**
	 * 
	 *method to Find locked/unlocked User by username
	 *@parameter username of type String
	 *@returns Users Status
	 * 
	 */	
	public Boolean findByUser(String username) {
	        logger.info("Finding users status by username:"+username);
              Query query = this.getEntityManager().createNativeQuery("select locked from password_expiry_details where username = :username").setParameter("username", username);
               	              Byte  lock = (Byte) query.getSingleResult();
	              
	              if (lock==1){
	                     return true;
	              }
                            return false ;
       }
     public Users findByEmail(String email){
		
		try{ logger.debug("Finding users by EmailID:"+email);
				Query query =getEntityManager().createNamedQuery("findByEmail").setParameter("email", email);
			    Users user =(Users) query.getSingleResult();
			    return user;
			}catch(Exception e){
			logger.error("Finding users by EmailID:"+email);
			logger.error(""+e.getMessage());
				return null;
			}
		
			
		}	
       
	/**
	 * 
	 *method to update User  status locked/unlocked by username
	 *@parameter username of type String
	 *@returns updated User Status
	 */
       public Boolean unLock(String username) {
       logger.info("Updating users status by username:"+username);
              Query query = this.getEntityManager().createNativeQuery("update password_expiry_details set locked=0,failed_attempts=0 where username = :username ").setParameter("username", username);
              Query query2 = this.getEntityManager().createNativeQuery("update password_feature_config set first_time_change=0 where username = :username ").setParameter("username", username);
              query2.executeUpdate();
              Integer  lock = (Integer) query.executeUpdate();
              if (lock==1){
                     return true;
              }
              return false ;
       }


        	public List<PieChart> getordersorder_statusStatusPieChart() {
   		Session session = (Session) getEntityManager().getDelegate();

				org.hibernate.Query query  =session.createSQLQuery("SELECT count(*) as count , order_status as status FROM  orders  o group by order_status");
   		
			   		List<PieChart> obj=new java.util.ArrayList<PieChart>();
   		java.util.Iterator it=query.list().iterator();
   		while(it.hasNext())
   		{	PieChart pieChart=new PieChart();
   			Object[] obj1=(Object[])it.next();
   			pieChart.setCount(((BigInteger)obj1[0]).longValue());
   			pieChart.setStatus((String) obj1[1]);
   			pieChart.setLabel("orders Status Classification");
   			obj.add(pieChart);
   			
   		}
   		return obj;
   	}

	

        	public List<PieChart> getcustomerprioritystatusEnumPieChart() {
   		Session session = (Session) getEntityManager().getDelegate();
		org.hibernate.Query query  =session.createSQLQuery("SELECT count(*) as count ,prioritystatus  as status FROM customer o group by prioritystatus");
	   		List<PieChart> obj=new java.util.ArrayList<PieChart>();
   		java.util.Iterator it=query.list().iterator();
   		while(it.hasNext())
   		{	PieChart pieChart=new PieChart();
   			Object[] obj1=(Object[])it.next();
   			pieChart.setCount(((BigInteger)obj1[0]).longValue());
   			pieChart.setStatus((String) obj1[1]);
   			pieChart.setLabel("customer Status Classification");
   			obj.add(pieChart);
   			
   		}
   		return obj;
   	}

	   	public List<PieChart> getproductproductlineEnumPieChart() {
   		Session session = (Session) getEntityManager().getDelegate();
		org.hibernate.Query query  =session.createSQLQuery("SELECT count(*) as count ,productline  as status FROM product o group by productline");
	   		List<PieChart> obj=new java.util.ArrayList<PieChart>();
   		java.util.Iterator it=query.list().iterator();
   		while(it.hasNext())
   		{	PieChart pieChart=new PieChart();
   			Object[] obj1=(Object[])it.next();
   			pieChart.setCount(((BigInteger)obj1[0]).longValue());
   			pieChart.setStatus((String) obj1[1]);
   			pieChart.setLabel("product Status Classification");
   			obj.add(pieChart);
   			
   		}
   		return obj;
   	}

	  
   	
        	public BarChart getTrendBarChartForemployee() {
   		Session session = (Session) getEntityManager().getDelegate();

				org.hibernate.Query query =session.createSQLQuery("SELECT count(e.lastName) as count,o.city_name from employee e inner join office o on e.officeid=o.officeCode group by (o.city_name)");
   		
				BarChart trendChart=new BarChart();
   		java.util.Iterator it=query.list().iterator();
   		List<DataWrapperBar> data=new java.util.ArrayList<DataWrapperBar>();
   		while(it.hasNext())
   		{	DataWrapperBar pieChart=new DataWrapperBar();
   			Object[] obj1=(Object[])it.next();
   			pieChart.setCount(obj1[0].toString());
   			pieChart.setName(obj1[1].toString());
   			data.add(pieChart);
   		}
   		trendChart.setData(data);
   		trendChart.setXtitle("employee");
   		trendChart.setYtitle("office");
   		trendChart.setChartTitle("employee/office");
   		
   		return trendChart;
   	
   	}
   		
  
		public TrendChart getTrendLineChartForpayment(String trendType) {
   		Session session = (Session) getEntityManager().getDelegate();
   					org.hibernate.Query query =session.createSQLQuery("SELECT p.payment_date,sum(amount),avg(amount),count(*) FROM payment p group by "+trendType+"(payment_date)");
   			
			
		TrendChart trendChart=new TrendChart();
   		java.util.Iterator it=query.list().iterator();
   		List<DataWrapper> data=new java.util.ArrayList<TrendChart.DataWrapper>();
   		while(it.hasNext())
   		{	DataWrapper pieChart=new DataWrapper();
   			Object[] obj1=(Object[])it.next();
   			pieChart.setAvg(obj1[2].toString());
   			pieChart.setSum(obj1[1].toString());
   			pieChart.setCount(obj1[3].toString());
   			pieChart.setDate((Date)obj1[0]);
   			data.add(pieChart);
   		}
   		trendChart.setData(data);
   		trendChart.setXtitle("payment_date");
   		trendChart.setYtitle("amount");
   		trendChart.setChartTitle("payment ");
   		return trendChart;
   	}
	}

