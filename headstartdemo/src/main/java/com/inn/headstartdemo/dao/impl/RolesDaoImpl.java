package com.inn.headstartdemo.dao.impl;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import javax.persistence.Query;

import com.inn.headstartdemo.dao.IRolesDao;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.model.Roles;
import com.inn.headstartdemo.exceptions.ExceptionHandler;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 * Roles Dao
 *
 */
@Dao
@ExceptionHandler
public class RolesDaoImpl extends HibernateGenericDao<Long, Roles> implements IRolesDao {
private Logger logger=LoggerFactory.getLogger(RolesDaoImpl.class);
	public RolesDaoImpl() {
		super(Roles.class);
	}
	
	/**
	 * 
	 *method to create roles for user 
	 *@param roles of type Roles
	 *@return roles
	 *
	 */
	@Override
	@ExceptionHandler
	public Roles create(Roles roles) throws DataAccessException{
	logger.info("Creating Roles by roles :"+roles);
		return super.create(roles);
	}

	/**
	 * 
	 *method to update roles 
	 *@param roles of type Roles 
	 *@return update roles
	 *
	 */
	@Override
	@ExceptionHandler
	public Roles update(Roles roles) throws DataAccessException{
	logger.info("Updating Roles by roles :"+roles);
		return super.update(roles);
	}

	/**
	 * 
	 *method to delete roles 
	 *@param roles of type Roles  
	 *
	 */
	@Override
	@ExceptionHandler
	public void delete(Roles roles) throws DataAccessException{
	logger.info("Deleting Roles by roles :"+roles);
		super.delete(roles);
	}

	/**
	 * 
	 *method to delete roles
	 *@param roles of type Roles   
	 *
	 */
	@Override
	@ExceptionHandler
	public void deleteByPk(Long rolesPk) throws DataAccessException{
	logger.info("Deleting Roles by rolesPk :"+rolesPk);
		super.deleteByPk(rolesPk);
	}

	/**
	 * 
	 *method to find all roles
	 *@return roles
	 *
	 */
	@ExceptionHandler
	@Override
	public List<Roles> findAll() throws DataAccessException{
		return super.findAll();
	}

	/**
	 * 
	 *method to find role by primarykey 
	 *@param rolesPk of type Long
	 *@return role
	 *
	 */
	@ExceptionHandler
	@Override
	public Roles findByPk(Long rolesPk) throws DataAccessException{
	logger.info("Finding Roles by rolesPk :"+rolesPk);
		return (super.findByPk(rolesPk));
	}

	/**
	 * 
	 *method to get roles of user by userid 
	 *@param userId of type Integer
	 *@return roles
	 *
	 */	
	@ExceptionHandler
	public List<Roles> getRolesByUserId(Integer userId)  {
	logger.info("Getting Roles of user by UserId :"+userId);	
			return null;
		
	}
	 public Long getTotalCount(){
	 		return ((Long)this.getEntityManager().createQuery("select count(x) from Roles x").getSingleResult());		
			
	}
	
	
	 public List<Roles> getRolesByRolename(String rolename){
	 			Query query=getEntityManager().createNamedQuery("getRolesByRolename").setParameter("rolename", rolename);
	 			List<Roles> roles=query.getResultList();
			if(!roles.isEmpty() && roles!=null)
			return roles;
			else
			return null;			
	 }
	

}
