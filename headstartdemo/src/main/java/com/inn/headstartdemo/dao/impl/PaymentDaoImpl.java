package com.inn.headstartdemo.dao.impl;

import java.math.BigInteger;
import java.util.List;


import javax.persistence.Query;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;


import com.inn.headstartdemo.model.Payment;
import java.lang.Long;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.dao.IPaymentDao;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import javax.persistence.NoResultException;
import com.inn.headstartdemo.exceptions.ExceptionHandler;
import com.inn.headstartdemo.exceptions.ValueNotFoundException;


/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
 
/**
 * 
 *Dao 
 * 
 */
@ExceptionHandler @Dao
public class PaymentDaoImpl extends HibernateGenericDao<Long, Payment> implements IPaymentDao {
	
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(PaymentDaoImpl.class);
	
	
	public PaymentDaoImpl() {
		super(Payment.class);
	}

	    
	/**
	 * 
	 *Returns the new Payment record
	 *@parameter payment of type  Payment
	 *@returns a new Payment
	 * 
	 */
	@ExceptionHandler @Override
	public Payment create(@Valid Payment payment)throws DataAccessException {
	
	logger.info("Create record by an entity :"+payment);
	Payment newEntity=super.create(payment);
	
	return newEntity;
	}

	/**
	 * 
	 *Returns the updated Payment record
	 *@parameter anEntity of type  Payment
	 *@returns a updated Payment record
	 * 
	 */
	@ExceptionHandler @Override
	public Payment update(@Valid Payment payment) throws DataAccessException {
	logger.info("update record by an entity :"+payment);
		
		
		return super.update(payment);
	}

	/**
	 * 
	 *Method to remove Payment record
	 *@parameter payment of type  Payment
	 * 
	 */
	@ExceptionHandler @Override
	public void delete(@Valid Payment payment) throws DataAccessException {
	logger.info("Deleting record by an entity :"+payment);

		super.delete(payment);

	}
	

	/**
	 * 
	 *Method to remove Payment record by primary key
	 *@parameter primary key of type Long  
	 * 
	 */
	@ExceptionHandler @Override
	public void deleteByPk(@NotNull Long longPk) throws DataAccessException{
	logger.info("Deleting record by primary key :"+longPk);
		
		super.deleteByPk(longPk);

	}
	
	/**
	 * 
	 *Returns the list of Payment record 
	 *@returns  Payment record
	 * 
	 */
	@ExceptionHandler @Override
	public List<Payment> findAll() throws NoResultException,EmptyResultDataAccessException{
		return super.findAll();
	}
	
	/**
	 * 
	 *Returns  the record of Payment  finding by primary key 
	 *@parameter primary key  of type Long
	 *@returns a Payment record
	 * 
	 */
	@ExceptionHandler @Override
	public Payment findByPk(@NotNull Long longPk) throws NoResultException,EmptyResultDataAccessException{
	logger.info("Find record by Primary Key :"+longPk);
	
		return super.findByPk(longPk);
	}

	
		
		
		
	@ExceptionHandler public Long getTotalCount(){
			return ((Long)this.getEntityManager().createQuery("select count(x) from Payment x  ").getSingleResult());		
		}
}
