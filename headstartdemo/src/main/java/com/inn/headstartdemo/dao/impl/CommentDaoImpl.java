 package com.inn.headstartdemo.dao.impl;

import java.util.List;

import javax.persistence.Query;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inn.headstartdemo.exceptions.ValueNotFoundException;
import com.inn.headstartdemo.dao.ICommentDao;
import com.inn.headstartdemo.dao.annotation.Dao;
import com.inn.headstartdemo.dao.generic.impl.HibernateGenericDao;
import com.inn.headstartdemo.model.Comment;
import com.inn.headstartdemo.model.Customer;
import com.inn.headstartdemo.model.Office;
import org.springframework.dao.DataAccessException;
import org.hibernate.exception.ConstraintViolationException;
import org.springframework.dao.DataIntegrityViolationException;

/**
 * 
 * @author Auto Generated By HeadStart
 * @version 1.0
 *
 */
/**
 * 
 * CommentDao 
 *
 */
@Dao
public class CommentDaoImpl extends HibernateGenericDao<Long, Comment> implements ICommentDao {
	/** The logger. */
	private static Logger logger=LoggerFactory.getLogger(CommentDaoImpl.class);
	
	/**
	 * Instantiates a new comment dao impl.
	 */
	public CommentDaoImpl() {
		super(Comment.class);
	}

    /**
	 * 
	 *Returns the new Comment record 
	 *@parameter valid Commententity 
	 *@returns a new Comment record
	 * 
	 */
	@Override
	public Comment create(@Valid Comment comment) throws DataAccessException{
		logger.debug("creating new comment "+comment.getComment());
		return super.create(comment);
	}


    /**
	 * 
	 *Returns the updated Comment record 
	 *@parameter  valid Commententity  
	 *@returns a updated Comment record
	 * 
	 */
	@Override
	public Comment update(@Valid Comment comment)throws DataAccessException {
		logger.debug("updating comment having id : "+comment.getId());
		return super.update(comment);
	}


	/**
	 * 
	 *Method to remove Comment 
	 *@parameter  Commententity  
	 * 
	 */	
	@Override
	public void delete(Comment comment) throws DataAccessException{
		logger.debug("deleting comment having id : "+comment.getId());
		super.delete(comment);
	}

	/**
	 * 
	 *Method to remove Comment 
	 *@parameter  primary key of type Long  
	 * 
	 */	
	@Override
	public void deleteByPk(Long commentPk)throws DataAccessException {
		logger.debug("deleting comment by pk : "+commentPk);
		super.deleteByPk(commentPk);
	}


    /**
	 *Returns the List of  Comment 
	 *@parameter Comment 
	 *@returns a list of Comment 
	 * 
	 */	
	@Override
	public List<Comment> findAll()throws DataAccessException {
		logger.debug("finding all comments ");
		return super.findAll();
	}


	/**
	 *  
	 *Returns the Comment record by searching using primary key
	 *@parameter primary key of type Long
	 *@returns  a Comment record 
	 * 
	 */	
	@Override
	public Comment findByPk(Long commentPk) throws DataAccessException{
		logger.debug("finding comments by pk "+commentPk);
		return super.findByPk(commentPk);
	}

			@Override
		public Long customerCommentCount(Customer customer){
			return (Long)this.getEntityManager().createNamedQuery("getCommentCountByCustomer").setParameter("customer", customer).getSingleResult();
			
		}
			@Override
		public Long officeCommentCount(Office office){
			return (Long)this.getEntityManager().createNamedQuery("getCommentCountByOffice").setParameter("office", office).getSingleResult();
			
		}
		
}
