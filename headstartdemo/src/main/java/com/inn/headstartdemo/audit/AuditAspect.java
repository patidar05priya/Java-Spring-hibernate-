
package com.inn.headstartdemo.audit;

import java.lang.reflect.InvocationTargetException;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.inn.headstartdemo.model.Audit;
import com.inn.headstartdemo.model.Users;
import com.inn.headstartdemo.security.spring.CustomerInfo;
import com.inn.headstartdemo.service.IAuditService;
import com.inn.headstartdemo.service.IUsersService;
import com.inn.headstartdemo.security.spring.context.ContextProvider;
import com.inn.headstartdemo.utils.ClassUtils;
import java.lang.annotation.Annotation;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
/**
 * 
 * @author Autogenerated by Headstart
 * @version 1.0
 *
 */ 

@Aspect
@Component
public class AuditAspect
{
	/** The logger. */
	private Logger logger=LoggerFactory.getLogger(AuditAspect.class);
	
	/**The audit  service*/
	@Autowired
	private IAuditService	auditService;
	
	/** The user service*/
	@Autowired
	private IUsersService userService;
	

	/**
	 * Audit 
	 * @param pjp
	 * @param auditable
	 * @return
	 * @throws Throwable
	 */
	@Around("@annotation(auditable)")
	public Object doAudit(ProceedingJoinPoint pjp, Auditable auditable) throws Throwable
	{	return doAudit(pjp, auditable.actionType(),auditable.actionName());
	}
	
	/**
	 * 
	 * @param pjp
	 * @param auditActionType
	 * @param auditActionName 
	 * @return
	 * @throws Throwable
	 */
	private Object doAudit(ProceedingJoinPoint pjp, AuditActionType auditActionType, AuditActionName auditActionName) throws Throwable
	{
		Object returnObject;
		
		boolean isAuditable = isAuditable(pjp) && isAuditEnabled(auditActionType);

		Users user = getUser();
		
		try
		{
			returnObject = pjp.proceed();
		}
		catch (Exception t)
		{
			if (isAuditable)
			{
			    logger.info("is AUDIT___SERVICE null : {}",(auditService==null));
				Audit audit =createAudit(user, Boolean.FALSE, auditActionType, pjp,auditActionName);
				audit.setExceptionDetails(t.getClass()+"  "+"Message:"+t.getMessage());
				getAuditService().doAudit(audit);
			}
			
			throw t;
		}
		
		if (isAuditable)
		{try{
			getAuditService().doAudit(createAudit(user, Boolean.TRUE, auditActionType, pjp,auditActionName));
		}
		catch  (Exception t1)
		{
			logger.error(""+t1.getMessage());
			
		}
		}
		

		
		return returnObject;		
	}
	
	/**
	 * Is audit type enabled
	 * @param actionType
	 * @return
	 */
	private boolean isAuditEnabled(AuditActionType actionType)
	{


        return true ;

    }
	
	/**
	 * Check if type is annotated with NonAuditable annotation
	 * @param pjp
	 * @return
	 */
	private boolean isAuditable(ProceedingJoinPoint pjp)
	{
		Annotation[] annotations = pjp.getSignature().getDeclaringType().getAnnotations();

		boolean nonAuditable = false;
		
		for (Annotation annotation : annotations)
		{
			nonAuditable = annotation.annotationType() == NonAuditable.class;
			
			if (nonAuditable)
			{
				break;
			}
		}
		
		return !nonAuditable;
	}
	
	/**
	 * 
	 * @return
	 */
	private Users getUser()
	{
		
		
		return CustomerInfo.getUserInContext();
	}

	/**
	 * 
	 * @param user
	 * @param success
	 * @param action
	 * @param pjp
	 * @param auditActionName 
	 * @return
	 */
	private Audit createAudit(Users user, Boolean success, AuditActionType auditActionType, ProceedingJoinPoint pjp, AuditActionName auditActionName)
	{
		String parameters = getAuditParameters(auditActionName,pjp);
		
		String page = null;
		

		Audit audit = new Audit();
		audit.setUser(user);
		audit.setUserFullName(user != null ? user.getUsername() : null);
		audit.setDate(new Date());
		audit.setSuccess(success);
						
				audit.setAction(pjp.getSignature().toShortString());
		audit.setAuditActionType(auditActionType);
		audit.setParameters(parameters);
		audit.setPage(page);
		audit.setAuditActionName(auditActionName);
		if(getRequest()!=null){
			audit.setUserAgent(getRequest().getHeader("user-agent"));
			audit.setRemoteHost(getRequest().getRemoteHost());
			audit.setSessionid(getRequest().getSession().getId());
			audit.setHost(getRequest().getLocalAddr()+":"+getRequest().getLocalPort());
		}
		
		return audit;
	}
	
	/**
	 * Get parameters of advised method
	 * @param pjp
	 * @return
	 */
	private String getAuditParameters(AuditActionName auditActionName,ProceedingJoinPoint pjp)
	{
		String var=pjp.getSignature().toLongString();
	    String sub=var.substring((var.indexOf('(')+1),var.indexOf(')') );
	    if(sub.contains(","))
	    {
	    	String s[]=sub.split(",");
	    	sub=s[0].trim();
	    }
		StringBuilder parameters = new StringBuilder();
		if(auditActionName.equals(AuditActionName.LOGIN))
		{
			parameters.append("Loggedin");
		}
		else		if(auditActionName.equals(AuditActionName.LOGOUT))
		{
			parameters.append("LoggedOut");
		}
		else
		{
		int count=0;
		for (Object object : pjp.getArgs())
		{Class cs = null;
		try {
			cs = Class.forName(sub);
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			  logger.error(e1.getMessage());
		}
		java.lang.reflect.Method[] m=cs .getMethods();
		if(cs.getName().equalsIgnoreCase("java.lang.String")||cs.getName().equalsIgnoreCase("java.lang.Integer")||cs.getName().equalsIgnoreCase("java.lang.Double")||cs.getName().equalsIgnoreCase("java.lang.Long")||cs.getName().equalsIgnoreCase("java.lang.Float"))
		{
		    MethodSignature sig = (MethodSignature)pjp.getSignature();
			String[] name=sig.getParameterNames();
			if(name!=null)
			{
				parameters.append(name[count]+" : "+object.toString()+"  ");
				count++;
			}
		}else{
		for (java.lang.reflect.Method method:m)
	    {	
	    	String name=method.getName(); 
		if(!name.endsWith("Password")&&!name.endsWith("Identifier")&&name.startsWith("get")&&!name.endsWith("CreatedTime")&&!name.endsWith("ModifiedTime"))
	    {
	    
		try {
			if(method.invoke(object)!=null)
			{		if(ClassUtils.isSimpleType(method.invoke(object).getClass()))
			{
			parameters.append(method.getName().substring(3,method.getName().length() )+":"+method.invoke(object)+", ");
			}
			}
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			  logger.error(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
		  logger.error(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			  logger.error(e.getMessage());
		}
	    }}}
	}
		}
			return parameters.toString();
	
}
	
	/**
	 * @param auditService the auditService to set
	 */
	public void setAuditService(IAuditService auditService)
	{
		this.auditService = auditService;
	}
	/**
	 * 
	 * @return IAuditService
	 */
	public IAuditService getAuditService(){
		if(auditService==null){
			auditService=  ContextProvider.getContext().getBean(IAuditService.class);
		}
	return auditService;
	}
	/**
	 * 
	 * @return IAuditService
	 */
	public IUsersService getUserService(){
		if(userService==null){
			userService =  ContextProvider.getContext().getBean(IUsersService.class);
		}
		return userService;
	}
	public HttpServletRequest getRequest(){
		HttpServletRequest serv = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
			.getRequest();
		return serv ;
	}
}
