#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	rankdir=LR;
	// org.apache.cxf.jaxrs.utils.InjectionUtils
	c8924 [label=<<table title="org.apache.cxf.jaxrs.utils.InjectionUtils" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./InjectionUtils.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> InjectionUtils </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isConcreteClass(cls : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSuperType(serviceClass : Class&lt;?&gt;, var : TypeVariable&lt;?&gt;) : Type </td></tr>
<tr><td align="left" balign="left"> + checkProxy(methodToInvoke : Method, resourceObject : Object) : Method </td></tr>
<tr><td align="left" balign="left"> + injectFieldValue(f : Field, o : Object, v : Object) </td></tr>
<tr><td align="left" balign="left"> + extractFieldValue(f : Field, o : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + getActualType(genericType : Type) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getActualType(genericType : Type, pos : int) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getType(types : Type[], pos : int) : Type </td></tr>
<tr><td align="left" balign="left"> + getRawType(genericType : Type) : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getActualTypes(genericType : Type) : Type[] </td></tr>
<tr><td align="left" balign="left"> + injectThroughMethod(requestObject : Object, method : Method, parameterValue : Object) </td></tr>
<tr><td align="left" balign="left"> + extractFromMethod(requestObject : Object, method : Method) : Object </td></tr>
<tr><td align="left" balign="left"> + handleParameter(value : String, decoded : boolean, pClass : Class&lt;T&gt;, paramAnns : Annotation[], pType : ParameterType, message : Message) : T </td></tr>
<tr><td align="left" balign="left"> + reportServerError(messageName : String, parameter : String) </td></tr>
<tr><td align="left" balign="left"> + handleBean(paramType : Class&lt;?&gt;, paramAnns : Annotation[], values : MultivaluedMap&lt;String, String&gt;, pType : ParameterType, message : Message, decoded : boolean) : Object </td></tr>
<tr><td align="left" balign="left"> + isSupportedCollectionOrArray(type : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + createParameterObject(paramValues : List&lt;String&gt;, paramType : Class&lt;?&gt;, genericType : Type, paramAnns : Annotation[], defaultValue : String, decoded : boolean, pathParam : ParameterType, message : Message) : Object </td></tr>
<tr><td align="left" balign="left"> + createThreadLocalProxy(type : Class&lt;T&gt;) : ThreadLocalProxy&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + injectContextProxiesAndApplication(cri : AbstractResourceInfo, instance : Object, app : Application) </td></tr>
<tr><td align="left" balign="left"> + injectContextProxies(cri : AbstractResourceInfo, instance : Object) </td></tr>
<tr><td align="left" balign="left"> + injectContextField(cri : AbstractResourceInfo, f : Field, o : Object, value : Object) </td></tr>
<tr><td align="left" balign="left"> + injectContexts(requestObject : Object, resource : AbstractResourceInfo, message : Message) </td></tr>
<tr><td align="left" balign="left"> + injectContextMethods(requestObject : Object, cri : AbstractResourceInfo, message : Message) </td></tr>
<tr><td align="left" balign="left"> + injectContextFields(o : Object, cri : AbstractResourceInfo, m : Message) </td></tr>
<tr><td align="left" balign="left"> + extractValuesFromBean(bean : Object, baseName : String) : MultivaluedMap&lt;String, Object&gt; </td></tr>
<tr><td align="left" balign="left"> + fillInValuesFromBean(bean : Object, baseName : String, values : MultivaluedMap&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + getParametersFromBeanClass(beanClass : Class&lt;?&gt;, type : ParameterType, checkIgnorable : boolean) : Map&lt;Parameter, Class&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + isPrimitive(type : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + decodeValue(value : String, decode : boolean, param : ParameterType) : String </td></tr>
<tr><td align="left" balign="left"> + invokeLifeCycleMethod(instance : Object, method : Method) </td></tr>
<tr><td align="left" balign="left"> + convertStringToPrimitive(value : String, cls : Class&lt;?&gt;) : Object </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

