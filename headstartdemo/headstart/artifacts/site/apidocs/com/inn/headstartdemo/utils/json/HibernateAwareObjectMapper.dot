#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	rankdir=LR;
	// com.inn.headstartdemo.utils.json.HibernateAwareObjectMapper
	c58445 [label=<<table title="com.inn.headstartdemo.utils.json.HibernateAwareObjectMapper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./HibernateAwareObjectMapper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HibernateAwareObjectMapper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setPrettyPrint(prettyPrint : boolean) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//com.inn.headstartdemo.utils.json.HibernateAwareObjectMapper extends org.codehaus.jackson.map.ObjectMapper
	c58528:p -> c58445:p [dir=back,arrowtail=empty];
	// org.codehaus.jackson.map.ObjectMapper
	c58528 [label=<<table title="org.codehaus.jackson.map.ObjectMapper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/org/codehaus/jackson/map/ObjectMapper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObjectMapper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + version() : Version </td></tr>
<tr><td align="left" balign="left"> + setSerializerFactory(arg0 : SerializerFactory) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + setSerializerProvider(arg0 : SerializerProvider) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getSerializerProvider() : SerializerProvider </td></tr>
<tr><td align="left" balign="left"> + setDeserializerProvider(arg0 : DeserializerProvider) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getDeserializerProvider() : DeserializerProvider </td></tr>
<tr><td align="left" balign="left"> + setNodeFactory(arg0 : JsonNodeFactory) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getVisibilityChecker() : VisibilityChecker&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + setVisibilityChecker(arg0 : VisibilityChecker&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + getSubtypeResolver() : SubtypeResolver </td></tr>
<tr><td align="left" balign="left"> + setSubtypeResolver(arg0 : SubtypeResolver) </td></tr>
<tr><td align="left" balign="left"> + registerSubtypes(arg0 : Class&lt;?&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + registerSubtypes(arg0 : NamedType[]) </td></tr>
<tr><td align="left" balign="left"> + registerModule(arg0 : Module) </td></tr>
<tr><td align="left" balign="left"> + getSerializationConfig() : SerializationConfig </td></tr>
<tr><td align="left" balign="left"> + copySerializationConfig() : SerializationConfig </td></tr>
<tr><td align="left" balign="left"> + setSerializationConfig(arg0 : SerializationConfig) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + configure(arg0 : SerializationConfig.Feature, arg1 : boolean) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getDeserializationConfig() : DeserializationConfig </td></tr>
<tr><td align="left" balign="left"> + copyDeserializationConfig() : DeserializationConfig </td></tr>
<tr><td align="left" balign="left"> + setDeserializationConfig(arg0 : DeserializationConfig) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + configure(arg0 : DeserializationConfig.Feature, arg1 : boolean) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getJsonFactory() : JsonFactory </td></tr>
<tr><td align="left" balign="left"> + configure(arg0 : JsonParser.Feature, arg1 : boolean) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + configure(arg0 : JsonGenerator.Feature, arg1 : boolean) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + getNodeFactory() : JsonNodeFactory </td></tr>
<tr><td align="left" balign="left"> + enableDefaultTyping() : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + enableDefaultTyping(arg0 : ObjectMapper.DefaultTyping) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + enableDefaultTyping(arg0 : ObjectMapper.DefaultTyping, arg1 : JsonTypeInfo.As) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + enableDefaultTypingAsProperty(arg0 : ObjectMapper.DefaultTyping, arg1 : String) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + disableDefaultTyping() : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + setDefaltTyping(arg0 : TypeResolverBuilder&lt;?&gt;) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + setDefaultTyping(arg0 : TypeResolverBuilder&lt;?&gt;) : ObjectMapper </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : Class&lt;T&gt;, arg2 : DeserializationConfig) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : TypeReference&lt;?&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : TypeReference&lt;?&gt;, arg2 : DeserializationConfig) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonParser, arg1 : JavaType, arg2 : DeserializationConfig) : T </td></tr>
<tr><td align="left" balign="left"> + readTree(arg0 : JsonParser) : JsonNode </td></tr>
<tr><td align="left" balign="left"> + readTree(arg0 : JsonParser, arg1 : DeserializationConfig) : JsonNode </td></tr>
<tr><td align="left" balign="left"> + readTree(arg0 : InputStream) : JsonNode </td></tr>
<tr><td align="left" balign="left"> + readTree(arg0 : Reader) : JsonNode </td></tr>
<tr><td align="left" balign="left"> + readTree(arg0 : String) : JsonNode </td></tr>
<tr><td align="left" balign="left"> + writeValue(arg0 : JsonGenerator, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + writeValue(arg0 : JsonGenerator, arg1 : Object, arg2 : SerializationConfig) </td></tr>
<tr><td align="left" balign="left"> + writeTree(arg0 : JsonGenerator, arg1 : JsonNode) </td></tr>
<tr><td align="left" balign="left"> + writeTree(arg0 : JsonGenerator, arg1 : JsonNode, arg2 : SerializationConfig) </td></tr>
<tr><td align="left" balign="left"> + createObjectNode() : ObjectNode </td></tr>
<tr><td align="left" balign="left"> + createArrayNode() : ArrayNode </td></tr>
<tr><td align="left" balign="left"> + treeAsTokens(arg0 : JsonNode) : JsonParser </td></tr>
<tr><td align="left" balign="left"> + treeToValue(arg0 : JsonNode, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + valueToTree(arg0 : Object) : T </td></tr>
<tr><td align="left" balign="left"> + canSerialize(arg0 : Class&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + canDeserialize(arg0 : JavaType) : boolean </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : File, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : File, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : File, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : URL, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : URL, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : URL, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : String, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : String, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : String, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : Reader, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : Reader, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : Reader, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : InputStream, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : InputStream, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : InputStream, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : byte[], arg1 : int, arg2 : int, arg3 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : byte[], arg1 : int, arg2 : int, arg3 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : byte[], arg1 : int, arg2 : int, arg3 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonNode, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonNode, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + readValue(arg0 : JsonNode, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + writeValue(arg0 : File, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + writeValue(arg0 : OutputStream, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + writeValue(arg0 : Writer, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> + writeValueAsString(arg0 : Object) : String </td></tr>
<tr><td align="left" balign="left"> + writeValueAsBytes(arg0 : Object) : byte[] </td></tr>
<tr><td align="left" balign="left"> + writeValueUsingView(arg0 : JsonGenerator, arg1 : Object, arg2 : Class&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + writeValueUsingView(arg0 : Writer, arg1 : Object, arg2 : Class&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + writeValueUsingView(arg0 : OutputStream, arg1 : Object, arg2 : Class&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + writer() : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + viewWriter(arg0 : Class&lt;?&gt;) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + typedWriter(arg0 : Class&lt;?&gt;) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + typedWriter(arg0 : JavaType) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + typedWriter(arg0 : TypeReference&lt;?&gt;) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + prettyPrintingWriter(arg0 : PrettyPrinter) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + defaultPrettyPrintingWriter() : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + filteredWriter(arg0 : FilterProvider) : ObjectWriter </td></tr>
<tr><td align="left" balign="left"> + reader() : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + updatingReader(arg0 : Object) : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + reader(arg0 : JavaType) : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + reader(arg0 : Class&lt;?&gt;) : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + reader(arg0 : TypeReference&lt;?&gt;) : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + reader(arg0 : JsonNodeFactory) : ObjectReader </td></tr>
<tr><td align="left" balign="left"> + convertValue(arg0 : Object, arg1 : Class&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + convertValue(arg0 : Object, arg1 : TypeReference&lt;&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + convertValue(arg0 : Object, arg1 : JavaType) : T </td></tr>
<tr><td align="left" balign="left"> + generateJsonSchema(arg0 : Class&lt;?&gt;) : JsonSchema </td></tr>
<tr><td align="left" balign="left"> + generateJsonSchema(arg0 : Class&lt;?&gt;, arg1 : SerializationConfig) : JsonSchema </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

