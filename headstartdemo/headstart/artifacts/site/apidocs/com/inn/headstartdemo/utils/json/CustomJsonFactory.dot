#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.1 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	rankdir=LR;
	// com.inn.headstartdemo.utils.json.CustomJsonFactory
	c58721 [label=<<table title="com.inn.headstartdemo.utils.json.CustomJsonFactory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./CustomJsonFactory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> CustomJsonFactory </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//com.inn.headstartdemo.utils.json.CustomJsonFactory extends org.codehaus.jackson.map.MappingJsonFactory
	c58784:p -> c58721:p [dir=back,arrowtail=empty];
	// com.inn.headstartdemo.utils.json.CustomJsonFactory DEPEND org.codehaus.jackson.JsonGenerator
	c58721:p -> c58785:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// com.inn.headstartdemo.utils.json.CustomJsonFactory DEPEND org.codehaus.jackson.io.IOContext
	c58721:p -> c58789:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// org.codehaus.jackson.JsonGenerator
	c58785 [label=<<table title="org.codehaus.jackson.JsonGenerator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/org/codehaus/jackson/JsonGenerator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> JsonGenerator </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + version() : Version </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + enable(arg0 : JsonGenerator.Feature) : JsonGenerator </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + disable(arg0 : JsonGenerator.Feature) : JsonGenerator </font></td></tr>
<tr><td align="left" balign="left"> + configure(arg0 : JsonGenerator.Feature, arg1 : boolean) : JsonGenerator </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isEnabled(arg0 : JsonGenerator.Feature) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setCodec(arg0 : ObjectCodec) : JsonGenerator </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getCodec() : ObjectCodec </font></td></tr>
<tr><td align="left" balign="left"> + enableFeature(arg0 : JsonGenerator.Feature) </td></tr>
<tr><td align="left" balign="left"> + disableFeature(arg0 : JsonGenerator.Feature) </td></tr>
<tr><td align="left" balign="left"> + setFeature(arg0 : JsonGenerator.Feature, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFeatureEnabled(arg0 : JsonGenerator.Feature) : boolean </td></tr>
<tr><td align="left" balign="left"> + setPrettyPrinter(arg0 : PrettyPrinter) : JsonGenerator </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + useDefaultPrettyPrinter() : JsonGenerator </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeStartArray() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeEndArray() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeStartObject() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeEndObject() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeFieldName(arg0 : String) </font></td></tr>
<tr><td align="left" balign="left"> + writeFieldName(arg0 : SerializedString) </td></tr>
<tr><td align="left" balign="left"> + writeFieldName(arg0 : SerializableString) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeString(arg0 : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeString(arg0 : char[], arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"> + writeString(arg0 : SerializableString) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRawUTF8String(arg0 : byte[], arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeUTF8String(arg0 : byte[], arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRaw(arg0 : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRaw(arg0 : String, arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRaw(arg0 : char[], arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRaw(arg0 : char) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRawValue(arg0 : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRawValue(arg0 : String, arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeRawValue(arg0 : char[], arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeBinary(arg0 : Base64Variant, arg1 : byte[], arg2 : int, arg3 : int) </font></td></tr>
<tr><td align="left" balign="left"> + writeBinary(arg0 : byte[], arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + writeBinary(arg0 : byte[]) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : long) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : BigInteger) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : float) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : BigDecimal) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNumber(arg0 : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeBoolean(arg0 : boolean) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeNull() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeObject(arg0 : Object) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + writeTree(arg0 : JsonNode) </font></td></tr>
<tr><td align="left" balign="left"> + writeStringField(arg0 : String, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + writeBooleanField(arg0 : String, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + writeNullField(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + writeNumberField(arg0 : String, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + writeNumberField(arg0 : String, arg1 : long) </td></tr>
<tr><td align="left" balign="left"> + writeNumberField(arg0 : String, arg1 : double) </td></tr>
<tr><td align="left" balign="left"> + writeNumberField(arg0 : String, arg1 : float) </td></tr>
<tr><td align="left" balign="left"> + writeNumberField(arg0 : String, arg1 : BigDecimal) </td></tr>
<tr><td align="left" balign="left"> + writeBinaryField(arg0 : String, arg1 : byte[]) </td></tr>
<tr><td align="left" balign="left"> + writeArrayFieldStart(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + writeObjectFieldStart(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + writeObjectField(arg0 : String, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + copyCurrentEvent(arg0 : JsonParser) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + copyCurrentStructure(arg0 : JsonParser) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getOutputContext() : JsonStreamContext </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + flush() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isClosed() : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + close() </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.codehaus.jackson.map.MappingJsonFactory
	c58784 [label=<<table title="org.codehaus.jackson.map.MappingJsonFactory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/org/codehaus/jackson/map/MappingJsonFactory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MappingJsonFactory </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getCodec() : ObjectMapper </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// org.codehaus.jackson.io.IOContext
	c58789 [label=<<table title="org.codehaus.jackson.io.IOContext" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/org/codehaus/jackson/io/IOContext.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IOContext </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setEncoding(arg0 : JsonEncoding) </td></tr>
<tr><td align="left" balign="left"> + getSourceReference() : Object </td></tr>
<tr><td align="left" balign="left"> + getEncoding() : JsonEncoding </td></tr>
<tr><td align="left" balign="left"> + isResourceManaged() : boolean </td></tr>
<tr><td align="left" balign="left"> + constructTextBuffer() : TextBuffer </td></tr>
<tr><td align="left" balign="left"> + allocReadIOBuffer() : byte[] </td></tr>
<tr><td align="left" balign="left"> + allocWriteEncodingBuffer() : byte[] </td></tr>
<tr><td align="left" balign="left"> + allocTokenBuffer() : char[] </td></tr>
<tr><td align="left" balign="left"> + allocConcatBuffer() : char[] </td></tr>
<tr><td align="left" balign="left"> + allocNameCopyBuffer(arg0 : int) : char[] </td></tr>
<tr><td align="left" balign="left"> + releaseReadIOBuffer(arg0 : byte[]) </td></tr>
<tr><td align="left" balign="left"> + releaseWriteEncodingBuffer(arg0 : byte[]) </td></tr>
<tr><td align="left" balign="left"> + releaseTokenBuffer(arg0 : char[]) </td></tr>
<tr><td align="left" balign="left"> + releaseConcatBuffer(arg0 : char[]) </td></tr>
<tr><td align="left" balign="left"> + releaseNameCopyBuffer(arg0 : char[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

